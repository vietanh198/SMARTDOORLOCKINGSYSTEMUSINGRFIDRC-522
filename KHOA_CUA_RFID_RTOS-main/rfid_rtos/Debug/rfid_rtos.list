
rfid_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008524  08008524  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008524  08008524  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008524  08008524  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800852c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  20000090  080085bc  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011f4  080085bc  000211f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b8  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326f  00000000  00000000  00032571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  00036b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3fa  00000000  00000000  00037d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001477d  00000000  00000000  00052102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b26  00000000  00000000  0006687f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa3a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  000fa3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008114 	.word	0x08008114

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008114 	.word	0x08008114

08000150 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000150:	b580      	push	{r7, lr}
 8000152:	b088      	sub	sp, #32
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000158:	f004 f90a 	bl	8004370 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000160:	2301      	movs	r3, #1
 8000162:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000168:	2300      	movs	r3, #0
 800016a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f004 f9e2 	bl	8004540 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800017c:	f004 f91e 	bl	80043bc <HAL_FLASH_Lock>
}
 8000180:	bf00      	nop
 8000182:	3720      	adds	r7, #32
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000188:	b5b0      	push	{r4, r5, r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000194:	f004 f8ec 	bl	8004370 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000198:	887b      	ldrh	r3, [r7, #2]
 800019a:	2200      	movs	r2, #0
 800019c:	461c      	mov	r4, r3
 800019e:	4615      	mov	r5, r2
 80001a0:	4622      	mov	r2, r4
 80001a2:	462b      	mov	r3, r5
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	2001      	movs	r0, #1
 80001a8:	f004 f872 	bl	8004290 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001ac:	f004 f906 	bl	80043bc <HAL_FLASH_Lock>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bdb0      	pop	{r4, r5, r7, pc}

080001b8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
 80001be:	60f8      	str	r0, [r7, #12]
 80001c0:	60b9      	str	r1, [r7, #8]
 80001c2:	4613      	mov	r3, r2
 80001c4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c6:	f004 f8d3 	bl	8004370 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001ca:	2300      	movs	r3, #0
 80001cc:	82fb      	strh	r3, [r7, #22]
 80001ce:	e00c      	b.n	80001ea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001d0:	8afa      	ldrh	r2, [r7, #22]
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	18d0      	adds	r0, r2, r3
 80001d6:	8afb      	ldrh	r3, [r7, #22]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	4413      	add	r3, r2
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	f7ff ffd2 	bl	8000188 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e4:	8afb      	ldrh	r3, [r7, #22]
 80001e6:	3302      	adds	r3, #2
 80001e8:	82fb      	strh	r3, [r7, #22]
 80001ea:	8afa      	ldrh	r2, [r7, #22]
 80001ec:	88fb      	ldrh	r3, [r7, #6]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d3ee      	bcc.n	80001d0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001f2:	f004 f8e3 	bl	80043bc <HAL_FLASH_Lock>
}
 80001f6:	bf00      	nop
 80001f8:	3718      	adds	r7, #24
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
}
 800020c:	4618      	mov	r0, r3
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr

08000216 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000216:	b480      	push	{r7}
 8000218:	b083      	sub	sp, #12
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
}
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr

0800022e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800023c:	4610      	mov	r0, r2
 800023e:	4619      	mov	r1, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000248:	b480      	push	{r7}
 800024a:	b087      	sub	sp, #28
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000256:	2300      	movs	r3, #0
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	e00c      	b.n	8000276 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 800025c:	8afa      	ldrh	r2, [r7, #22]
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	4413      	add	r3, r2
 8000262:	4619      	mov	r1, r3
 8000264:	8afb      	ldrh	r3, [r7, #22]
 8000266:	68ba      	ldr	r2, [r7, #8]
 8000268:	4413      	add	r3, r2
 800026a:	780a      	ldrb	r2, [r1, #0]
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000270:	8afb      	ldrh	r3, [r7, #22]
 8000272:	3301      	adds	r3, #1
 8000274:	82fb      	strh	r3, [r7, #22]
 8000276:	8afa      	ldrh	r2, [r7, #22]
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	429a      	cmp	r2, r3
 800027c:	d3ee      	bcc.n	800025c <Flash_Read_Array+0x14>
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	371c      	adds	r7, #28
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
	...

0800028c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <vApplicationGetIdleTaskMemory+0x28>)
 800029c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	200000ac 	.word	0x200000ac
 80002b8:	20000100 	.word	0x20000100

080002bc <CLCD_Delay>:
#include "lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 feab 	bl	8004024 <HAL_Delay>

}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
 80002de:	460b      	mov	r3, r1
 80002e0:	70fb      	strb	r3, [r7, #3]
 80002e2:	4613      	mov	r3, r2
 80002e4:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80002e6:	78bb      	ldrb	r3, [r7, #2]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d108      	bne.n	80002fe <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6858      	ldr	r0, [r3, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	891b      	ldrh	r3, [r3, #8]
 80002f4:	2200      	movs	r2, #0
 80002f6:	4619      	mov	r1, r3
 80002f8:	f004 fb65 	bl	80049c6 <HAL_GPIO_WritePin>
 80002fc:	e00a      	b.n	8000314 <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80002fe:	78bb      	ldrb	r3, [r7, #2]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d107      	bne.n	8000314 <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	891b      	ldrh	r3, [r3, #8]
 800030c:	2201      	movs	r2, #1
 800030e:	4619      	mov	r1, r3
 8000310:	f004 fb59 	bl	80049c6 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6958      	ldr	r0, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	8b19      	ldrh	r1, [r3, #24]
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	f004 fb4e 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	69d8      	ldr	r0, [r3, #28]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	8c19      	ldrh	r1, [r3, #32]
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	085b      	lsrs	r3, r3, #1
 8000336:	b2db      	uxtb	r3, r3
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	b2db      	uxtb	r3, r3
 800033e:	461a      	mov	r2, r3
 8000340:	f004 fb41 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	f004 fb34 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	08db      	lsrs	r3, r3, #3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f004 fb27 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	091b      	lsrs	r3, r3, #4
 8000384:	b2db      	uxtb	r3, r3
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	f004 fb1a 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	f004 fb0c 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	099b      	lsrs	r3, r3, #6
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	f004 fafe 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	09db      	lsrs	r3, r3, #7
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	f004 faf3 	bl	80049c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68d8      	ldr	r0, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8a1b      	ldrh	r3, [r3, #16]
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	f004 faeb 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ff63 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68d8      	ldr	r0, [r3, #12]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	8a1b      	ldrh	r3, [r3, #16]
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	f004 fae0 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f7ff ff58 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	68d8      	ldr	r0, [r3, #12]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	8a1b      	ldrh	r3, [r3, #16]
 8000414:	2200      	movs	r2, #0
 8000416:	4619      	mov	r1, r3
 8000418:	f004 fad5 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f7ff ff4d 	bl	80002bc <CLCD_Delay>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b084      	sub	sp, #16
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	460b      	mov	r3, r1
 8000434:	70fb      	strb	r3, [r7, #3]
 8000436:	4613      	mov	r3, r2
 8000438:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d108      	bne.n	800045c <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6858      	ldr	r0, [r3, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	891b      	ldrh	r3, [r3, #8]
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	f004 fab6 	bl	80049c6 <HAL_GPIO_WritePin>
 800045a:	e00a      	b.n	8000472 <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 800045c:	78bb      	ldrb	r3, [r7, #2]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d107      	bne.n	8000472 <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6858      	ldr	r0, [r3, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	891b      	ldrh	r3, [r3, #8]
 800046a:	2201      	movs	r2, #1
 800046c:	4619      	mov	r1, r3
 800046e:	f004 faaa 	bl	80049c6 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	f004 fa9f 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	085b      	lsrs	r3, r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	f004 fa91 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	089b      	lsrs	r3, r3, #2
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	f004 fa83 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	08db      	lsrs	r3, r3, #3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	f004 fa75 	bl	80049c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68d8      	ldr	r0, [r3, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	8a1b      	ldrh	r3, [r3, #16]
 80004e4:	2200      	movs	r2, #0
 80004e6:	4619      	mov	r1, r3
 80004e8:	f004 fa6d 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff fee5 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	68d8      	ldr	r0, [r3, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	8a1b      	ldrh	r3, [r3, #16]
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	f004 fa62 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff feda 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68d8      	ldr	r0, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	8a1b      	ldrh	r3, [r3, #16]
 8000510:	2200      	movs	r2, #0
 8000512:	4619      	mov	r1, r3
 8000514:	f004 fa57 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fecf 	bl	80002bc <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	f004 fa49 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	085b      	lsrs	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	f004 fa3b 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f004 fa2d 	bl	80049c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	f004 fa1f 	bl	80049c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68d8      	ldr	r0, [r3, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	8a1b      	ldrh	r3, [r3, #16]
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	f004 fa17 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fe8f 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68d8      	ldr	r0, [r3, #12]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	8a1b      	ldrh	r3, [r3, #16]
 80005a6:	2201      	movs	r2, #1
 80005a8:	4619      	mov	r1, r3
 80005aa:	f004 fa0c 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fe84 	bl	80002bc <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	68d8      	ldr	r0, [r3, #12]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	8a1b      	ldrh	r3, [r3, #16]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f004 fa01 	bl	80049c6 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff fe79 	bl	80002bc <CLCD_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	72fb      	strb	r3, [r7, #11]
 80005e0:	4613      	mov	r3, r2
 80005e2:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	7afa      	ldrb	r2, [r7, #11]
 80005ee:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	7aba      	ldrb	r2, [r7, #10]
 80005f4:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	8b3a      	ldrh	r2, [r7, #24]
 8000600:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	69fa      	ldr	r2, [r7, #28]
 8000606:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	8c3a      	ldrh	r2, [r7, #32]
 800060c:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000618:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800061e:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800062c:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800063a:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2228      	movs	r2, #40	; 0x28
 800064a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2206      	movs	r2, #6
 8000652:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	220c      	movs	r2, #12
 800065a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2214      	movs	r2, #20
 8000662:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f7ff fe28 	bl	80002bc <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 800066c:	2200      	movs	r2, #0
 800066e:	2133      	movs	r1, #51	; 0x33
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff feda 	bl	800042a <CLCD_Write4>
	CLCD_Delay(5);
 8000676:	2005      	movs	r0, #5
 8000678:	f7ff fe20 	bl	80002bc <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 800067c:	2200      	movs	r2, #0
 800067e:	2133      	movs	r1, #51	; 0x33
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff fed2 	bl	800042a <CLCD_Write4>
	CLCD_Delay(5);
 8000686:	2005      	movs	r0, #5
 8000688:	f7ff fe18 	bl	80002bc <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 800068c:	2200      	movs	r2, #0
 800068e:	2132      	movs	r1, #50	; 0x32
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff feca 	bl	800042a <CLCD_Write4>
	CLCD_Delay(5);
 8000696:	2005      	movs	r0, #5
 8000698:	f7ff fe10 	bl	80002bc <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f7ff febf 	bl	800042a <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f7ff feb7 	bl	800042a <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f7ff feaf 	bl	800042a <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f7ff fea7 	bl	800042a <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff fea2 	bl	800042a <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff fe9d 	bl	800042a <CLCD_Write4>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
 8000704:	4613      	mov	r3, r2
 8000706:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <CLCD_SetCursor+0x8c>)
 800070e:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	78fa      	ldrb	r2, [r7, #3]
 8000716:	429a      	cmp	r2, r3
 8000718:	d303      	bcc.n	8000722 <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	3b01      	subs	r3, #1
 8000720:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	78ba      	ldrb	r2, [r7, #2]
 8000728:	429a      	cmp	r2, r3
 800072a:	d303      	bcc.n	8000734 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	3b01      	subs	r3, #1
 8000732:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8000734:	78bb      	ldrb	r3, [r7, #2]
 8000736:	3310      	adds	r3, #16
 8000738:	443b      	add	r3, r7
 800073a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	4413      	add	r3, r2
 8000742:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b10      	cmp	r3, #16
 800074a:	d109      	bne.n	8000760 <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fdbc 	bl	80002d6 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 800075e:	e00c      	b.n	800077a <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d108      	bne.n	800077a <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe58 	bl	800042a <CLCD_Write4>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	54144000 	.word	0x54144000

08000788 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b10      	cmp	r3, #16
 800079a:	d106      	bne.n	80007aa <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fd97 	bl	80002d6 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 80007a8:	e009      	b.n	80007be <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d105      	bne.n	80007be <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fe36 	bl	800042a <CLCD_Write4>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
	while(*String){
 80007d0:	e007      	b.n	80007e2 <CLCD_WriteString+0x1c>
		CLCD_WriteChar(LCD, *String++);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	603a      	str	r2, [r7, #0]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffd3 	bl	8000788 <CLCD_WriteChar>
	while(*String){
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f3      	bne.n	80007d2 <CLCD_WriteString+0xc>
//		HAL_Delay(100);
	}
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b10      	cmp	r3, #16
 8000802:	d105      	bne.n	8000810 <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fd64 	bl	80002d6 <CLCD_Write8>
 800080e:	e008      	b.n	8000822 <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d104      	bne.n	8000822 <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fe04 	bl	800042a <CLCD_Write4>
	}
	CLCD_Delay(5);
 8000822:	2005      	movs	r0, #5
 8000824:	f7ff fd4a 	bl	80002bc <CLCD_Delay>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b09a      	sub	sp, #104	; 0x68
 8000834:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f003 fbc3 	bl	8003fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f865 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f92d 	bl	8000a9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000842:	f000 f8a7 	bl	8000994 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000846:	f000 f8db 	bl	8000a00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	TM_MFRC522_Init();
 800084a:	f002 ff8b 	bl	8003764 <TM_MFRC522_Init>

	CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 800084e:	2308      	movs	r3, #8
 8000850:	930a      	str	r3, [sp, #40]	; 0x28
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <main+0xbc>)
 8000854:	9309      	str	r3, [sp, #36]	; 0x24
 8000856:	2310      	movs	r3, #16
 8000858:	9308      	str	r3, [sp, #32]
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <main+0xbc>)
 800085c:	9307      	str	r3, [sp, #28]
 800085e:	2320      	movs	r3, #32
 8000860:	9306      	str	r3, [sp, #24]
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <main+0xbc>)
 8000864:	9305      	str	r3, [sp, #20]
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	9304      	str	r3, [sp, #16]
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <main+0xbc>)
 800086c:	9303      	str	r3, [sp, #12]
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <main+0xbc>)
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <main+0xbc>)
 800087e:	2202      	movs	r2, #2
 8000880:	2110      	movs	r1, #16
 8000882:	481b      	ldr	r0, [pc, #108]	; (80008f0 <main+0xc0>)
 8000884:	f7ff fea5 	bl	80005d2 <CLCD_4BIT_Init>
				   D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
				   D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);

	HAL_TIM_Base_Start_IT(&htim2);
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <main+0xc4>)
 800088a:	f005 f837 	bl	80058fc <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 800088e:	f002 f9ab 	bl	8002be8 <checkcountUID>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <main+0x6c>
	{
		startadd();
 8000898:	f002 fbd8 	bl	800304c <startadd>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <main+0xc8>)
 800089e:	f107 041c 	add.w	r4, r7, #28
 80008a2:	461d      	mov	r5, r3
 80008a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fbe8 	bl	800608c <osThreadCreate>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <main+0xcc>)
 80008c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(task1, startabntask, osPriorityAboveNormal, 0, 128);
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0xd0>)
 80008c4:	463c      	mov	r4, r7
 80008c6:	461d      	mov	r5, r3
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  abnTaskHanle = osThreadCreate(osThread(task1), NULL);
 80008d4:	463b      	mov	r3, r7
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f005 fbd7 	bl	800608c <osThreadCreate>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <main+0xd4>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008e4:	f005 fbcb 	bl	800607e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 80008e8:	e7fe      	b.n	80008e8 <main+0xb8>
 80008ea:	bf00      	nop
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	200003b8 	.word	0x200003b8
 80008f4:	20000358 	.word	0x20000358
 80008f8:	08008140 	.word	0x08008140
 80008fc:	200003a0 	.word	0x200003a0
 8000900:	0800815c 	.word	0x0800815c
 8000904:	200003a4 	.word	0x200003a4

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b090      	sub	sp, #64	; 0x40
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	2228      	movs	r2, #40	; 0x28
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 ff88 	bl	800782c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000946:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f004 f881 	bl	8004a58 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800095c:	f002 fed4 	bl	8003708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f004 faee 	bl	8004f5c <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000986:	f002 febf 	bl	8003708 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3740      	adds	r7, #64	; 0x40
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_SPI1_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_SPI1_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009c8:	2230      	movs	r2, #48	; 0x30
 80009ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009e0:	220a      	movs	r2, #10
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_SPI1_Init+0x64>)
 80009e6:	f004 fc6d 	bl	80052c4 <HAL_SPI_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009f0:	f002 fe8a 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000300 	.word	0x20000300
 80009fc:	40013000 	.word	0x40013000

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a26:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a34:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f004 ff08 	bl	800585c <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f002 fe59 	bl	8003708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f005 f8a4 	bl	8005bb0 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f002 fe4b 	bl	8003708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f005 fa76 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f002 fe3d 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000358 	.word	0x20000358

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a49      	ldr	r2, [pc, #292]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a3d      	ldr	r2, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	4832      	ldr	r0, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b18:	f003 ff55 	bl	80049c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|QR_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f248 4110 	movw	r1, #33808	; 0x8410
 8000b22:	4830      	ldr	r0, [pc, #192]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b24:	f003 ff4f 	bl	80049c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f247 31f8 	movw	r1, #29688	; 0x73f8
 8000b2e:	482e      	ldr	r0, [pc, #184]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b30:	f003 ff49 	bl	80049c6 <HAL_GPIO_WritePin>
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b4e:	f003 fd9f 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin QR_Pin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|QR_Pin|GPIO_PIN_15;
 8000b52:	f248 4310 	movw	r3, #33808	; 0x8410
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b6c:	f003 fd90 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOA_Pin KHOA_Pin LED_Pin D7_Pin
                           D6_Pin D5_Pin D4_Pin EN_Pin
                           RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000b70:	f247 33f8 	movw	r3, #29688	; 0x73f8
 8000b74:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b8a:	f003 fd81 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECCT_Pin */
  GPIO_InitStruct.Pin = SELECCT_Pin;
 8000b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SELECCT_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000ba4:	f003 fd74 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8000ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_GPIO_Init+0x150>)
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000bbe:	f003 fd67 	bl	8004690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2017      	movs	r0, #23
 8000bc8:	f003 fb29 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bcc:	2017      	movs	r0, #23
 8000bce:	f003 fb42 	bl	8004256 <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	10210000 	.word	0x10210000

08000bf0 <Set_Pin_Input>:

/* USER CODE BEGIN 4 */

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f003 fd37 	bl	8004690 <HAL_GPIO_Init>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Set_Pin_IT>:

void Set_Pin_IT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <Set_Pin_IT+0x40>)
 8000c4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f003 fd19 	bl	8004690 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c5e:	2017      	movs	r0, #23
 8000c60:	f003 faf9 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	10210000 	.word	0x10210000

08000c70 <checkbuton>:

uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f003 fe89 	bl	8004998 <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <checkbuton+0x20>
		return 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e039      	b.n	8000d04 <checkbuton+0x94>
	else
	{
		HAL_Delay(50);
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f003 f9c7 	bl	8004024 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)	return 0;
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f003 fe7c 	bl	8004998 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <checkbuton+0x3a>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e02c      	b.n	8000d04 <checkbuton+0x94>
		uint8_t i = 50;
 8000caa:	2332      	movs	r3, #50	; 0x32
 8000cac:	73fb      	strb	r3, [r7, #15]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000cae:	e020      	b.n	8000cf2 <checkbuton+0x82>
		{
			HAL_Delay(10);
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f003 f9b7 	bl	8004024 <HAL_Delay>
			i--;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
			if (i == 0)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d117      	bne.n	8000cf2 <checkbuton+0x82>
			{
				i = 250;
 8000cc2:	23fa      	movs	r3, #250	; 0xfa
 8000cc4:	73fb      	strb	r3, [r7, #15]
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000cc6:	e00a      	b.n	8000cde <checkbuton+0x6e>
				{
					HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f003 f9ab 	bl	8004024 <HAL_Delay>
					i--;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
					if(i == 0)	return 3;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <checkbuton+0x6e>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e012      	b.n	8000d04 <checkbuton+0x94>
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f003 fe58 	bl	8004998 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0ec      	beq.n	8000cc8 <checkbuton+0x58>
				}
				return 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e008      	b.n	8000d04 <checkbuton+0x94>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f003 fe4e 	bl	8004998 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0d6      	beq.n	8000cb0 <checkbuton+0x40>
			}
		}
		return 1;
 8000d02:	2301      	movs	r3, #1
	}
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <seclectmenu>:

void seclectmenu(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
	exitmenu = 15;
 8000d12:	4bb7      	ldr	r3, [pc, #732]	; (8000ff0 <seclectmenu+0x2e4>)
 8000d14:	220f      	movs	r2, #15
 8000d16:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8000d18:	23ff      	movs	r3, #255	; 0xff
 8000d1a:	75fb      	strb	r3, [r7, #23]
	CLCD_Clear(&LCD1);
 8000d1c:	48b5      	ldr	r0, [pc, #724]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d1e:	f7ff fd69 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	48b3      	ldr	r0, [pc, #716]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d28:	f7ff fce6 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "  SELECT MENU");
 8000d2c:	49b2      	ldr	r1, [pc, #712]	; (8000ff8 <seclectmenu+0x2ec>)
 8000d2e:	48b1      	ldr	r0, [pc, #708]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d30:	f7ff fd49 	bl	80007c6 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2100      	movs	r1, #0
 8000d38:	48ae      	ldr	r0, [pc, #696]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d3a:	f7ff fcdd 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "    THEM THE");
 8000d3e:	49af      	ldr	r1, [pc, #700]	; (8000ffc <seclectmenu+0x2f0>)
 8000d40:	48ac      	ldr	r0, [pc, #688]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d42:	f7ff fd40 	bl	80007c6 <CLCD_WriteString>
	while (exitmenu )
 8000d46:	f001 bec7 	b.w	8002ad8 <seclectmenu+0x1dcc>
	{
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	48ac      	ldr	r0, [pc, #688]	; (8001000 <seclectmenu+0x2f4>)
 8000d50:	f7ff ff8e 	bl	8000c70 <checkbuton>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d06e      	beq.n	8000e38 <seclectmenu+0x12c>
		{
			exitmenu = 15;
 8000d5a:	4ba5      	ldr	r3, [pc, #660]	; (8000ff0 <seclectmenu+0x2e4>)
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	701a      	strb	r2, [r3, #0]
			status++;
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	3301      	adds	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d801      	bhi.n	8000d70 <seclectmenu+0x64>
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	e000      	b.n	8000d72 <seclectmenu+0x66>
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d032      	beq.n	8000de0 <seclectmenu+0xd4>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	dc46      	bgt.n	8000e0c <seclectmenu+0x100>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <seclectmenu+0x7c>
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d016      	beq.n	8000db4 <seclectmenu+0xa8>
 8000d86:	e041      	b.n	8000e0c <seclectmenu+0x100>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000d88:	489a      	ldr	r0, [pc, #616]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d8a:	f7ff fd33 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d94:	f7ff fcb0 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 8000d98:	499a      	ldr	r1, [pc, #616]	; (8001004 <seclectmenu+0x2f8>)
 8000d9a:	4896      	ldr	r0, [pc, #600]	; (8000ff4 <seclectmenu+0x2e8>)
 8000d9c:	f7ff fd13 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2100      	movs	r1, #0
 8000da4:	4893      	ldr	r0, [pc, #588]	; (8000ff4 <seclectmenu+0x2e8>)
 8000da6:	f7ff fca7 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000daa:	4997      	ldr	r1, [pc, #604]	; (8001008 <seclectmenu+0x2fc>)
 8000dac:	4891      	ldr	r0, [pc, #580]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dae:	f7ff fd0a 	bl	80007c6 <CLCD_WriteString>
				break;
 8000db2:	e042      	b.n	8000e3a <seclectmenu+0x12e>
			case 1:
				CLCD_Clear(&LCD1);
 8000db4:	488f      	ldr	r0, [pc, #572]	; (8000ff4 <seclectmenu+0x2e8>)
 8000db6:	f7ff fd1d 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	488d      	ldr	r0, [pc, #564]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dc0:	f7ff fc9a 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8000dc4:	498d      	ldr	r1, [pc, #564]	; (8000ffc <seclectmenu+0x2f0>)
 8000dc6:	488b      	ldr	r0, [pc, #556]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dc8:	f7ff fcfd 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4888      	ldr	r0, [pc, #544]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dd2:	f7ff fc91 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8000dd6:	498d      	ldr	r1, [pc, #564]	; (800100c <seclectmenu+0x300>)
 8000dd8:	4886      	ldr	r0, [pc, #536]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dda:	f7ff fcf4 	bl	80007c6 <CLCD_WriteString>
				break;
 8000dde:	e02c      	b.n	8000e3a <seclectmenu+0x12e>
			case 2:
				CLCD_Clear(&LCD1);
 8000de0:	4884      	ldr	r0, [pc, #528]	; (8000ff4 <seclectmenu+0x2e8>)
 8000de2:	f7ff fd07 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	4882      	ldr	r0, [pc, #520]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dec:	f7ff fc84 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000df0:	4985      	ldr	r1, [pc, #532]	; (8001008 <seclectmenu+0x2fc>)
 8000df2:	4880      	ldr	r0, [pc, #512]	; (8000ff4 <seclectmenu+0x2e8>)
 8000df4:	f7ff fce7 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	487d      	ldr	r0, [pc, #500]	; (8000ff4 <seclectmenu+0x2e8>)
 8000dfe:	f7ff fc7b 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8000e02:	4983      	ldr	r1, [pc, #524]	; (8001010 <seclectmenu+0x304>)
 8000e04:	487b      	ldr	r0, [pc, #492]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e06:	f7ff fcde 	bl	80007c6 <CLCD_WriteString>
				break;
 8000e0a:	e016      	b.n	8000e3a <seclectmenu+0x12e>
			default:
				CLCD_Clear(&LCD1);
 8000e0c:	4879      	ldr	r0, [pc, #484]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e0e:	f7ff fcf1 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4877      	ldr	r0, [pc, #476]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e18:	f7ff fc6e 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    TRA THE");
 8000e1c:	497d      	ldr	r1, [pc, #500]	; (8001014 <seclectmenu+0x308>)
 8000e1e:	4875      	ldr	r0, [pc, #468]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e20:	f7ff fcd1 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	4872      	ldr	r0, [pc, #456]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e2a:	f7ff fc65 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THOAT");
 8000e2e:	497a      	ldr	r1, [pc, #488]	; (8001018 <seclectmenu+0x30c>)
 8000e30:	4870      	ldr	r0, [pc, #448]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e32:	f7ff fcc8 	bl	80007c6 <CLCD_WriteString>
				break;
 8000e36:	e000      	b.n	8000e3a <seclectmenu+0x12e>
			}
		}
 8000e38:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4877      	ldr	r0, [pc, #476]	; (800101c <seclectmenu+0x310>)
 8000e40:	f7ff ff16 	bl	8000c70 <checkbuton>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f001 8645 	beq.w	8002ad6 <seclectmenu+0x1dca>
		{
			exitmenu = 15;
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <seclectmenu+0x2e4>)
 8000e4e:	220f      	movs	r2, #15
 8000e50:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f001 8622 	beq.w	8002a9e <seclectmenu+0x1d92>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	f301 8637 	bgt.w	8002ace <seclectmenu+0x1dc2>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <seclectmenu+0x162>
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f000 8556 	beq.w	8001916 <seclectmenu+0xc0a>
 8000e6a:	f001 be30 	b.w	8002ace <seclectmenu+0x1dc2>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000e6e:	4861      	ldr	r0, [pc, #388]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e70:	f7ff fcc0 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	485e      	ldr	r0, [pc, #376]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e7a:	f7ff fc3d 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    SELECT ");
 8000e7e:	4968      	ldr	r1, [pc, #416]	; (8001020 <seclectmenu+0x314>)
 8000e80:	485c      	ldr	r0, [pc, #368]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e82:	f7ff fca0 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2100      	movs	r1, #0
 8000e8a:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e8c:	f7ff fc34 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8000e90:	4964      	ldr	r1, [pc, #400]	; (8001024 <seclectmenu+0x318>)
 8000e92:	4858      	ldr	r0, [pc, #352]	; (8000ff4 <seclectmenu+0x2e8>)
 8000e94:	f7ff fc97 	bl	80007c6 <CLCD_WriteString>
				uint8_t statusadd = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8000ea0:	f000 bd1e 	b.w	80018e0 <seclectmenu+0xbd4>
				{
					if (exitmenu == 0)
 8000ea4:	4b52      	ldr	r3, [pc, #328]	; (8000ff0 <seclectmenu+0x2e4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d108      	bne.n	8000ebe <seclectmenu+0x1b2>
					{
						CLCD_Clear(&LCD1);
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <seclectmenu+0x2e8>)
 8000eae:	f7ff fca1 	bl	80007f4 <CLCD_Clear>
						HAL_Delay(1000);
 8000eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb6:	f003 f8b5 	bl	8004024 <HAL_Delay>
						return;
 8000eba:	f001 be19 	b.w	8002af0 <seclectmenu+0x1de4>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	484f      	ldr	r0, [pc, #316]	; (8001000 <seclectmenu+0x2f4>)
 8000ec4:	f7ff fed4 	bl	8000c70 <checkbuton>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d054      	beq.n	8000f78 <seclectmenu+0x26c>
					{
						exitmenu = 15;
 8000ece:	4b48      	ldr	r3, [pc, #288]	; (8000ff0 <seclectmenu+0x2e4>)
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8000ed4:	7dbb      	ldrb	r3, [r7, #22]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d801      	bhi.n	8000ee4 <seclectmenu+0x1d8>
 8000ee0:	7dbb      	ldrb	r3, [r7, #22]
 8000ee2:	e000      	b.n	8000ee6 <seclectmenu+0x1da>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8000ee8:	7dbb      	ldrb	r3, [r7, #22]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d002      	beq.n	8000ef4 <seclectmenu+0x1e8>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d016      	beq.n	8000f20 <seclectmenu+0x214>
 8000ef2:	e02b      	b.n	8000f4c <seclectmenu+0x240>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000ef4:	483f      	ldr	r0, [pc, #252]	; (8000ff4 <seclectmenu+0x2e8>)
 8000ef6:	f7ff fc7d 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	483d      	ldr	r0, [pc, #244]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f00:	f7ff fbfa 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8000f04:	4948      	ldr	r1, [pc, #288]	; (8001028 <seclectmenu+0x31c>)
 8000f06:	483b      	ldr	r0, [pc, #236]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f08:	f7ff fc5d 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f12:	f7ff fbf1 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 8000f16:	4945      	ldr	r1, [pc, #276]	; (800102c <seclectmenu+0x320>)
 8000f18:	4836      	ldr	r0, [pc, #216]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f1a:	f7ff fc54 	bl	80007c6 <CLCD_WriteString>
							break;
 8000f1e:	e02c      	b.n	8000f7a <seclectmenu+0x26e>
						case 2:
							CLCD_Clear(&LCD1);
 8000f20:	4834      	ldr	r0, [pc, #208]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f22:	f7ff fc67 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4832      	ldr	r0, [pc, #200]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f2c:	f7ff fbe4 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8000f30:	493c      	ldr	r1, [pc, #240]	; (8001024 <seclectmenu+0x318>)
 8000f32:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f34:	f7ff fc47 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f3e:	f7ff fbdb 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8000f42:	493b      	ldr	r1, [pc, #236]	; (8001030 <seclectmenu+0x324>)
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f46:	f7ff fc3e 	bl	80007c6 <CLCD_WriteString>
							break;
 8000f4a:	e016      	b.n	8000f7a <seclectmenu+0x26e>
						default:
							CLCD_Clear(&LCD1);
 8000f4c:	4829      	ldr	r0, [pc, #164]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f4e:	f7ff fc51 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f58:	f7ff fbce 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 8000f5c:	4933      	ldr	r1, [pc, #204]	; (800102c <seclectmenu+0x320>)
 8000f5e:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f60:	f7ff fc31 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2100      	movs	r1, #0
 8000f68:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f6a:	f7ff fbc5 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8000f6e:	4931      	ldr	r1, [pc, #196]	; (8001034 <seclectmenu+0x328>)
 8000f70:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <seclectmenu+0x2e8>)
 8000f72:	f7ff fc28 	bl	80007c6 <CLCD_WriteString>
							break;
 8000f76:	e000      	b.n	8000f7a <seclectmenu+0x26e>
						}
					}
 8000f78:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7e:	4827      	ldr	r0, [pc, #156]	; (800101c <seclectmenu+0x310>)
 8000f80:	f7ff fe76 	bl	8000c70 <checkbuton>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 84a9 	beq.w	80018de <seclectmenu+0xbd2>
					{
						exitmenu = 15;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <seclectmenu+0x2e4>)
 8000f8e:	220f      	movs	r2, #15
 8000f90:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8000f92:	7dbb      	ldrb	r3, [r7, #22]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d004      	beq.n	8000fa2 <seclectmenu+0x296>
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	f000 8264 	beq.w	8001466 <seclectmenu+0x75a>
 8000f9e:	f000 bc9b 	b.w	80018d8 <seclectmenu+0xbcc>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fa4:	f7ff fc26 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fae:	f7ff fba3 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8000fb2:	4921      	ldr	r1, [pc, #132]	; (8001038 <seclectmenu+0x32c>)
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fb6:	f7ff fc06 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fc0:	f7ff fb9a 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 8000fc4:	491d      	ldr	r1, [pc, #116]	; (800103c <seclectmenu+0x330>)
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fc8:	f7ff fbfd 	bl	80007c6 <CLCD_WriteString>
							uint8_t statusadd1 = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8000fd4:	e22d      	b.n	8001432 <seclectmenu+0x726>
							{
								if (exitmenu == 0)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <seclectmenu+0x2e4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d130      	bne.n	8001040 <seclectmenu+0x334>
								{
									CLCD_Clear(&LCD1);
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <seclectmenu+0x2e8>)
 8000fe0:	f7ff fc08 	bl	80007f4 <CLCD_Clear>
									HAL_Delay(1000);
 8000fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe8:	f003 f81c 	bl	8004024 <HAL_Delay>
									return;
 8000fec:	f001 bd80 	b.w	8002af0 <seclectmenu+0x1de4>
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	200003b8 	.word	0x200003b8
 8000ff8:	08008178 	.word	0x08008178
 8000ffc:	08008188 	.word	0x08008188
 8001000:	40010c00 	.word	0x40010c00
 8001004:	08008198 	.word	0x08008198
 8001008:	080081a8 	.word	0x080081a8
 800100c:	080081b4 	.word	0x080081b4
 8001010:	080081c0 	.word	0x080081c0
 8001014:	080081cc 	.word	0x080081cc
 8001018:	080081d8 	.word	0x080081d8
 800101c:	40010800 	.word	0x40010800
 8001020:	080081e4 	.word	0x080081e4
 8001024:	080081f0 	.word	0x080081f0
 8001028:	08008204 	.word	0x08008204
 800102c:	08008218 	.word	0x08008218
 8001030:	08008228 	.word	0x08008228
 8001034:	08008238 	.word	0x08008238
 8001038:	08008240 	.word	0x08008240
 800103c:	0800824c 	.word	0x0800824c
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001044:	48b8      	ldr	r0, [pc, #736]	; (8001328 <seclectmenu+0x61c>)
 8001046:	f7ff fe13 	bl	8000c70 <checkbuton>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 808b 	beq.w	8001168 <seclectmenu+0x45c>
								{
									exitmenu = 15;
 8001052:	4bb6      	ldr	r3, [pc, #728]	; (800132c <seclectmenu+0x620>)
 8001054:	220f      	movs	r2, #15
 8001056:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001058:	7d3b      	ldrb	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 800105e:	7d3b      	ldrb	r3, [r7, #20]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d801      	bhi.n	8001068 <seclectmenu+0x35c>
 8001064:	7d3b      	ldrb	r3, [r7, #20]
 8001066:	e000      	b.n	800106a <seclectmenu+0x35e>
 8001068:	2300      	movs	r3, #0
 800106a:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	3b01      	subs	r3, #1
 8001070:	2b03      	cmp	r3, #3
 8001072:	d863      	bhi.n	800113c <seclectmenu+0x430>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <seclectmenu+0x370>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	0800108d 	.word	0x0800108d
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010e5 	.word	0x080010e5
 8001088:	08001111 	.word	0x08001111
									{
									case 1:
										CLCD_Clear(&LCD1);
 800108c:	48a8      	ldr	r0, [pc, #672]	; (8001330 <seclectmenu+0x624>)
 800108e:	f7ff fbb1 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	48a6      	ldr	r0, [pc, #664]	; (8001330 <seclectmenu+0x624>)
 8001098:	f7ff fb2e 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800109c:	49a5      	ldr	r1, [pc, #660]	; (8001334 <seclectmenu+0x628>)
 800109e:	48a4      	ldr	r0, [pc, #656]	; (8001330 <seclectmenu+0x624>)
 80010a0:	f7ff fb91 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2100      	movs	r1, #0
 80010a8:	48a1      	ldr	r0, [pc, #644]	; (8001330 <seclectmenu+0x624>)
 80010aa:	f7ff fb25 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 80010ae:	49a2      	ldr	r1, [pc, #648]	; (8001338 <seclectmenu+0x62c>)
 80010b0:	489f      	ldr	r0, [pc, #636]	; (8001330 <seclectmenu+0x624>)
 80010b2:	f7ff fb88 	bl	80007c6 <CLCD_WriteString>
										break;
 80010b6:	e058      	b.n	800116a <seclectmenu+0x45e>
									case 2:
										CLCD_Clear(&LCD1);
 80010b8:	489d      	ldr	r0, [pc, #628]	; (8001330 <seclectmenu+0x624>)
 80010ba:	f7ff fb9b 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	489b      	ldr	r0, [pc, #620]	; (8001330 <seclectmenu+0x624>)
 80010c4:	f7ff fb18 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80010c8:	499c      	ldr	r1, [pc, #624]	; (800133c <seclectmenu+0x630>)
 80010ca:	4899      	ldr	r0, [pc, #612]	; (8001330 <seclectmenu+0x624>)
 80010cc:	f7ff fb7b 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2100      	movs	r1, #0
 80010d4:	4896      	ldr	r0, [pc, #600]	; (8001330 <seclectmenu+0x624>)
 80010d6:	f7ff fb0f 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 80010da:	4999      	ldr	r1, [pc, #612]	; (8001340 <seclectmenu+0x634>)
 80010dc:	4894      	ldr	r0, [pc, #592]	; (8001330 <seclectmenu+0x624>)
 80010de:	f7ff fb72 	bl	80007c6 <CLCD_WriteString>
										break;
 80010e2:	e042      	b.n	800116a <seclectmenu+0x45e>
									case 3:
										CLCD_Clear(&LCD1);
 80010e4:	4892      	ldr	r0, [pc, #584]	; (8001330 <seclectmenu+0x624>)
 80010e6:	f7ff fb85 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	4890      	ldr	r0, [pc, #576]	; (8001330 <seclectmenu+0x624>)
 80010f0:	f7ff fb02 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80010f4:	4993      	ldr	r1, [pc, #588]	; (8001344 <seclectmenu+0x638>)
 80010f6:	488e      	ldr	r0, [pc, #568]	; (8001330 <seclectmenu+0x624>)
 80010f8:	f7ff fb65 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	488b      	ldr	r0, [pc, #556]	; (8001330 <seclectmenu+0x624>)
 8001102:	f7ff faf9 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 8001106:	4990      	ldr	r1, [pc, #576]	; (8001348 <seclectmenu+0x63c>)
 8001108:	4889      	ldr	r0, [pc, #548]	; (8001330 <seclectmenu+0x624>)
 800110a:	f7ff fb5c 	bl	80007c6 <CLCD_WriteString>
										break;
 800110e:	e02c      	b.n	800116a <seclectmenu+0x45e>
									case 4:
										CLCD_Clear(&LCD1);
 8001110:	4887      	ldr	r0, [pc, #540]	; (8001330 <seclectmenu+0x624>)
 8001112:	f7ff fb6f 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	4885      	ldr	r0, [pc, #532]	; (8001330 <seclectmenu+0x624>)
 800111c:	f7ff faec 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001120:	498a      	ldr	r1, [pc, #552]	; (800134c <seclectmenu+0x640>)
 8001122:	4883      	ldr	r0, [pc, #524]	; (8001330 <seclectmenu+0x624>)
 8001124:	f7ff fb4f 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2100      	movs	r1, #0
 800112c:	4880      	ldr	r0, [pc, #512]	; (8001330 <seclectmenu+0x624>)
 800112e:	f7ff fae3 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 8001132:	4987      	ldr	r1, [pc, #540]	; (8001350 <seclectmenu+0x644>)
 8001134:	487e      	ldr	r0, [pc, #504]	; (8001330 <seclectmenu+0x624>)
 8001136:	f7ff fb46 	bl	80007c6 <CLCD_WriteString>
										break;
 800113a:	e016      	b.n	800116a <seclectmenu+0x45e>
									default:
										CLCD_Clear(&LCD1);
 800113c:	487c      	ldr	r0, [pc, #496]	; (8001330 <seclectmenu+0x624>)
 800113e:	f7ff fb59 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	487a      	ldr	r0, [pc, #488]	; (8001330 <seclectmenu+0x624>)
 8001148:	f7ff fad6 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 800114c:	497e      	ldr	r1, [pc, #504]	; (8001348 <seclectmenu+0x63c>)
 800114e:	4878      	ldr	r0, [pc, #480]	; (8001330 <seclectmenu+0x624>)
 8001150:	f7ff fb39 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2100      	movs	r1, #0
 8001158:	4875      	ldr	r0, [pc, #468]	; (8001330 <seclectmenu+0x624>)
 800115a:	f7ff facd 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800115e:	497d      	ldr	r1, [pc, #500]	; (8001354 <seclectmenu+0x648>)
 8001160:	4873      	ldr	r0, [pc, #460]	; (8001330 <seclectmenu+0x624>)
 8001162:	f7ff fb30 	bl	80007c6 <CLCD_WriteString>
										break;
 8001166:	e000      	b.n	800116a <seclectmenu+0x45e>
									}
								}
 8001168:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800116a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116e:	487a      	ldr	r0, [pc, #488]	; (8001358 <seclectmenu+0x64c>)
 8001170:	f7ff fd7e 	bl	8000c70 <checkbuton>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 815a 	beq.w	8001430 <seclectmenu+0x724>
								{
									exitmenu = 15;
 800117c:	4b6b      	ldr	r3, [pc, #428]	; (800132c <seclectmenu+0x620>)
 800117e:	220f      	movs	r2, #15
 8001180:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	b2da      	uxtb	r2, r3
 8001188:	7d3b      	ldrb	r3, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 800118e:	7d3b      	ldrb	r3, [r7, #20]
 8001190:	3b01      	subs	r3, #1
 8001192:	2b03      	cmp	r3, #3
 8001194:	f200 8149 	bhi.w	800142a <seclectmenu+0x71e>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <seclectmenu+0x494>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	080012cd 	.word	0x080012cd
 80011ac:	0800139d 	.word	0x0800139d
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80011b0:	78bb      	ldrb	r3, [r7, #2]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 ff0e 	bl	8002fd4 <CheckKey>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d025      	beq.n	800120a <seclectmenu+0x4fe>
										{
											CLCD_Clear(&LCD1);
 80011be:	485c      	ldr	r0, [pc, #368]	; (8001330 <seclectmenu+0x624>)
 80011c0:	f7ff fb18 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	4859      	ldr	r0, [pc, #356]	; (8001330 <seclectmenu+0x624>)
 80011ca:	f7ff fa95 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 80011ce:	4963      	ldr	r1, [pc, #396]	; (800135c <seclectmenu+0x650>)
 80011d0:	4857      	ldr	r0, [pc, #348]	; (8001330 <seclectmenu+0x624>)
 80011d2:	f7ff faf8 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f002 ff23 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80011de:	4854      	ldr	r0, [pc, #336]	; (8001330 <seclectmenu+0x624>)
 80011e0:	f7ff fb08 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4851      	ldr	r0, [pc, #324]	; (8001330 <seclectmenu+0x624>)
 80011ea:	f7ff fa85 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80011ee:	4951      	ldr	r1, [pc, #324]	; (8001334 <seclectmenu+0x628>)
 80011f0:	484f      	ldr	r0, [pc, #316]	; (8001330 <seclectmenu+0x624>)
 80011f2:	f7ff fae8 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	484d      	ldr	r0, [pc, #308]	; (8001330 <seclectmenu+0x624>)
 80011fc:	f7ff fa7c 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001200:	494d      	ldr	r1, [pc, #308]	; (8001338 <seclectmenu+0x62c>)
 8001202:	484b      	ldr	r0, [pc, #300]	; (8001330 <seclectmenu+0x624>)
 8001204:	f7ff fadf 	bl	80007c6 <CLCD_WriteString>
 8001208:	e113      	b.n	8001432 <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 800120a:	78bb      	ldrb	r3, [r7, #2]
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fd1d 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 8001212:	4847      	ldr	r0, [pc, #284]	; (8001330 <seclectmenu+0x624>)
 8001214:	f7ff faee 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	4844      	ldr	r0, [pc, #272]	; (8001330 <seclectmenu+0x624>)
 800121e:	f7ff fa6b 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001222:	4944      	ldr	r1, [pc, #272]	; (8001334 <seclectmenu+0x628>)
 8001224:	4842      	ldr	r0, [pc, #264]	; (8001330 <seclectmenu+0x624>)
 8001226:	f7ff face 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	2100      	movs	r1, #0
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <seclectmenu+0x624>)
 8001230:	f7ff fa62 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001234:	4940      	ldr	r1, [pc, #256]	; (8001338 <seclectmenu+0x62c>)
 8001236:	483e      	ldr	r0, [pc, #248]	; (8001330 <seclectmenu+0x624>)
 8001238:	f7ff fac5 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 800123c:	e0f9      	b.n	8001432 <seclectmenu+0x726>
									case 2:
										if (CheckKey(keyadd1) != 0)
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fec7 	bl	8002fd4 <CheckKey>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d025      	beq.n	8001298 <seclectmenu+0x58c>
										{
											CLCD_Clear(&LCD1);
 800124c:	4838      	ldr	r0, [pc, #224]	; (8001330 <seclectmenu+0x624>)
 800124e:	f7ff fad1 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	4836      	ldr	r0, [pc, #216]	; (8001330 <seclectmenu+0x624>)
 8001258:	f7ff fa4e 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 800125c:	4940      	ldr	r1, [pc, #256]	; (8001360 <seclectmenu+0x654>)
 800125e:	4834      	ldr	r0, [pc, #208]	; (8001330 <seclectmenu+0x624>)
 8001260:	f7ff fab1 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f002 fedc 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800126c:	4830      	ldr	r0, [pc, #192]	; (8001330 <seclectmenu+0x624>)
 800126e:	f7ff fac1 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	482e      	ldr	r0, [pc, #184]	; (8001330 <seclectmenu+0x624>)
 8001278:	f7ff fa3e 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800127c:	492f      	ldr	r1, [pc, #188]	; (800133c <seclectmenu+0x630>)
 800127e:	482c      	ldr	r0, [pc, #176]	; (8001330 <seclectmenu+0x624>)
 8001280:	f7ff faa1 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	2100      	movs	r1, #0
 8001288:	4829      	ldr	r0, [pc, #164]	; (8001330 <seclectmenu+0x624>)
 800128a:	f7ff fa35 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 800128e:	492c      	ldr	r1, [pc, #176]	; (8001340 <seclectmenu+0x634>)
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <seclectmenu+0x624>)
 8001292:	f7ff fa98 	bl	80007c6 <CLCD_WriteString>
 8001296:	e0cc      	b.n	8001432 <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 8001298:	78bb      	ldrb	r3, [r7, #2]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fcd6 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <seclectmenu+0x624>)
 80012a2:	f7ff faa7 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	4821      	ldr	r0, [pc, #132]	; (8001330 <seclectmenu+0x624>)
 80012ac:	f7ff fa24 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80012b0:	4922      	ldr	r1, [pc, #136]	; (800133c <seclectmenu+0x630>)
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <seclectmenu+0x624>)
 80012b4:	f7ff fa87 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2100      	movs	r1, #0
 80012bc:	481c      	ldr	r0, [pc, #112]	; (8001330 <seclectmenu+0x624>)
 80012be:	f7ff fa1b 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 80012c2:	491f      	ldr	r1, [pc, #124]	; (8001340 <seclectmenu+0x634>)
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <seclectmenu+0x624>)
 80012c6:	f7ff fa7e 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 80012ca:	e0b2      	b.n	8001432 <seclectmenu+0x726>
									case 3:
										if (CheckKey(keyadd1) != 0)
 80012cc:	78bb      	ldrb	r3, [r7, #2]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fe80 	bl	8002fd4 <CheckKey>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d046      	beq.n	8001368 <seclectmenu+0x65c>
										{
											CLCD_Clear(&LCD1);
 80012da:	4815      	ldr	r0, [pc, #84]	; (8001330 <seclectmenu+0x624>)
 80012dc:	f7ff fa8a 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	4812      	ldr	r0, [pc, #72]	; (8001330 <seclectmenu+0x624>)
 80012e6:	f7ff fa07 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <seclectmenu+0x658>)
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <seclectmenu+0x624>)
 80012ee:	f7ff fa6a 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f6:	f002 fe95 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <seclectmenu+0x624>)
 80012fc:	f7ff fa7a 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <seclectmenu+0x624>)
 8001306:	f7ff f9f7 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <seclectmenu+0x638>)
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <seclectmenu+0x624>)
 800130e:	f7ff fa5a 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	2100      	movs	r1, #0
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <seclectmenu+0x624>)
 8001318:	f7ff f9ee 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 800131c:	490a      	ldr	r1, [pc, #40]	; (8001348 <seclectmenu+0x63c>)
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <seclectmenu+0x624>)
 8001320:	f7ff fa51 	bl	80007c6 <CLCD_WriteString>
 8001324:	e085      	b.n	8001432 <seclectmenu+0x726>
 8001326:	bf00      	nop
 8001328:	40010c00 	.word	0x40010c00
 800132c:	20000000 	.word	0x20000000
 8001330:	200003b8 	.word	0x200003b8
 8001334:	08008240 	.word	0x08008240
 8001338:	0800824c 	.word	0x0800824c
 800133c:	08008258 	.word	0x08008258
 8001340:	08008264 	.word	0x08008264
 8001344:	08008270 	.word	0x08008270
 8001348:	0800827c 	.word	0x0800827c
 800134c:	08008288 	.word	0x08008288
 8001350:	08008294 	.word	0x08008294
 8001354:	080082a0 	.word	0x080082a0
 8001358:	40010800 	.word	0x40010800
 800135c:	080082ac 	.word	0x080082ac
 8001360:	080082bc 	.word	0x080082bc
 8001364:	080082cc 	.word	0x080082cc
										}
										else
										{
											adduid(keyadd1);
 8001368:	78bb      	ldrb	r3, [r7, #2]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fc6e 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 8001370:	48ac      	ldr	r0, [pc, #688]	; (8001624 <seclectmenu+0x918>)
 8001372:	f7ff fa3f 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	48aa      	ldr	r0, [pc, #680]	; (8001624 <seclectmenu+0x918>)
 800137c:	f7ff f9bc 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001380:	49a9      	ldr	r1, [pc, #676]	; (8001628 <seclectmenu+0x91c>)
 8001382:	48a8      	ldr	r0, [pc, #672]	; (8001624 <seclectmenu+0x918>)
 8001384:	f7ff fa1f 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	2100      	movs	r1, #0
 800138c:	48a5      	ldr	r0, [pc, #660]	; (8001624 <seclectmenu+0x918>)
 800138e:	f7ff f9b3 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 8001392:	49a6      	ldr	r1, [pc, #664]	; (800162c <seclectmenu+0x920>)
 8001394:	48a3      	ldr	r0, [pc, #652]	; (8001624 <seclectmenu+0x918>)
 8001396:	f7ff fa16 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 800139a:	e04a      	b.n	8001432 <seclectmenu+0x726>
									case 4:
										if (CheckKey(keyadd1) != 0)
 800139c:	78bb      	ldrb	r3, [r7, #2]
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fe18 	bl	8002fd4 <CheckKey>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d025      	beq.n	80013f6 <seclectmenu+0x6ea>
										{
											CLCD_Clear(&LCD1);
 80013aa:	489e      	ldr	r0, [pc, #632]	; (8001624 <seclectmenu+0x918>)
 80013ac:	f7ff fa22 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	489b      	ldr	r0, [pc, #620]	; (8001624 <seclectmenu+0x918>)
 80013b6:	f7ff f99f 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 80013ba:	499d      	ldr	r1, [pc, #628]	; (8001630 <seclectmenu+0x924>)
 80013bc:	4899      	ldr	r0, [pc, #612]	; (8001624 <seclectmenu+0x918>)
 80013be:	f7ff fa02 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f002 fe2d 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80013ca:	4896      	ldr	r0, [pc, #600]	; (8001624 <seclectmenu+0x918>)
 80013cc:	f7ff fa12 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4893      	ldr	r0, [pc, #588]	; (8001624 <seclectmenu+0x918>)
 80013d6:	f7ff f98f 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80013da:	4996      	ldr	r1, [pc, #600]	; (8001634 <seclectmenu+0x928>)
 80013dc:	4891      	ldr	r0, [pc, #580]	; (8001624 <seclectmenu+0x918>)
 80013de:	f7ff f9f2 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2100      	movs	r1, #0
 80013e6:	488f      	ldr	r0, [pc, #572]	; (8001624 <seclectmenu+0x918>)
 80013e8:	f7ff f986 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80013ec:	4992      	ldr	r1, [pc, #584]	; (8001638 <seclectmenu+0x92c>)
 80013ee:	488d      	ldr	r0, [pc, #564]	; (8001624 <seclectmenu+0x918>)
 80013f0:	f7ff f9e9 	bl	80007c6 <CLCD_WriteString>
 80013f4:	e01d      	b.n	8001432 <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fc27 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 80013fe:	4889      	ldr	r0, [pc, #548]	; (8001624 <seclectmenu+0x918>)
 8001400:	f7ff f9f8 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	4886      	ldr	r0, [pc, #536]	; (8001624 <seclectmenu+0x918>)
 800140a:	f7ff f975 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800140e:	4989      	ldr	r1, [pc, #548]	; (8001634 <seclectmenu+0x928>)
 8001410:	4884      	ldr	r0, [pc, #528]	; (8001624 <seclectmenu+0x918>)
 8001412:	f7ff f9d8 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001416:	2201      	movs	r2, #1
 8001418:	2100      	movs	r1, #0
 800141a:	4882      	ldr	r0, [pc, #520]	; (8001624 <seclectmenu+0x918>)
 800141c:	f7ff f96c 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001420:	4985      	ldr	r1, [pc, #532]	; (8001638 <seclectmenu+0x92c>)
 8001422:	4880      	ldr	r0, [pc, #512]	; (8001624 <seclectmenu+0x918>)
 8001424:	f7ff f9cf 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 8001428:	e003      	b.n	8001432 <seclectmenu+0x726>
									default:
										back11 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	74fb      	strb	r3, [r7, #19]
										break;
 800142e:	e000      	b.n	8001432 <seclectmenu+0x726>
									}
								}
 8001430:	bf00      	nop
							while (back11 == 1)
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	2b01      	cmp	r3, #1
 8001436:	f43f adce 	beq.w	8000fd6 <seclectmenu+0x2ca>
							}
							CLCD_Clear(&LCD1);
 800143a:	487a      	ldr	r0, [pc, #488]	; (8001624 <seclectmenu+0x918>)
 800143c:	f7ff f9da 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	4877      	ldr	r0, [pc, #476]	; (8001624 <seclectmenu+0x918>)
 8001446:	f7ff f957 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 800144a:	497c      	ldr	r1, [pc, #496]	; (800163c <seclectmenu+0x930>)
 800144c:	4875      	ldr	r0, [pc, #468]	; (8001624 <seclectmenu+0x918>)
 800144e:	f7ff f9ba 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001452:	2201      	movs	r2, #1
 8001454:	2100      	movs	r1, #0
 8001456:	4873      	ldr	r0, [pc, #460]	; (8001624 <seclectmenu+0x918>)
 8001458:	f7ff f94e 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 800145c:	4978      	ldr	r1, [pc, #480]	; (8001640 <seclectmenu+0x934>)
 800145e:	4871      	ldr	r0, [pc, #452]	; (8001624 <seclectmenu+0x918>)
 8001460:	f7ff f9b1 	bl	80007c6 <CLCD_WriteString>
							break;
 8001464:	e23c      	b.n	80018e0 <seclectmenu+0xbd4>
						case 2:
							CLCD_Clear(&LCD1);
 8001466:	486f      	ldr	r0, [pc, #444]	; (8001624 <seclectmenu+0x918>)
 8001468:	f7ff f9c4 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	486c      	ldr	r0, [pc, #432]	; (8001624 <seclectmenu+0x918>)
 8001472:	f7ff f941 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001476:	4973      	ldr	r1, [pc, #460]	; (8001644 <seclectmenu+0x938>)
 8001478:	486a      	ldr	r0, [pc, #424]	; (8001624 <seclectmenu+0x918>)
 800147a:	f7ff f9a4 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	2100      	movs	r1, #0
 8001482:	4868      	ldr	r0, [pc, #416]	; (8001624 <seclectmenu+0x918>)
 8001484:	f7ff f938 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 8001488:	496f      	ldr	r1, [pc, #444]	; (8001648 <seclectmenu+0x93c>)
 800148a:	4866      	ldr	r0, [pc, #408]	; (8001624 <seclectmenu+0x918>)
 800148c:	f7ff f99b 	bl	80007c6 <CLCD_WriteString>
							uint8_t statusadd2 = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001498:	e204      	b.n	80018a4 <seclectmenu+0xb98>
							{
								if (exitmenu == 0)
 800149a:	4b6c      	ldr	r3, [pc, #432]	; (800164c <seclectmenu+0x940>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <seclectmenu+0x7a8>
								{
									CLCD_Clear(&LCD1);
 80014a2:	4860      	ldr	r0, [pc, #384]	; (8001624 <seclectmenu+0x918>)
 80014a4:	f7ff f9a6 	bl	80007f4 <CLCD_Clear>
									HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f002 fdba 	bl	8004024 <HAL_Delay>
									return;
 80014b0:	f001 bb1e 	b.w	8002af0 <seclectmenu+0x1de4>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	4865      	ldr	r0, [pc, #404]	; (8001650 <seclectmenu+0x944>)
 80014ba:	f7ff fbd9 	bl	8000c70 <checkbuton>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 808b 	beq.w	80015dc <seclectmenu+0x8d0>
								{
									exitmenu = 15;
 80014c6:	4b61      	ldr	r3, [pc, #388]	; (800164c <seclectmenu+0x940>)
 80014c8:	220f      	movs	r2, #15
 80014ca:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 80014cc:	7cbb      	ldrb	r3, [r7, #18]
 80014ce:	3301      	adds	r3, #1
 80014d0:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 80014d2:	7cbb      	ldrb	r3, [r7, #18]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d801      	bhi.n	80014dc <seclectmenu+0x7d0>
 80014d8:	7cbb      	ldrb	r3, [r7, #18]
 80014da:	e000      	b.n	80014de <seclectmenu+0x7d2>
 80014dc:	2300      	movs	r3, #0
 80014de:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 80014e0:	7cbb      	ldrb	r3, [r7, #18]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d863      	bhi.n	80015b0 <seclectmenu+0x8a4>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <seclectmenu+0x7e4>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	0800152d 	.word	0x0800152d
 80014f8:	08001559 	.word	0x08001559
 80014fc:	08001585 	.word	0x08001585
									{
									case 1:
										CLCD_Clear(&LCD1);
 8001500:	4848      	ldr	r0, [pc, #288]	; (8001624 <seclectmenu+0x918>)
 8001502:	f7ff f977 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	4846      	ldr	r0, [pc, #280]	; (8001624 <seclectmenu+0x918>)
 800150c:	f7ff f8f4 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001510:	494c      	ldr	r1, [pc, #304]	; (8001644 <seclectmenu+0x938>)
 8001512:	4844      	ldr	r0, [pc, #272]	; (8001624 <seclectmenu+0x918>)
 8001514:	f7ff f957 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	2100      	movs	r1, #0
 800151c:	4841      	ldr	r0, [pc, #260]	; (8001624 <seclectmenu+0x918>)
 800151e:	f7ff f8eb 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 8001522:	4949      	ldr	r1, [pc, #292]	; (8001648 <seclectmenu+0x93c>)
 8001524:	483f      	ldr	r0, [pc, #252]	; (8001624 <seclectmenu+0x918>)
 8001526:	f7ff f94e 	bl	80007c6 <CLCD_WriteString>
										break;
 800152a:	e058      	b.n	80015de <seclectmenu+0x8d2>
									case 2:
										CLCD_Clear(&LCD1);
 800152c:	483d      	ldr	r0, [pc, #244]	; (8001624 <seclectmenu+0x918>)
 800152e:	f7ff f961 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	483b      	ldr	r0, [pc, #236]	; (8001624 <seclectmenu+0x918>)
 8001538:	f7ff f8de 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800153c:	4945      	ldr	r1, [pc, #276]	; (8001654 <seclectmenu+0x948>)
 800153e:	4839      	ldr	r0, [pc, #228]	; (8001624 <seclectmenu+0x918>)
 8001540:	f7ff f941 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2100      	movs	r1, #0
 8001548:	4836      	ldr	r0, [pc, #216]	; (8001624 <seclectmenu+0x918>)
 800154a:	f7ff f8d5 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 800154e:	4942      	ldr	r1, [pc, #264]	; (8001658 <seclectmenu+0x94c>)
 8001550:	4834      	ldr	r0, [pc, #208]	; (8001624 <seclectmenu+0x918>)
 8001552:	f7ff f938 	bl	80007c6 <CLCD_WriteString>
										break;
 8001556:	e042      	b.n	80015de <seclectmenu+0x8d2>
									case 3:
										CLCD_Clear(&LCD1);
 8001558:	4832      	ldr	r0, [pc, #200]	; (8001624 <seclectmenu+0x918>)
 800155a:	f7ff f94b 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	4830      	ldr	r0, [pc, #192]	; (8001624 <seclectmenu+0x918>)
 8001564:	f7ff f8c8 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001568:	492f      	ldr	r1, [pc, #188]	; (8001628 <seclectmenu+0x91c>)
 800156a:	482e      	ldr	r0, [pc, #184]	; (8001624 <seclectmenu+0x918>)
 800156c:	f7ff f92b 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	2100      	movs	r1, #0
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <seclectmenu+0x918>)
 8001576:	f7ff f8bf 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 800157a:	492c      	ldr	r1, [pc, #176]	; (800162c <seclectmenu+0x920>)
 800157c:	4829      	ldr	r0, [pc, #164]	; (8001624 <seclectmenu+0x918>)
 800157e:	f7ff f922 	bl	80007c6 <CLCD_WriteString>
										break;
 8001582:	e02c      	b.n	80015de <seclectmenu+0x8d2>
									case 4:
										CLCD_Clear(&LCD1);
 8001584:	4827      	ldr	r0, [pc, #156]	; (8001624 <seclectmenu+0x918>)
 8001586:	f7ff f935 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	4825      	ldr	r0, [pc, #148]	; (8001624 <seclectmenu+0x918>)
 8001590:	f7ff f8b2 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001594:	4927      	ldr	r1, [pc, #156]	; (8001634 <seclectmenu+0x928>)
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <seclectmenu+0x918>)
 8001598:	f7ff f915 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	2100      	movs	r1, #0
 80015a0:	4820      	ldr	r0, [pc, #128]	; (8001624 <seclectmenu+0x918>)
 80015a2:	f7ff f8a9 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 80015a6:	4924      	ldr	r1, [pc, #144]	; (8001638 <seclectmenu+0x92c>)
 80015a8:	481e      	ldr	r0, [pc, #120]	; (8001624 <seclectmenu+0x918>)
 80015aa:	f7ff f90c 	bl	80007c6 <CLCD_WriteString>
										break;
 80015ae:	e016      	b.n	80015de <seclectmenu+0x8d2>
									default:
										CLCD_Clear(&LCD1);
 80015b0:	481c      	ldr	r0, [pc, #112]	; (8001624 <seclectmenu+0x918>)
 80015b2:	f7ff f91f 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <seclectmenu+0x918>)
 80015bc:	f7ff f89c 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <seclectmenu+0x920>)
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <seclectmenu+0x918>)
 80015c4:	f7ff f8ff 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2100      	movs	r1, #0
 80015cc:	4815      	ldr	r0, [pc, #84]	; (8001624 <seclectmenu+0x918>)
 80015ce:	f7ff f893 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 80015d2:	4922      	ldr	r1, [pc, #136]	; (800165c <seclectmenu+0x950>)
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <seclectmenu+0x918>)
 80015d6:	f7ff f8f6 	bl	80007c6 <CLCD_WriteString>
										break;
 80015da:	e000      	b.n	80015de <seclectmenu+0x8d2>
									}
								}
 80015dc:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <seclectmenu+0x954>)
 80015e4:	f7ff fb44 	bl	8000c70 <checkbuton>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8159 	beq.w	80018a2 <seclectmenu+0xb96>
								{
									exitmenu = 15;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <seclectmenu+0x940>)
 80015f2:	220f      	movs	r2, #15
 80015f4:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80015f6:	7dbb      	ldrb	r3, [r7, #22]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	7cbb      	ldrb	r3, [r7, #18]
 80015fe:	4413      	add	r3, r2
 8001600:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 8001602:	7cbb      	ldrb	r3, [r7, #18]
 8001604:	3b01      	subs	r3, #1
 8001606:	2b03      	cmp	r3, #3
 8001608:	f200 8148 	bhi.w	800189c <seclectmenu+0xb90>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <seclectmenu+0x908>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	08001665 	.word	0x08001665
 8001618:	080016f3 	.word	0x080016f3
 800161c:	08001781 	.word	0x08001781
 8001620:	0800180f 	.word	0x0800180f
 8001624:	200003b8 	.word	0x200003b8
 8001628:	08008270 	.word	0x08008270
 800162c:	0800827c 	.word	0x0800827c
 8001630:	080082dc 	.word	0x080082dc
 8001634:	08008288 	.word	0x08008288
 8001638:	08008294 	.word	0x08008294
 800163c:	08008204 	.word	0x08008204
 8001640:	08008218 	.word	0x08008218
 8001644:	08008240 	.word	0x08008240
 8001648:	0800824c 	.word	0x0800824c
 800164c:	20000000 	.word	0x20000000
 8001650:	40010c00 	.word	0x40010c00
 8001654:	08008258 	.word	0x08008258
 8001658:	08008264 	.word	0x08008264
 800165c:	080082a0 	.word	0x080082a0
 8001660:	40010800 	.word	0x40010800
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fcb4 	bl	8002fd4 <CheckKey>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d025      	beq.n	80016be <seclectmenu+0x9b2>
										{
											CLCD_Clear(&LCD1);
 8001672:	48bd      	ldr	r0, [pc, #756]	; (8001968 <seclectmenu+0xc5c>)
 8001674:	f7ff f8be 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	48ba      	ldr	r0, [pc, #744]	; (8001968 <seclectmenu+0xc5c>)
 800167e:	f7ff f83b 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 8001682:	49ba      	ldr	r1, [pc, #744]	; (800196c <seclectmenu+0xc60>)
 8001684:	48b8      	ldr	r0, [pc, #736]	; (8001968 <seclectmenu+0xc5c>)
 8001686:	f7ff f89e 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168e:	f002 fcc9 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001692:	48b5      	ldr	r0, [pc, #724]	; (8001968 <seclectmenu+0xc5c>)
 8001694:	f7ff f8ae 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	48b2      	ldr	r0, [pc, #712]	; (8001968 <seclectmenu+0xc5c>)
 800169e:	f7ff f82b 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80016a2:	49b3      	ldr	r1, [pc, #716]	; (8001970 <seclectmenu+0xc64>)
 80016a4:	48b0      	ldr	r0, [pc, #704]	; (8001968 <seclectmenu+0xc5c>)
 80016a6:	f7ff f88e 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2100      	movs	r1, #0
 80016ae:	48ae      	ldr	r0, [pc, #696]	; (8001968 <seclectmenu+0xc5c>)
 80016b0:	f7ff f822 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 80016b4:	49af      	ldr	r1, [pc, #700]	; (8001974 <seclectmenu+0xc68>)
 80016b6:	48ac      	ldr	r0, [pc, #688]	; (8001968 <seclectmenu+0xc5c>)
 80016b8:	f7ff f885 	bl	80007c6 <CLCD_WriteString>
 80016bc:	e0f2      	b.n	80018a4 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fac3 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 80016c6:	48a8      	ldr	r0, [pc, #672]	; (8001968 <seclectmenu+0xc5c>)
 80016c8:	f7ff f894 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	48a5      	ldr	r0, [pc, #660]	; (8001968 <seclectmenu+0xc5c>)
 80016d2:	f7ff f811 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80016d6:	49a6      	ldr	r1, [pc, #664]	; (8001970 <seclectmenu+0xc64>)
 80016d8:	48a3      	ldr	r0, [pc, #652]	; (8001968 <seclectmenu+0xc5c>)
 80016da:	f7ff f874 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	2100      	movs	r1, #0
 80016e2:	48a1      	ldr	r0, [pc, #644]	; (8001968 <seclectmenu+0xc5c>)
 80016e4:	f7ff f808 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 80016e8:	49a2      	ldr	r1, [pc, #648]	; (8001974 <seclectmenu+0xc68>)
 80016ea:	489f      	ldr	r0, [pc, #636]	; (8001968 <seclectmenu+0xc5c>)
 80016ec:	f7ff f86b 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 80016f0:	e0d8      	b.n	80018a4 <seclectmenu+0xb98>
									case 2:
										if (CheckKey(keyadd2) != 0)
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fc6d 	bl	8002fd4 <CheckKey>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d025      	beq.n	800174c <seclectmenu+0xa40>
										{
											CLCD_Clear(&LCD1);
 8001700:	4899      	ldr	r0, [pc, #612]	; (8001968 <seclectmenu+0xc5c>)
 8001702:	f7ff f877 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	4897      	ldr	r0, [pc, #604]	; (8001968 <seclectmenu+0xc5c>)
 800170c:	f7fe fff4 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 8001710:	4999      	ldr	r1, [pc, #612]	; (8001978 <seclectmenu+0xc6c>)
 8001712:	4895      	ldr	r0, [pc, #596]	; (8001968 <seclectmenu+0xc5c>)
 8001714:	f7ff f857 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171c:	f002 fc82 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001720:	4891      	ldr	r0, [pc, #580]	; (8001968 <seclectmenu+0xc5c>)
 8001722:	f7ff f867 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	488f      	ldr	r0, [pc, #572]	; (8001968 <seclectmenu+0xc5c>)
 800172c:	f7fe ffe4 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001730:	4992      	ldr	r1, [pc, #584]	; (800197c <seclectmenu+0xc70>)
 8001732:	488d      	ldr	r0, [pc, #564]	; (8001968 <seclectmenu+0xc5c>)
 8001734:	f7ff f847 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	2100      	movs	r1, #0
 800173c:	488a      	ldr	r0, [pc, #552]	; (8001968 <seclectmenu+0xc5c>)
 800173e:	f7fe ffdb 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 8001742:	498f      	ldr	r1, [pc, #572]	; (8001980 <seclectmenu+0xc74>)
 8001744:	4888      	ldr	r0, [pc, #544]	; (8001968 <seclectmenu+0xc5c>)
 8001746:	f7ff f83e 	bl	80007c6 <CLCD_WriteString>
 800174a:	e0ab      	b.n	80018a4 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	4618      	mov	r0, r3
 8001750:	f001 fa7c 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 8001754:	4884      	ldr	r0, [pc, #528]	; (8001968 <seclectmenu+0xc5c>)
 8001756:	f7ff f84d 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	4882      	ldr	r0, [pc, #520]	; (8001968 <seclectmenu+0xc5c>)
 8001760:	f7fe ffca 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001764:	4985      	ldr	r1, [pc, #532]	; (800197c <seclectmenu+0xc70>)
 8001766:	4880      	ldr	r0, [pc, #512]	; (8001968 <seclectmenu+0xc5c>)
 8001768:	f7ff f82d 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800176c:	2201      	movs	r2, #1
 800176e:	2100      	movs	r1, #0
 8001770:	487d      	ldr	r0, [pc, #500]	; (8001968 <seclectmenu+0xc5c>)
 8001772:	f7fe ffc1 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 8001776:	4982      	ldr	r1, [pc, #520]	; (8001980 <seclectmenu+0xc74>)
 8001778:	487b      	ldr	r0, [pc, #492]	; (8001968 <seclectmenu+0xc5c>)
 800177a:	f7ff f824 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 800177e:	e091      	b.n	80018a4 <seclectmenu+0xb98>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fc26 	bl	8002fd4 <CheckKey>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <seclectmenu+0xace>
										{
											CLCD_Clear(&LCD1);
 800178e:	4876      	ldr	r0, [pc, #472]	; (8001968 <seclectmenu+0xc5c>)
 8001790:	f7ff f830 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	4873      	ldr	r0, [pc, #460]	; (8001968 <seclectmenu+0xc5c>)
 800179a:	f7fe ffad 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 800179e:	4979      	ldr	r1, [pc, #484]	; (8001984 <seclectmenu+0xc78>)
 80017a0:	4871      	ldr	r0, [pc, #452]	; (8001968 <seclectmenu+0xc5c>)
 80017a2:	f7ff f810 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 80017a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017aa:	f002 fc3b 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80017ae:	486e      	ldr	r0, [pc, #440]	; (8001968 <seclectmenu+0xc5c>)
 80017b0:	f7ff f820 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	486b      	ldr	r0, [pc, #428]	; (8001968 <seclectmenu+0xc5c>)
 80017ba:	f7fe ff9d 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80017be:	4972      	ldr	r1, [pc, #456]	; (8001988 <seclectmenu+0xc7c>)
 80017c0:	4869      	ldr	r0, [pc, #420]	; (8001968 <seclectmenu+0xc5c>)
 80017c2:	f7ff f800 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2100      	movs	r1, #0
 80017ca:	4867      	ldr	r0, [pc, #412]	; (8001968 <seclectmenu+0xc5c>)
 80017cc:	f7fe ff94 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 80017d0:	496e      	ldr	r1, [pc, #440]	; (800198c <seclectmenu+0xc80>)
 80017d2:	4865      	ldr	r0, [pc, #404]	; (8001968 <seclectmenu+0xc5c>)
 80017d4:	f7fe fff7 	bl	80007c6 <CLCD_WriteString>
 80017d8:	e064      	b.n	80018a4 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fa35 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 80017e2:	4861      	ldr	r0, [pc, #388]	; (8001968 <seclectmenu+0xc5c>)
 80017e4:	f7ff f806 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	485e      	ldr	r0, [pc, #376]	; (8001968 <seclectmenu+0xc5c>)
 80017ee:	f7fe ff83 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80017f2:	4965      	ldr	r1, [pc, #404]	; (8001988 <seclectmenu+0xc7c>)
 80017f4:	485c      	ldr	r0, [pc, #368]	; (8001968 <seclectmenu+0xc5c>)
 80017f6:	f7fe ffe6 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2100      	movs	r1, #0
 80017fe:	485a      	ldr	r0, [pc, #360]	; (8001968 <seclectmenu+0xc5c>)
 8001800:	f7fe ff7a 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 8001804:	4961      	ldr	r1, [pc, #388]	; (800198c <seclectmenu+0xc80>)
 8001806:	4858      	ldr	r0, [pc, #352]	; (8001968 <seclectmenu+0xc5c>)
 8001808:	f7fe ffdd 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 800180c:	e04a      	b.n	80018a4 <seclectmenu+0xb98>
									case 4:
										if (CheckKey(keyadd2) != 0)
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fbdf 	bl	8002fd4 <CheckKey>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d025      	beq.n	8001868 <seclectmenu+0xb5c>
										{
											CLCD_Clear(&LCD1);
 800181c:	4852      	ldr	r0, [pc, #328]	; (8001968 <seclectmenu+0xc5c>)
 800181e:	f7fe ffe9 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	4850      	ldr	r0, [pc, #320]	; (8001968 <seclectmenu+0xc5c>)
 8001828:	f7fe ff66 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 800182c:	4958      	ldr	r1, [pc, #352]	; (8001990 <seclectmenu+0xc84>)
 800182e:	484e      	ldr	r0, [pc, #312]	; (8001968 <seclectmenu+0xc5c>)
 8001830:	f7fe ffc9 	bl	80007c6 <CLCD_WriteString>
											HAL_Delay(1000);
 8001834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001838:	f002 fbf4 	bl	8004024 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800183c:	484a      	ldr	r0, [pc, #296]	; (8001968 <seclectmenu+0xc5c>)
 800183e:	f7fe ffd9 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4848      	ldr	r0, [pc, #288]	; (8001968 <seclectmenu+0xc5c>)
 8001848:	f7fe ff56 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800184c:	4951      	ldr	r1, [pc, #324]	; (8001994 <seclectmenu+0xc88>)
 800184e:	4846      	ldr	r0, [pc, #280]	; (8001968 <seclectmenu+0xc5c>)
 8001850:	f7fe ffb9 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	2100      	movs	r1, #0
 8001858:	4843      	ldr	r0, [pc, #268]	; (8001968 <seclectmenu+0xc5c>)
 800185a:	f7fe ff4d 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 800185e:	494e      	ldr	r1, [pc, #312]	; (8001998 <seclectmenu+0xc8c>)
 8001860:	4841      	ldr	r0, [pc, #260]	; (8001968 <seclectmenu+0xc5c>)
 8001862:	f7fe ffb0 	bl	80007c6 <CLCD_WriteString>
 8001866:	e01d      	b.n	80018a4 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f9ee 	bl	8002c4c <adduid>
											CLCD_Clear(&LCD1);
 8001870:	483d      	ldr	r0, [pc, #244]	; (8001968 <seclectmenu+0xc5c>)
 8001872:	f7fe ffbf 	bl	80007f4 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	483b      	ldr	r0, [pc, #236]	; (8001968 <seclectmenu+0xc5c>)
 800187c:	f7fe ff3c 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001880:	4944      	ldr	r1, [pc, #272]	; (8001994 <seclectmenu+0xc88>)
 8001882:	4839      	ldr	r0, [pc, #228]	; (8001968 <seclectmenu+0xc5c>)
 8001884:	f7fe ff9f 	bl	80007c6 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	2100      	movs	r1, #0
 800188c:	4836      	ldr	r0, [pc, #216]	; (8001968 <seclectmenu+0xc5c>)
 800188e:	f7fe ff33 	bl	80006f8 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001892:	4941      	ldr	r1, [pc, #260]	; (8001998 <seclectmenu+0xc8c>)
 8001894:	4834      	ldr	r0, [pc, #208]	; (8001968 <seclectmenu+0xc5c>)
 8001896:	f7fe ff96 	bl	80007c6 <CLCD_WriteString>
										}
										break;
 800189a:	e003      	b.n	80018a4 <seclectmenu+0xb98>
									default:
										back12 = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	747b      	strb	r3, [r7, #17]
										break;
 80018a0:	e000      	b.n	80018a4 <seclectmenu+0xb98>
									}
								}
 80018a2:	bf00      	nop
							while (back12 == 1)
 80018a4:	7c7b      	ldrb	r3, [r7, #17]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f43f adf7 	beq.w	800149a <seclectmenu+0x78e>
							}
							CLCD_Clear(&LCD1);
 80018ac:	482e      	ldr	r0, [pc, #184]	; (8001968 <seclectmenu+0xc5c>)
 80018ae:	f7fe ffa1 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	482c      	ldr	r0, [pc, #176]	; (8001968 <seclectmenu+0xc5c>)
 80018b8:	f7fe ff1e 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 80018bc:	4937      	ldr	r1, [pc, #220]	; (800199c <seclectmenu+0xc90>)
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <seclectmenu+0xc5c>)
 80018c0:	f7fe ff81 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2100      	movs	r1, #0
 80018c8:	4827      	ldr	r0, [pc, #156]	; (8001968 <seclectmenu+0xc5c>)
 80018ca:	f7fe ff15 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <seclectmenu+0xc94>)
 80018d0:	4825      	ldr	r0, [pc, #148]	; (8001968 <seclectmenu+0xc5c>)
 80018d2:	f7fe ff78 	bl	80007c6 <CLCD_WriteString>
							break;
 80018d6:	e003      	b.n	80018e0 <seclectmenu+0xbd4>
						default:
							back = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	757b      	strb	r3, [r7, #21]
							break;
 80018dc:	e000      	b.n	80018e0 <seclectmenu+0xbd4>
						}
					}
 80018de:	bf00      	nop
				while (back == 1)
 80018e0:	7d7b      	ldrb	r3, [r7, #21]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	f43f aade 	beq.w	8000ea4 <seclectmenu+0x198>
				}
				CLCD_Clear(&LCD1);
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <seclectmenu+0xc5c>)
 80018ea:	f7fe ff83 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	481d      	ldr	r0, [pc, #116]	; (8001968 <seclectmenu+0xc5c>)
 80018f4:	f7fe ff00 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 80018f8:	492a      	ldr	r1, [pc, #168]	; (80019a4 <seclectmenu+0xc98>)
 80018fa:	481b      	ldr	r0, [pc, #108]	; (8001968 <seclectmenu+0xc5c>)
 80018fc:	f7fe ff63 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	2100      	movs	r1, #0
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <seclectmenu+0xc5c>)
 8001906:	f7fe fef7 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <seclectmenu+0xc9c>)
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <seclectmenu+0xc5c>)
 800190e:	f7fe ff5a 	bl	80007c6 <CLCD_WriteString>
				break;
 8001912:	f001 b8e1 	b.w	8002ad8 <seclectmenu+0x1dcc>
			case 1:
				CLCD_Clear(&LCD1);
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <seclectmenu+0xc5c>)
 8001918:	f7fe ff6c 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <seclectmenu+0xc5c>)
 8001922:	f7fe fee9 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "     SELECT ");
 8001926:	4921      	ldr	r1, [pc, #132]	; (80019ac <seclectmenu+0xca0>)
 8001928:	480f      	ldr	r0, [pc, #60]	; (8001968 <seclectmenu+0xc5c>)
 800192a:	f7fe ff4c 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <seclectmenu+0xc5c>)
 8001934:	f7fe fee0 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001938:	491d      	ldr	r1, [pc, #116]	; (80019b0 <seclectmenu+0xca4>)
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <seclectmenu+0xc5c>)
 800193c:	f7fe ff43 	bl	80007c6 <CLCD_WriteString>
				uint8_t statusremove = -1;
 8001940:	23ff      	movs	r3, #255	; 0xff
 8001942:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001948:	f001 b88f 	b.w	8002a6a <seclectmenu+0x1d5e>
				{
					if (exitmenu == 0)
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <seclectmenu+0xca8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d131      	bne.n	80019b8 <seclectmenu+0xcac>
					{
						CLCD_Clear(&LCD1);
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <seclectmenu+0xc5c>)
 8001956:	f7fe ff4d 	bl	80007f4 <CLCD_Clear>
						HAL_Delay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f002 fb61 	bl	8004024 <HAL_Delay>
						return;
 8001962:	f001 b8c5 	b.w	8002af0 <seclectmenu+0x1de4>
 8001966:	bf00      	nop
 8001968:	200003b8 	.word	0x200003b8
 800196c:	080082ac 	.word	0x080082ac
 8001970:	08008240 	.word	0x08008240
 8001974:	0800824c 	.word	0x0800824c
 8001978:	080082bc 	.word	0x080082bc
 800197c:	08008258 	.word	0x08008258
 8001980:	08008264 	.word	0x08008264
 8001984:	080082cc 	.word	0x080082cc
 8001988:	08008270 	.word	0x08008270
 800198c:	0800827c 	.word	0x0800827c
 8001990:	080082dc 	.word	0x080082dc
 8001994:	08008288 	.word	0x08008288
 8001998:	08008294 	.word	0x08008294
 800199c:	080081f0 	.word	0x080081f0
 80019a0:	08008228 	.word	0x08008228
 80019a4:	08008198 	.word	0x08008198
 80019a8:	080081a8 	.word	0x080081a8
 80019ac:	080082ec 	.word	0x080082ec
 80019b0:	080082fc 	.word	0x080082fc
 80019b4:	20000000 	.word	0x20000000
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80019b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019bc:	48af      	ldr	r0, [pc, #700]	; (8001c7c <seclectmenu+0xf70>)
 80019be:	f7ff f957 	bl	8000c70 <checkbuton>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d054      	beq.n	8001a72 <seclectmenu+0xd66>
					{
						exitmenu = 15;
 80019c8:	4bad      	ldr	r3, [pc, #692]	; (8001c80 <seclectmenu+0xf74>)
 80019ca:	220f      	movs	r2, #15
 80019cc:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80019ce:	7c3b      	ldrb	r3, [r7, #16]
 80019d0:	3301      	adds	r3, #1
 80019d2:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 80019d4:	7c3b      	ldrb	r3, [r7, #16]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d801      	bhi.n	80019de <seclectmenu+0xcd2>
 80019da:	7c3b      	ldrb	r3, [r7, #16]
 80019dc:	e000      	b.n	80019e0 <seclectmenu+0xcd4>
 80019de:	2300      	movs	r3, #0
 80019e0:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 80019e2:	7c3b      	ldrb	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <seclectmenu+0xce2>
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d016      	beq.n	8001a1a <seclectmenu+0xd0e>
 80019ec:	e02b      	b.n	8001a46 <seclectmenu+0xd3a>
						{
						case 0:
							CLCD_Clear(&LCD1);
 80019ee:	48a5      	ldr	r0, [pc, #660]	; (8001c84 <seclectmenu+0xf78>)
 80019f0:	f7fe ff00 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	48a2      	ldr	r0, [pc, #648]	; (8001c84 <seclectmenu+0xf78>)
 80019fa:	f7fe fe7d 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 80019fe:	49a2      	ldr	r1, [pc, #648]	; (8001c88 <seclectmenu+0xf7c>)
 8001a00:	48a0      	ldr	r0, [pc, #640]	; (8001c84 <seclectmenu+0xf78>)
 8001a02:	f7fe fee0 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2100      	movs	r1, #0
 8001a0a:	489e      	ldr	r0, [pc, #632]	; (8001c84 <seclectmenu+0xf78>)
 8001a0c:	f7fe fe74 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001a10:	499e      	ldr	r1, [pc, #632]	; (8001c8c <seclectmenu+0xf80>)
 8001a12:	489c      	ldr	r0, [pc, #624]	; (8001c84 <seclectmenu+0xf78>)
 8001a14:	f7fe fed7 	bl	80007c6 <CLCD_WriteString>
							break;
 8001a18:	e02c      	b.n	8001a74 <seclectmenu+0xd68>
						case 1:
							CLCD_Clear(&LCD1);
 8001a1a:	489a      	ldr	r0, [pc, #616]	; (8001c84 <seclectmenu+0xf78>)
 8001a1c:	f7fe feea 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	4897      	ldr	r0, [pc, #604]	; (8001c84 <seclectmenu+0xf78>)
 8001a26:	f7fe fe67 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001a2a:	4999      	ldr	r1, [pc, #612]	; (8001c90 <seclectmenu+0xf84>)
 8001a2c:	4895      	ldr	r0, [pc, #596]	; (8001c84 <seclectmenu+0xf78>)
 8001a2e:	f7fe feca 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2100      	movs	r1, #0
 8001a36:	4893      	ldr	r0, [pc, #588]	; (8001c84 <seclectmenu+0xf78>)
 8001a38:	f7fe fe5e 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA TAT CA");
 8001a3c:	4995      	ldr	r1, [pc, #596]	; (8001c94 <seclectmenu+0xf88>)
 8001a3e:	4891      	ldr	r0, [pc, #580]	; (8001c84 <seclectmenu+0xf78>)
 8001a40:	f7fe fec1 	bl	80007c6 <CLCD_WriteString>
							break;
 8001a44:	e016      	b.n	8001a74 <seclectmenu+0xd68>
						default:
							CLCD_Clear(&LCD1);
 8001a46:	488f      	ldr	r0, [pc, #572]	; (8001c84 <seclectmenu+0xf78>)
 8001a48:	f7fe fed4 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	488c      	ldr	r0, [pc, #560]	; (8001c84 <seclectmenu+0xf78>)
 8001a52:	f7fe fe51 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001a56:	498d      	ldr	r1, [pc, #564]	; (8001c8c <seclectmenu+0xf80>)
 8001a58:	488a      	ldr	r0, [pc, #552]	; (8001c84 <seclectmenu+0xf78>)
 8001a5a:	f7fe feb4 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2100      	movs	r1, #0
 8001a62:	4888      	ldr	r0, [pc, #544]	; (8001c84 <seclectmenu+0xf78>)
 8001a64:	f7fe fe48 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8001a68:	498b      	ldr	r1, [pc, #556]	; (8001c98 <seclectmenu+0xf8c>)
 8001a6a:	4886      	ldr	r0, [pc, #536]	; (8001c84 <seclectmenu+0xf78>)
 8001a6c:	f7fe feab 	bl	80007c6 <CLCD_WriteString>
							break;
 8001a70:	e000      	b.n	8001a74 <seclectmenu+0xd68>
						}
					}
 8001a72:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a78:	4888      	ldr	r0, [pc, #544]	; (8001c9c <seclectmenu+0xf90>)
 8001a7a:	f7ff f8f9 	bl	8000c70 <checkbuton>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 87f1 	beq.w	8002a68 <seclectmenu+0x1d5c>
					{
						exitmenu = 15;
 8001a86:	4b7e      	ldr	r3, [pc, #504]	; (8001c80 <seclectmenu+0xf74>)
 8001a88:	220f      	movs	r2, #15
 8001a8a:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001a8c:	7c3b      	ldrb	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <seclectmenu+0xd90>
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f000 87dd 	beq.w	8002a52 <seclectmenu+0x1d46>
 8001a98:	f000 bfe3 	b.w	8002a62 <seclectmenu+0x1d56>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001a9c:	4879      	ldr	r0, [pc, #484]	; (8001c84 <seclectmenu+0xf78>)
 8001a9e:	f7fe fea9 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4877      	ldr	r0, [pc, #476]	; (8001c84 <seclectmenu+0xf78>)
 8001aa8:	f7fe fe26 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> CHON THE");
 8001aac:	497c      	ldr	r1, [pc, #496]	; (8001ca0 <seclectmenu+0xf94>)
 8001aae:	4875      	ldr	r0, [pc, #468]	; (8001c84 <seclectmenu+0xf78>)
 8001ab0:	f7fe fe89 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4872      	ldr	r0, [pc, #456]	; (8001c84 <seclectmenu+0xf78>)
 8001aba:	f7fe fe1d 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   QUET THE");
 8001abe:	4979      	ldr	r1, [pc, #484]	; (8001ca4 <seclectmenu+0xf98>)
 8001ac0:	4870      	ldr	r0, [pc, #448]	; (8001c84 <seclectmenu+0xf78>)
 8001ac2:	f7fe fe80 	bl	80007c6 <CLCD_WriteString>
							uint8_t statusrm1 = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001ace:	f000 bfa6 	b.w	8002a1e <seclectmenu+0x1d12>
							{
								if (exitmenu == 0)
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <seclectmenu+0xf74>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <seclectmenu+0xde0>
								{
									CLCD_Clear(&LCD1);
 8001ada:	486a      	ldr	r0, [pc, #424]	; (8001c84 <seclectmenu+0xf78>)
 8001adc:	f7fe fe8a 	bl	80007f4 <CLCD_Clear>
									HAL_Delay(1000);
 8001ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae4:	f002 fa9e 	bl	8004024 <HAL_Delay>
									return;
 8001ae8:	f001 b802 	b.w	8002af0 <seclectmenu+0x1de4>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af0:	4862      	ldr	r0, [pc, #392]	; (8001c7c <seclectmenu+0xf70>)
 8001af2:	f7ff f8bd 	bl	8000c70 <checkbuton>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d051      	beq.n	8001ba0 <seclectmenu+0xe94>
								{
									statusrm1++;
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	3301      	adds	r3, #1
 8001b00:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d801      	bhi.n	8001b0c <seclectmenu+0xe00>
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	e000      	b.n	8001b0e <seclectmenu+0xe02>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <seclectmenu+0xe10>
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d016      	beq.n	8001b48 <seclectmenu+0xe3c>
 8001b1a:	e02b      	b.n	8001b74 <seclectmenu+0xe68>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001b1c:	4859      	ldr	r0, [pc, #356]	; (8001c84 <seclectmenu+0xf78>)
 8001b1e:	f7fe fe69 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	4857      	ldr	r0, [pc, #348]	; (8001c84 <seclectmenu+0xf78>)
 8001b28:	f7fe fde6 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 8001b2c:	495c      	ldr	r1, [pc, #368]	; (8001ca0 <seclectmenu+0xf94>)
 8001b2e:	4855      	ldr	r0, [pc, #340]	; (8001c84 <seclectmenu+0xf78>)
 8001b30:	f7fe fe49 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2100      	movs	r1, #0
 8001b38:	4852      	ldr	r0, [pc, #328]	; (8001c84 <seclectmenu+0xf78>)
 8001b3a:	f7fe fddd 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001b3e:	4959      	ldr	r1, [pc, #356]	; (8001ca4 <seclectmenu+0xf98>)
 8001b40:	4850      	ldr	r0, [pc, #320]	; (8001c84 <seclectmenu+0xf78>)
 8001b42:	f7fe fe40 	bl	80007c6 <CLCD_WriteString>
										break;
 8001b46:	e02c      	b.n	8001ba2 <seclectmenu+0xe96>
									case 1:
										CLCD_Clear(&LCD1);
 8001b48:	484e      	ldr	r0, [pc, #312]	; (8001c84 <seclectmenu+0xf78>)
 8001b4a:	f7fe fe53 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	484c      	ldr	r0, [pc, #304]	; (8001c84 <seclectmenu+0xf78>)
 8001b54:	f7fe fdd0 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 8001b58:	4953      	ldr	r1, [pc, #332]	; (8001ca8 <seclectmenu+0xf9c>)
 8001b5a:	484a      	ldr	r0, [pc, #296]	; (8001c84 <seclectmenu+0xf78>)
 8001b5c:	f7fe fe33 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2100      	movs	r1, #0
 8001b64:	4847      	ldr	r0, [pc, #284]	; (8001c84 <seclectmenu+0xf78>)
 8001b66:	f7fe fdc7 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8001b6a:	4950      	ldr	r1, [pc, #320]	; (8001cac <seclectmenu+0xfa0>)
 8001b6c:	4845      	ldr	r0, [pc, #276]	; (8001c84 <seclectmenu+0xf78>)
 8001b6e:	f7fe fe2a 	bl	80007c6 <CLCD_WriteString>
										;
										break;
 8001b72:	e016      	b.n	8001ba2 <seclectmenu+0xe96>
									default:
										CLCD_Clear(&LCD1);
 8001b74:	4843      	ldr	r0, [pc, #268]	; (8001c84 <seclectmenu+0xf78>)
 8001b76:	f7fe fe3d 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4841      	ldr	r0, [pc, #260]	; (8001c84 <seclectmenu+0xf78>)
 8001b80:	f7fe fdba 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001b84:	4947      	ldr	r1, [pc, #284]	; (8001ca4 <seclectmenu+0xf98>)
 8001b86:	483f      	ldr	r0, [pc, #252]	; (8001c84 <seclectmenu+0xf78>)
 8001b88:	f7fe fe1d 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2100      	movs	r1, #0
 8001b90:	483c      	ldr	r0, [pc, #240]	; (8001c84 <seclectmenu+0xf78>)
 8001b92:	f7fe fdb1 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> BACK");
 8001b96:	4940      	ldr	r1, [pc, #256]	; (8001c98 <seclectmenu+0xf8c>)
 8001b98:	483a      	ldr	r0, [pc, #232]	; (8001c84 <seclectmenu+0xf78>)
 8001b9a:	f7fe fe14 	bl	80007c6 <CLCD_WriteString>
										break;
 8001b9e:	e000      	b.n	8001ba2 <seclectmenu+0xe96>
									}
								}
 8001ba0:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba6:	483d      	ldr	r0, [pc, #244]	; (8001c9c <seclectmenu+0xf90>)
 8001ba8:	f7ff f862 	bl	8000c70 <checkbuton>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8734 	beq.w	8002a1c <seclectmenu+0x1d10>
								{
									exitmenu = 15;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <seclectmenu+0xf74>)
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <seclectmenu+0xebe>
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f000 863b 	beq.w	800283c <seclectmenu+0x1b30>
 8001bc6:	f000 bf26 	b.w	8002a16 <seclectmenu+0x1d0a>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001bca:	482e      	ldr	r0, [pc, #184]	; (8001c84 <seclectmenu+0xf78>)
 8001bcc:	f7fe fe12 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	482b      	ldr	r0, [pc, #172]	; (8001c84 <seclectmenu+0xf78>)
 8001bd6:	f7fe fd8f 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001bda:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <seclectmenu+0xfa4>)
 8001bdc:	4829      	ldr	r0, [pc, #164]	; (8001c84 <seclectmenu+0xf78>)
 8001bde:	f7fe fdf2 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2100      	movs	r1, #0
 8001be6:	4827      	ldr	r0, [pc, #156]	; (8001c84 <seclectmenu+0xf78>)
 8001be8:	f7fe fd86 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001bec:	4931      	ldr	r1, [pc, #196]	; (8001cb4 <seclectmenu+0xfa8>)
 8001bee:	4825      	ldr	r0, [pc, #148]	; (8001c84 <seclectmenu+0xf78>)
 8001bf0:	f7fe fde9 	bl	80007c6 <CLCD_WriteString>
										uint8_t statusadd = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001bfc:	f000 be04 	b.w	8002808 <seclectmenu+0x1afc>
										{
											if (exitmenu == 0)
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <seclectmenu+0xf74>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d108      	bne.n	8001c1a <seclectmenu+0xf0e>
											{
												CLCD_Clear(&LCD1);
 8001c08:	481e      	ldr	r0, [pc, #120]	; (8001c84 <seclectmenu+0xf78>)
 8001c0a:	f7fe fdf3 	bl	80007f4 <CLCD_Clear>
												HAL_Delay(1000);
 8001c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c12:	f002 fa07 	bl	8004024 <HAL_Delay>
												return;
 8001c16:	f000 bf6b 	b.w	8002af0 <seclectmenu+0x1de4>
											}
											if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1e:	4817      	ldr	r0, [pc, #92]	; (8001c7c <seclectmenu+0xf70>)
 8001c20:	f7ff f826 	bl	8000c70 <checkbuton>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d072      	beq.n	8001d10 <seclectmenu+0x1004>
											{
												exitmenu = 15;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <seclectmenu+0xf74>)
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	3301      	adds	r3, #1
 8001c34:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001c36:	7b3b      	ldrb	r3, [r7, #12]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d801      	bhi.n	8001c40 <seclectmenu+0xf34>
 8001c3c:	7b3b      	ldrb	r3, [r7, #12]
 8001c3e:	e000      	b.n	8001c42 <seclectmenu+0xf36>
 8001c40:	2300      	movs	r3, #0
 8001c42:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d002      	beq.n	8001c50 <seclectmenu+0xf44>
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d034      	beq.n	8001cb8 <seclectmenu+0xfac>
 8001c4e:	e049      	b.n	8001ce4 <seclectmenu+0xfd8>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <seclectmenu+0xf78>)
 8001c52:	f7fe fdcf 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <seclectmenu+0xf78>)
 8001c5c:	f7fe fd4c 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001c60:	4913      	ldr	r1, [pc, #76]	; (8001cb0 <seclectmenu+0xfa4>)
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <seclectmenu+0xf78>)
 8001c64:	f7fe fdaf 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <seclectmenu+0xf78>)
 8001c6e:	f7fe fd43 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001c72:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <seclectmenu+0xfa8>)
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <seclectmenu+0xf78>)
 8001c76:	f7fe fda6 	bl	80007c6 <CLCD_WriteString>
													break;
 8001c7a:	e04a      	b.n	8001d12 <seclectmenu+0x1006>
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	20000000 	.word	0x20000000
 8001c84:	200003b8 	.word	0x200003b8
 8001c88:	0800830c 	.word	0x0800830c
 8001c8c:	0800831c 	.word	0x0800831c
 8001c90:	080082fc 	.word	0x080082fc
 8001c94:	0800832c 	.word	0x0800832c
 8001c98:	08008238 	.word	0x08008238
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	0800833c 	.word	0x0800833c
 8001ca4:	08008348 	.word	0x08008348
 8001ca8:	08008354 	.word	0x08008354
 8001cac:	08008360 	.word	0x08008360
 8001cb0:	08008204 	.word	0x08008204
 8001cb4:	08008218 	.word	0x08008218
												case 2:
													CLCD_Clear(&LCD1);
 8001cb8:	48b7      	ldr	r0, [pc, #732]	; (8001f98 <seclectmenu+0x128c>)
 8001cba:	f7fe fd9b 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	48b5      	ldr	r0, [pc, #724]	; (8001f98 <seclectmenu+0x128c>)
 8001cc4:	f7fe fd18 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001cc8:	49b4      	ldr	r1, [pc, #720]	; (8001f9c <seclectmenu+0x1290>)
 8001cca:	48b3      	ldr	r0, [pc, #716]	; (8001f98 <seclectmenu+0x128c>)
 8001ccc:	f7fe fd7b 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	48b0      	ldr	r0, [pc, #704]	; (8001f98 <seclectmenu+0x128c>)
 8001cd6:	f7fe fd0f 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001cda:	49b1      	ldr	r1, [pc, #708]	; (8001fa0 <seclectmenu+0x1294>)
 8001cdc:	48ae      	ldr	r0, [pc, #696]	; (8001f98 <seclectmenu+0x128c>)
 8001cde:	f7fe fd72 	bl	80007c6 <CLCD_WriteString>
													break;
 8001ce2:	e016      	b.n	8001d12 <seclectmenu+0x1006>
												default:
													CLCD_Clear(&LCD1);
 8001ce4:	48ac      	ldr	r0, [pc, #688]	; (8001f98 <seclectmenu+0x128c>)
 8001ce6:	f7fe fd85 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	48aa      	ldr	r0, [pc, #680]	; (8001f98 <seclectmenu+0x128c>)
 8001cf0:	f7fe fd02 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001cf4:	49ab      	ldr	r1, [pc, #684]	; (8001fa4 <seclectmenu+0x1298>)
 8001cf6:	48a8      	ldr	r0, [pc, #672]	; (8001f98 <seclectmenu+0x128c>)
 8001cf8:	f7fe fd65 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2100      	movs	r1, #0
 8001d00:	48a5      	ldr	r0, [pc, #660]	; (8001f98 <seclectmenu+0x128c>)
 8001d02:	f7fe fcf9 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> BACK");
 8001d06:	49a8      	ldr	r1, [pc, #672]	; (8001fa8 <seclectmenu+0x129c>)
 8001d08:	48a3      	ldr	r0, [pc, #652]	; (8001f98 <seclectmenu+0x128c>)
 8001d0a:	f7fe fd5c 	bl	80007c6 <CLCD_WriteString>
													break;
 8001d0e:	e000      	b.n	8001d12 <seclectmenu+0x1006>
												}
											}
 8001d10:	bf00      	nop
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d16:	48a5      	ldr	r0, [pc, #660]	; (8001fac <seclectmenu+0x12a0>)
 8001d18:	f7fe ffaa 	bl	8000c70 <checkbuton>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8571 	beq.w	8002806 <seclectmenu+0x1afa>
											{
												exitmenu = 15;
 8001d24:	4ba2      	ldr	r3, [pc, #648]	; (8001fb0 <seclectmenu+0x12a4>)
 8001d26:	220f      	movs	r2, #15
 8001d28:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001d2a:	7b3b      	ldrb	r3, [r7, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d004      	beq.n	8001d3a <seclectmenu+0x102e>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	f000 82bd 	beq.w	80022b0 <seclectmenu+0x15a4>
 8001d36:	f000 bd63 	b.w	8002800 <seclectmenu+0x1af4>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001d3a:	4897      	ldr	r0, [pc, #604]	; (8001f98 <seclectmenu+0x128c>)
 8001d3c:	f7fe fd5a 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	4894      	ldr	r0, [pc, #592]	; (8001f98 <seclectmenu+0x128c>)
 8001d46:	f7fe fcd7 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001d4a:	499a      	ldr	r1, [pc, #616]	; (8001fb4 <seclectmenu+0x12a8>)
 8001d4c:	4892      	ldr	r0, [pc, #584]	; (8001f98 <seclectmenu+0x128c>)
 8001d4e:	f7fe fd3a 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2100      	movs	r1, #0
 8001d56:	4890      	ldr	r0, [pc, #576]	; (8001f98 <seclectmenu+0x128c>)
 8001d58:	f7fe fcce 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 8001d5c:	4996      	ldr	r1, [pc, #600]	; (8001fb8 <seclectmenu+0x12ac>)
 8001d5e:	488e      	ldr	r0, [pc, #568]	; (8001f98 <seclectmenu+0x128c>)
 8001d60:	f7fe fd31 	bl	80007c6 <CLCD_WriteString>
													uint8_t statusadd1 = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001d6c:	e286      	b.n	800227c <seclectmenu+0x1570>
													{
														if (exitmenu == 0)
 8001d6e:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <seclectmenu+0x12a4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <seclectmenu+0x107c>
														{
															CLCD_Clear(&LCD1);
 8001d76:	4888      	ldr	r0, [pc, #544]	; (8001f98 <seclectmenu+0x128c>)
 8001d78:	f7fe fd3c 	bl	80007f4 <CLCD_Clear>
															HAL_Delay(1000);
 8001d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d80:	f002 f950 	bl	8004024 <HAL_Delay>
															return;
 8001d84:	f000 beb4 	b.w	8002af0 <seclectmenu+0x1de4>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d8c:	488b      	ldr	r0, [pc, #556]	; (8001fbc <seclectmenu+0x12b0>)
 8001d8e:	f7fe ff6f 	bl	8000c70 <checkbuton>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808b 	beq.w	8001eb0 <seclectmenu+0x11a4>
														{
															exitmenu = 15;
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <seclectmenu+0x12a4>)
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001da0:	7abb      	ldrb	r3, [r7, #10]
 8001da2:	3301      	adds	r3, #1
 8001da4:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001da6:	7abb      	ldrb	r3, [r7, #10]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d801      	bhi.n	8001db0 <seclectmenu+0x10a4>
 8001dac:	7abb      	ldrb	r3, [r7, #10]
 8001dae:	e000      	b.n	8001db2 <seclectmenu+0x10a6>
 8001db0:	2300      	movs	r3, #0
 8001db2:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d863      	bhi.n	8001e84 <seclectmenu+0x1178>
 8001dbc:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <seclectmenu+0x10b8>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001e01 	.word	0x08001e01
 8001dcc:	08001e2d 	.word	0x08001e2d
 8001dd0:	08001e59 	.word	0x08001e59
															{
															case 1:
																CLCD_Clear(&LCD1);
 8001dd4:	4870      	ldr	r0, [pc, #448]	; (8001f98 <seclectmenu+0x128c>)
 8001dd6:	f7fe fd0d 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	486e      	ldr	r0, [pc, #440]	; (8001f98 <seclectmenu+0x128c>)
 8001de0:	f7fe fc8a 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001de4:	4973      	ldr	r1, [pc, #460]	; (8001fb4 <seclectmenu+0x12a8>)
 8001de6:	486c      	ldr	r0, [pc, #432]	; (8001f98 <seclectmenu+0x128c>)
 8001de8:	f7fe fced 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2100      	movs	r1, #0
 8001df0:	4869      	ldr	r0, [pc, #420]	; (8001f98 <seclectmenu+0x128c>)
 8001df2:	f7fe fc81 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 8001df6:	4970      	ldr	r1, [pc, #448]	; (8001fb8 <seclectmenu+0x12ac>)
 8001df8:	4867      	ldr	r0, [pc, #412]	; (8001f98 <seclectmenu+0x128c>)
 8001dfa:	f7fe fce4 	bl	80007c6 <CLCD_WriteString>
																break;
 8001dfe:	e058      	b.n	8001eb2 <seclectmenu+0x11a6>
															case 2:
																CLCD_Clear(&LCD1);
 8001e00:	4865      	ldr	r0, [pc, #404]	; (8001f98 <seclectmenu+0x128c>)
 8001e02:	f7fe fcf7 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4863      	ldr	r0, [pc, #396]	; (8001f98 <seclectmenu+0x128c>)
 8001e0c:	f7fe fc74 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001e10:	496b      	ldr	r1, [pc, #428]	; (8001fc0 <seclectmenu+0x12b4>)
 8001e12:	4861      	ldr	r0, [pc, #388]	; (8001f98 <seclectmenu+0x128c>)
 8001e14:	f7fe fcd7 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	485e      	ldr	r0, [pc, #376]	; (8001f98 <seclectmenu+0x128c>)
 8001e1e:	f7fe fc6b 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 8001e22:	4968      	ldr	r1, [pc, #416]	; (8001fc4 <seclectmenu+0x12b8>)
 8001e24:	485c      	ldr	r0, [pc, #368]	; (8001f98 <seclectmenu+0x128c>)
 8001e26:	f7fe fcce 	bl	80007c6 <CLCD_WriteString>
																break;
 8001e2a:	e042      	b.n	8001eb2 <seclectmenu+0x11a6>
															case 3:
																CLCD_Clear(&LCD1);
 8001e2c:	485a      	ldr	r0, [pc, #360]	; (8001f98 <seclectmenu+0x128c>)
 8001e2e:	f7fe fce1 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	4858      	ldr	r0, [pc, #352]	; (8001f98 <seclectmenu+0x128c>)
 8001e38:	f7fe fc5e 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001e3c:	4962      	ldr	r1, [pc, #392]	; (8001fc8 <seclectmenu+0x12bc>)
 8001e3e:	4856      	ldr	r0, [pc, #344]	; (8001f98 <seclectmenu+0x128c>)
 8001e40:	f7fe fcc1 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2100      	movs	r1, #0
 8001e48:	4853      	ldr	r0, [pc, #332]	; (8001f98 <seclectmenu+0x128c>)
 8001e4a:	f7fe fc55 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8001e4e:	495f      	ldr	r1, [pc, #380]	; (8001fcc <seclectmenu+0x12c0>)
 8001e50:	4851      	ldr	r0, [pc, #324]	; (8001f98 <seclectmenu+0x128c>)
 8001e52:	f7fe fcb8 	bl	80007c6 <CLCD_WriteString>
																break;
 8001e56:	e02c      	b.n	8001eb2 <seclectmenu+0x11a6>
															case 4:
																CLCD_Clear(&LCD1);
 8001e58:	484f      	ldr	r0, [pc, #316]	; (8001f98 <seclectmenu+0x128c>)
 8001e5a:	f7fe fccb 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	484d      	ldr	r0, [pc, #308]	; (8001f98 <seclectmenu+0x128c>)
 8001e64:	f7fe fc48 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001e68:	4959      	ldr	r1, [pc, #356]	; (8001fd0 <seclectmenu+0x12c4>)
 8001e6a:	484b      	ldr	r0, [pc, #300]	; (8001f98 <seclectmenu+0x128c>)
 8001e6c:	f7fe fcab 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2100      	movs	r1, #0
 8001e74:	4848      	ldr	r0, [pc, #288]	; (8001f98 <seclectmenu+0x128c>)
 8001e76:	f7fe fc3f 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8001e7a:	4956      	ldr	r1, [pc, #344]	; (8001fd4 <seclectmenu+0x12c8>)
 8001e7c:	4846      	ldr	r0, [pc, #280]	; (8001f98 <seclectmenu+0x128c>)
 8001e7e:	f7fe fca2 	bl	80007c6 <CLCD_WriteString>
																break;
 8001e82:	e016      	b.n	8001eb2 <seclectmenu+0x11a6>
															default:
																CLCD_Clear(&LCD1);
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <seclectmenu+0x128c>)
 8001e86:	f7fe fcb5 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4842      	ldr	r0, [pc, #264]	; (8001f98 <seclectmenu+0x128c>)
 8001e90:	f7fe fc32 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <seclectmenu+0x12c0>)
 8001e96:	4840      	ldr	r0, [pc, #256]	; (8001f98 <seclectmenu+0x128c>)
 8001e98:	f7fe fc95 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	483d      	ldr	r0, [pc, #244]	; (8001f98 <seclectmenu+0x128c>)
 8001ea2:	f7fe fc29 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8001ea6:	494c      	ldr	r1, [pc, #304]	; (8001fd8 <seclectmenu+0x12cc>)
 8001ea8:	483b      	ldr	r0, [pc, #236]	; (8001f98 <seclectmenu+0x128c>)
 8001eaa:	f7fe fc8c 	bl	80007c6 <CLCD_WriteString>
																break;
 8001eae:	e000      	b.n	8001eb2 <seclectmenu+0x11a6>
															}
														}
 8001eb0:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb6:	483d      	ldr	r0, [pc, #244]	; (8001fac <seclectmenu+0x12a0>)
 8001eb8:	f7fe feda 	bl	8000c70 <checkbuton>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 81db 	beq.w	800227a <seclectmenu+0x156e>
														{
															exitmenu = 15;
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <seclectmenu+0x12a4>)
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	7abb      	ldrb	r3, [r7, #10]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8001ed6:	7abb      	ldrb	r3, [r7, #10]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	f200 81ca 	bhi.w	8002274 <seclectmenu+0x1568>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <seclectmenu+0x11dc>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08002011 	.word	0x08002011
 8001ef0:	080020dd 	.word	0x080020dd
 8001ef4:	080021a9 	.word	0x080021a9
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001ef8:	793b      	ldrb	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f86a 	bl	8002fd4 <CheckKey>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d125      	bne.n	8001f52 <seclectmenu+0x1246>
																{
																	CLCD_Clear(&LCD1);
 8001f06:	4824      	ldr	r0, [pc, #144]	; (8001f98 <seclectmenu+0x128c>)
 8001f08:	f7fe fc74 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4821      	ldr	r0, [pc, #132]	; (8001f98 <seclectmenu+0x128c>)
 8001f12:	f7fe fbf1 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 8001f16:	4931      	ldr	r1, [pc, #196]	; (8001fdc <seclectmenu+0x12d0>)
 8001f18:	481f      	ldr	r0, [pc, #124]	; (8001f98 <seclectmenu+0x128c>)
 8001f1a:	f7fe fc54 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8001f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f22:	f002 f87f 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8001f26:	481c      	ldr	r0, [pc, #112]	; (8001f98 <seclectmenu+0x128c>)
 8001f28:	f7fe fc64 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <seclectmenu+0x128c>)
 8001f32:	f7fe fbe1 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001f36:	491f      	ldr	r1, [pc, #124]	; (8001fb4 <seclectmenu+0x12a8>)
 8001f38:	4817      	ldr	r0, [pc, #92]	; (8001f98 <seclectmenu+0x128c>)
 8001f3a:	f7fe fc44 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2100      	movs	r1, #0
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <seclectmenu+0x128c>)
 8001f44:	f7fe fbd8 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 8001f48:	491b      	ldr	r1, [pc, #108]	; (8001fb8 <seclectmenu+0x12ac>)
 8001f4a:	4813      	ldr	r0, [pc, #76]	; (8001f98 <seclectmenu+0x128c>)
 8001f4c:	f7fe fc3b 	bl	80007c6 <CLCD_WriteString>
 8001f50:	e194      	b.n	800227c <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8001f52:	793b      	ldrb	r3, [r7, #4]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f83d 	bl	8002fd4 <CheckKey>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f867 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <seclectmenu+0x128c>)
 8001f64:	f7fe fc46 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	480a      	ldr	r0, [pc, #40]	; (8001f98 <seclectmenu+0x128c>)
 8001f6e:	f7fe fbc3 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <seclectmenu+0x12d4>)
 8001f74:	4808      	ldr	r0, [pc, #32]	; (8001f98 <seclectmenu+0x128c>)
 8001f76:	f7fe fc26 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8001f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7e:	f002 f851 	bl	8004024 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f82:	f000 fe31 	bl	8002be8 <checkcountUID>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d12b      	bne.n	8001fe4 <seclectmenu+0x12d8>
																	{
																		startadd();
 8001f8c:	f001 f85e 	bl	800304c <startadd>
																		exitmenu = 0;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <seclectmenu+0x12a4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e171      	b.n	800227c <seclectmenu+0x1570>
 8001f98:	200003b8 	.word	0x200003b8
 8001f9c:	080081f0 	.word	0x080081f0
 8001fa0:	08008228 	.word	0x08008228
 8001fa4:	08008218 	.word	0x08008218
 8001fa8:	08008238 	.word	0x08008238
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	08008240 	.word	0x08008240
 8001fb8:	0800824c 	.word	0x0800824c
 8001fbc:	40010c00 	.word	0x40010c00
 8001fc0:	08008258 	.word	0x08008258
 8001fc4:	08008264 	.word	0x08008264
 8001fc8:	08008270 	.word	0x08008270
 8001fcc:	0800827c 	.word	0x0800827c
 8001fd0:	08008288 	.word	0x08008288
 8001fd4:	08008294 	.word	0x08008294
 8001fd8:	080082a0 	.word	0x080082a0
 8001fdc:	0800836c 	.word	0x0800836c
 8001fe0:	0800837c 	.word	0x0800837c
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8001fe4:	48bf      	ldr	r0, [pc, #764]	; (80022e4 <seclectmenu+0x15d8>)
 8001fe6:	f7fe fc05 	bl	80007f4 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	48bd      	ldr	r0, [pc, #756]	; (80022e4 <seclectmenu+0x15d8>)
 8001ff0:	f7fe fb82 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001ff4:	49bc      	ldr	r1, [pc, #752]	; (80022e8 <seclectmenu+0x15dc>)
 8001ff6:	48bb      	ldr	r0, [pc, #748]	; (80022e4 <seclectmenu+0x15d8>)
 8001ff8:	f7fe fbe5 	bl	80007c6 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2100      	movs	r1, #0
 8002000:	48b8      	ldr	r0, [pc, #736]	; (80022e4 <seclectmenu+0x15d8>)
 8002002:	f7fe fb79 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 2 ");
 8002006:	49b9      	ldr	r1, [pc, #740]	; (80022ec <seclectmenu+0x15e0>)
 8002008:	48b6      	ldr	r0, [pc, #728]	; (80022e4 <seclectmenu+0x15d8>)
 800200a:	f7fe fbdc 	bl	80007c6 <CLCD_WriteString>
																	}
																}
																break;
 800200e:	e135      	b.n	800227c <seclectmenu+0x1570>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8002010:	793b      	ldrb	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 ffde 	bl	8002fd4 <CheckKey>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d125      	bne.n	800206a <seclectmenu+0x135e>
																{
																	CLCD_Clear(&LCD1);
 800201e:	48b1      	ldr	r0, [pc, #708]	; (80022e4 <seclectmenu+0x15d8>)
 8002020:	f7fe fbe8 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	48ae      	ldr	r0, [pc, #696]	; (80022e4 <seclectmenu+0x15d8>)
 800202a:	f7fe fb65 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 800202e:	49b0      	ldr	r1, [pc, #704]	; (80022f0 <seclectmenu+0x15e4>)
 8002030:	48ac      	ldr	r0, [pc, #688]	; (80022e4 <seclectmenu+0x15d8>)
 8002032:	f7fe fbc8 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800203a:	f001 fff3 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800203e:	48a9      	ldr	r0, [pc, #676]	; (80022e4 <seclectmenu+0x15d8>)
 8002040:	f7fe fbd8 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	48a6      	ldr	r0, [pc, #664]	; (80022e4 <seclectmenu+0x15d8>)
 800204a:	f7fe fb55 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800204e:	49a9      	ldr	r1, [pc, #676]	; (80022f4 <seclectmenu+0x15e8>)
 8002050:	48a4      	ldr	r0, [pc, #656]	; (80022e4 <seclectmenu+0x15d8>)
 8002052:	f7fe fbb8 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002056:	2201      	movs	r2, #1
 8002058:	2100      	movs	r1, #0
 800205a:	48a2      	ldr	r0, [pc, #648]	; (80022e4 <seclectmenu+0x15d8>)
 800205c:	f7fe fb4c 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 8002060:	49a5      	ldr	r1, [pc, #660]	; (80022f8 <seclectmenu+0x15ec>)
 8002062:	48a0      	ldr	r0, [pc, #640]	; (80022e4 <seclectmenu+0x15d8>)
 8002064:	f7fe fbaf 	bl	80007c6 <CLCD_WriteString>
 8002068:	e108      	b.n	800227c <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 800206a:	793b      	ldrb	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 ffb1 	bl	8002fd4 <CheckKey>
 8002072:	4603      	mov	r3, r0
 8002074:	4618      	mov	r0, r3
 8002076:	f000 ffdb 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 800207a:	489a      	ldr	r0, [pc, #616]	; (80022e4 <seclectmenu+0x15d8>)
 800207c:	f7fe fbba 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	4897      	ldr	r0, [pc, #604]	; (80022e4 <seclectmenu+0x15d8>)
 8002086:	f7fe fb37 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 800208a:	499c      	ldr	r1, [pc, #624]	; (80022fc <seclectmenu+0x15f0>)
 800208c:	4895      	ldr	r0, [pc, #596]	; (80022e4 <seclectmenu+0x15d8>)
 800208e:	f7fe fb9a 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002096:	f001 ffc5 	bl	8004024 <HAL_Delay>
																	if (checkcountUID() == 0)
 800209a:	f000 fda5 	bl	8002be8 <checkcountUID>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <seclectmenu+0x13a4>
																	{
																		startadd();
 80020a4:	f000 ffd2 	bl	800304c <startadd>
																		exitmenu = 0;
 80020a8:	4b95      	ldr	r3, [pc, #596]	; (8002300 <seclectmenu+0x15f4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e0e5      	b.n	800227c <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 80020b0:	488c      	ldr	r0, [pc, #560]	; (80022e4 <seclectmenu+0x15d8>)
 80020b2:	f7fe fb9f 	bl	80007f4 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	488a      	ldr	r0, [pc, #552]	; (80022e4 <seclectmenu+0x15d8>)
 80020bc:	f7fe fb1c 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80020c0:	498c      	ldr	r1, [pc, #560]	; (80022f4 <seclectmenu+0x15e8>)
 80020c2:	4888      	ldr	r0, [pc, #544]	; (80022e4 <seclectmenu+0x15d8>)
 80020c4:	f7fe fb7f 	bl	80007c6 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2100      	movs	r1, #0
 80020cc:	4885      	ldr	r0, [pc, #532]	; (80022e4 <seclectmenu+0x15d8>)
 80020ce:	f7fe fb13 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 3 ");
 80020d2:	4989      	ldr	r1, [pc, #548]	; (80022f8 <seclectmenu+0x15ec>)
 80020d4:	4883      	ldr	r0, [pc, #524]	; (80022e4 <seclectmenu+0x15d8>)
 80020d6:	f7fe fb76 	bl	80007c6 <CLCD_WriteString>
																	}
																}
																break;
 80020da:	e0cf      	b.n	800227c <seclectmenu+0x1570>
															case 3:
																if (CheckKey(keyadd1) == 0)
 80020dc:	793b      	ldrb	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ff78 	bl	8002fd4 <CheckKey>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d125      	bne.n	8002136 <seclectmenu+0x142a>
																{
																	CLCD_Clear(&LCD1);
 80020ea:	487e      	ldr	r0, [pc, #504]	; (80022e4 <seclectmenu+0x15d8>)
 80020ec:	f7fe fb82 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	487b      	ldr	r0, [pc, #492]	; (80022e4 <seclectmenu+0x15d8>)
 80020f6:	f7fe faff 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 80020fa:	4982      	ldr	r1, [pc, #520]	; (8002304 <seclectmenu+0x15f8>)
 80020fc:	4879      	ldr	r0, [pc, #484]	; (80022e4 <seclectmenu+0x15d8>)
 80020fe:	f7fe fb62 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f001 ff8d 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800210a:	4876      	ldr	r0, [pc, #472]	; (80022e4 <seclectmenu+0x15d8>)
 800210c:	f7fe fb72 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	4873      	ldr	r0, [pc, #460]	; (80022e4 <seclectmenu+0x15d8>)
 8002116:	f7fe faef 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800211a:	497b      	ldr	r1, [pc, #492]	; (8002308 <seclectmenu+0x15fc>)
 800211c:	4871      	ldr	r0, [pc, #452]	; (80022e4 <seclectmenu+0x15d8>)
 800211e:	f7fe fb52 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002122:	2201      	movs	r2, #1
 8002124:	2100      	movs	r1, #0
 8002126:	486f      	ldr	r0, [pc, #444]	; (80022e4 <seclectmenu+0x15d8>)
 8002128:	f7fe fae6 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 800212c:	4977      	ldr	r1, [pc, #476]	; (800230c <seclectmenu+0x1600>)
 800212e:	486d      	ldr	r0, [pc, #436]	; (80022e4 <seclectmenu+0x15d8>)
 8002130:	f7fe fb49 	bl	80007c6 <CLCD_WriteString>
 8002134:	e0a2      	b.n	800227c <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8002136:	793b      	ldrb	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 ff4b 	bl	8002fd4 <CheckKey>
 800213e:	4603      	mov	r3, r0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 ff75 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 8002146:	4867      	ldr	r0, [pc, #412]	; (80022e4 <seclectmenu+0x15d8>)
 8002148:	f7fe fb54 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	4864      	ldr	r0, [pc, #400]	; (80022e4 <seclectmenu+0x15d8>)
 8002152:	f7fe fad1 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002156:	4969      	ldr	r1, [pc, #420]	; (80022fc <seclectmenu+0x15f0>)
 8002158:	4862      	ldr	r0, [pc, #392]	; (80022e4 <seclectmenu+0x15d8>)
 800215a:	f7fe fb34 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 800215e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002162:	f001 ff5f 	bl	8004024 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002166:	f000 fd3f 	bl	8002be8 <checkcountUID>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <seclectmenu+0x1470>
																	{
																		startadd();
 8002170:	f000 ff6c 	bl	800304c <startadd>
																		exitmenu = 0;
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <seclectmenu+0x15f4>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e07f      	b.n	800227c <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 800217c:	4859      	ldr	r0, [pc, #356]	; (80022e4 <seclectmenu+0x15d8>)
 800217e:	f7fe fb39 	bl	80007f4 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	4857      	ldr	r0, [pc, #348]	; (80022e4 <seclectmenu+0x15d8>)
 8002188:	f7fe fab6 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800218c:	495e      	ldr	r1, [pc, #376]	; (8002308 <seclectmenu+0x15fc>)
 800218e:	4855      	ldr	r0, [pc, #340]	; (80022e4 <seclectmenu+0x15d8>)
 8002190:	f7fe fb19 	bl	80007c6 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	2100      	movs	r1, #0
 8002198:	4852      	ldr	r0, [pc, #328]	; (80022e4 <seclectmenu+0x15d8>)
 800219a:	f7fe faad 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 4 ");
 800219e:	495b      	ldr	r1, [pc, #364]	; (800230c <seclectmenu+0x1600>)
 80021a0:	4850      	ldr	r0, [pc, #320]	; (80022e4 <seclectmenu+0x15d8>)
 80021a2:	f7fe fb10 	bl	80007c6 <CLCD_WriteString>
																	}
																}
																break;
 80021a6:	e069      	b.n	800227c <seclectmenu+0x1570>
															case 4:
																if (CheckKey(keyadd1) == 0)
 80021a8:	793b      	ldrb	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 ff12 	bl	8002fd4 <CheckKey>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d125      	bne.n	8002202 <seclectmenu+0x14f6>
																{
																	CLCD_Clear(&LCD1);
 80021b6:	484b      	ldr	r0, [pc, #300]	; (80022e4 <seclectmenu+0x15d8>)
 80021b8:	f7fe fb1c 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	4848      	ldr	r0, [pc, #288]	; (80022e4 <seclectmenu+0x15d8>)
 80021c2:	f7fe fa99 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 80021c6:	4952      	ldr	r1, [pc, #328]	; (8002310 <seclectmenu+0x1604>)
 80021c8:	4846      	ldr	r0, [pc, #280]	; (80022e4 <seclectmenu+0x15d8>)
 80021ca:	f7fe fafc 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 80021ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d2:	f001 ff27 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80021d6:	4843      	ldr	r0, [pc, #268]	; (80022e4 <seclectmenu+0x15d8>)
 80021d8:	f7fe fb0c 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	4840      	ldr	r0, [pc, #256]	; (80022e4 <seclectmenu+0x15d8>)
 80021e2:	f7fe fa89 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80021e6:	494b      	ldr	r1, [pc, #300]	; (8002314 <seclectmenu+0x1608>)
 80021e8:	483e      	ldr	r0, [pc, #248]	; (80022e4 <seclectmenu+0x15d8>)
 80021ea:	f7fe faec 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2100      	movs	r1, #0
 80021f2:	483c      	ldr	r0, [pc, #240]	; (80022e4 <seclectmenu+0x15d8>)
 80021f4:	f7fe fa80 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 80021f8:	4947      	ldr	r1, [pc, #284]	; (8002318 <seclectmenu+0x160c>)
 80021fa:	483a      	ldr	r0, [pc, #232]	; (80022e4 <seclectmenu+0x15d8>)
 80021fc:	f7fe fae3 	bl	80007c6 <CLCD_WriteString>
 8002200:	e03c      	b.n	800227c <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fee5 	bl	8002fd4 <CheckKey>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 ff0f 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 8002212:	4834      	ldr	r0, [pc, #208]	; (80022e4 <seclectmenu+0x15d8>)
 8002214:	f7fe faee 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	4831      	ldr	r0, [pc, #196]	; (80022e4 <seclectmenu+0x15d8>)
 800221e:	f7fe fa6b 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <seclectmenu+0x15f0>)
 8002224:	482f      	ldr	r0, [pc, #188]	; (80022e4 <seclectmenu+0x15d8>)
 8002226:	f7fe face 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 800222a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222e:	f001 fef9 	bl	8004024 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002232:	f000 fcd9 	bl	8002be8 <checkcountUID>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <seclectmenu+0x153c>
																	{
																		startadd();
 800223c:	f000 ff06 	bl	800304c <startadd>
																		exitmenu = 0;
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <seclectmenu+0x15f4>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e019      	b.n	800227c <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002248:	4826      	ldr	r0, [pc, #152]	; (80022e4 <seclectmenu+0x15d8>)
 800224a:	f7fe fad3 	bl	80007f4 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4824      	ldr	r0, [pc, #144]	; (80022e4 <seclectmenu+0x15d8>)
 8002254:	f7fe fa50 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002258:	492e      	ldr	r1, [pc, #184]	; (8002314 <seclectmenu+0x1608>)
 800225a:	4822      	ldr	r0, [pc, #136]	; (80022e4 <seclectmenu+0x15d8>)
 800225c:	f7fe fab3 	bl	80007c6 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	2100      	movs	r1, #0
 8002264:	481f      	ldr	r0, [pc, #124]	; (80022e4 <seclectmenu+0x15d8>)
 8002266:	f7fe fa47 	bl	80006f8 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    BACK ");
 800226a:	492b      	ldr	r1, [pc, #172]	; (8002318 <seclectmenu+0x160c>)
 800226c:	481d      	ldr	r0, [pc, #116]	; (80022e4 <seclectmenu+0x15d8>)
 800226e:	f7fe faaa 	bl	80007c6 <CLCD_WriteString>
																	}
																}
																break;
 8002272:	e003      	b.n	800227c <seclectmenu+0x1570>
															default:
																back11 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	727b      	strb	r3, [r7, #9]
																break;
 8002278:	e000      	b.n	800227c <seclectmenu+0x1570>
															}
														}
 800227a:	bf00      	nop
													while (back11 == 1)
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f43f ad75 	beq.w	8001d6e <seclectmenu+0x1062>
													}
													CLCD_Clear(&LCD1);
 8002284:	4817      	ldr	r0, [pc, #92]	; (80022e4 <seclectmenu+0x15d8>)
 8002286:	f7fe fab5 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	4815      	ldr	r0, [pc, #84]	; (80022e4 <seclectmenu+0x15d8>)
 8002290:	f7fe fa32 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8002294:	4921      	ldr	r1, [pc, #132]	; (800231c <seclectmenu+0x1610>)
 8002296:	4813      	ldr	r0, [pc, #76]	; (80022e4 <seclectmenu+0x15d8>)
 8002298:	f7fe fa95 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 800229c:	2201      	movs	r2, #1
 800229e:	2100      	movs	r1, #0
 80022a0:	4810      	ldr	r0, [pc, #64]	; (80022e4 <seclectmenu+0x15d8>)
 80022a2:	f7fe fa29 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 80022a6:	491e      	ldr	r1, [pc, #120]	; (8002320 <seclectmenu+0x1614>)
 80022a8:	480e      	ldr	r0, [pc, #56]	; (80022e4 <seclectmenu+0x15d8>)
 80022aa:	f7fe fa8c 	bl	80007c6 <CLCD_WriteString>
													break;
 80022ae:	e2ab      	b.n	8002808 <seclectmenu+0x1afc>
												case 2:
													CLCD_Clear(&LCD1);
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <seclectmenu+0x15d8>)
 80022b2:	f7fe fa9f 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	480a      	ldr	r0, [pc, #40]	; (80022e4 <seclectmenu+0x15d8>)
 80022bc:	f7fe fa1c 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <seclectmenu+0x15dc>)
 80022c2:	4808      	ldr	r0, [pc, #32]	; (80022e4 <seclectmenu+0x15d8>)
 80022c4:	f7fe fa7f 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2100      	movs	r1, #0
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <seclectmenu+0x15d8>)
 80022ce:	f7fe fa13 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 80022d2:	4906      	ldr	r1, [pc, #24]	; (80022ec <seclectmenu+0x15e0>)
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <seclectmenu+0x15d8>)
 80022d6:	f7fe fa76 	bl	80007c6 <CLCD_WriteString>
													uint8_t statusadd2 = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 80022e2:	e273      	b.n	80027cc <seclectmenu+0x1ac0>
 80022e4:	200003b8 	.word	0x200003b8
 80022e8:	08008240 	.word	0x08008240
 80022ec:	0800824c 	.word	0x0800824c
 80022f0:	0800838c 	.word	0x0800838c
 80022f4:	08008258 	.word	0x08008258
 80022f8:	08008264 	.word	0x08008264
 80022fc:	0800837c 	.word	0x0800837c
 8002300:	20000000 	.word	0x20000000
 8002304:	0800839c 	.word	0x0800839c
 8002308:	08008270 	.word	0x08008270
 800230c:	0800827c 	.word	0x0800827c
 8002310:	080083ac 	.word	0x080083ac
 8002314:	08008288 	.word	0x08008288
 8002318:	08008294 	.word	0x08008294
 800231c:	08008204 	.word	0x08008204
 8002320:	08008218 	.word	0x08008218
													{
														if (exitmenu == 0)
 8002324:	4bbc      	ldr	r3, [pc, #752]	; (8002618 <seclectmenu+0x190c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <seclectmenu+0x1630>
														{
															CLCD_Clear(&LCD1);
 800232c:	48bb      	ldr	r0, [pc, #748]	; (800261c <seclectmenu+0x1910>)
 800232e:	f7fe fa61 	bl	80007f4 <CLCD_Clear>
															HAL_Delay(1000);
 8002332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002336:	f001 fe75 	bl	8004024 <HAL_Delay>
															return;
 800233a:	e3d9      	b.n	8002af0 <seclectmenu+0x1de4>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 800233c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002340:	48b7      	ldr	r0, [pc, #732]	; (8002620 <seclectmenu+0x1914>)
 8002342:	f7fe fc95 	bl	8000c70 <checkbuton>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 808b 	beq.w	8002464 <seclectmenu+0x1758>
														{
															exitmenu = 15;
 800234e:	4bb2      	ldr	r3, [pc, #712]	; (8002618 <seclectmenu+0x190c>)
 8002350:	220f      	movs	r2, #15
 8002352:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002354:	7a3b      	ldrb	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 800235a:	7a3b      	ldrb	r3, [r7, #8]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d801      	bhi.n	8002364 <seclectmenu+0x1658>
 8002360:	7a3b      	ldrb	r3, [r7, #8]
 8002362:	e000      	b.n	8002366 <seclectmenu+0x165a>
 8002364:	2300      	movs	r3, #0
 8002366:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8002368:	7a3b      	ldrb	r3, [r7, #8]
 800236a:	3b01      	subs	r3, #1
 800236c:	2b03      	cmp	r3, #3
 800236e:	d863      	bhi.n	8002438 <seclectmenu+0x172c>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <seclectmenu+0x166c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023e1 	.word	0x080023e1
 8002384:	0800240d 	.word	0x0800240d
															{
															case 1:
																CLCD_Clear(&LCD1);
 8002388:	48a4      	ldr	r0, [pc, #656]	; (800261c <seclectmenu+0x1910>)
 800238a:	f7fe fa33 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	48a2      	ldr	r0, [pc, #648]	; (800261c <seclectmenu+0x1910>)
 8002394:	f7fe f9b0 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8002398:	49a2      	ldr	r1, [pc, #648]	; (8002624 <seclectmenu+0x1918>)
 800239a:	48a0      	ldr	r0, [pc, #640]	; (800261c <seclectmenu+0x1910>)
 800239c:	f7fe fa13 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2100      	movs	r1, #0
 80023a4:	489d      	ldr	r0, [pc, #628]	; (800261c <seclectmenu+0x1910>)
 80023a6:	f7fe f9a7 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 80023aa:	499f      	ldr	r1, [pc, #636]	; (8002628 <seclectmenu+0x191c>)
 80023ac:	489b      	ldr	r0, [pc, #620]	; (800261c <seclectmenu+0x1910>)
 80023ae:	f7fe fa0a 	bl	80007c6 <CLCD_WriteString>
																break;
 80023b2:	e058      	b.n	8002466 <seclectmenu+0x175a>
															case 2:
																CLCD_Clear(&LCD1);
 80023b4:	4899      	ldr	r0, [pc, #612]	; (800261c <seclectmenu+0x1910>)
 80023b6:	f7fe fa1d 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	4897      	ldr	r0, [pc, #604]	; (800261c <seclectmenu+0x1910>)
 80023c0:	f7fe f99a 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80023c4:	4999      	ldr	r1, [pc, #612]	; (800262c <seclectmenu+0x1920>)
 80023c6:	4895      	ldr	r0, [pc, #596]	; (800261c <seclectmenu+0x1910>)
 80023c8:	f7fe f9fd 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2100      	movs	r1, #0
 80023d0:	4892      	ldr	r0, [pc, #584]	; (800261c <seclectmenu+0x1910>)
 80023d2:	f7fe f991 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 80023d6:	4996      	ldr	r1, [pc, #600]	; (8002630 <seclectmenu+0x1924>)
 80023d8:	4890      	ldr	r0, [pc, #576]	; (800261c <seclectmenu+0x1910>)
 80023da:	f7fe f9f4 	bl	80007c6 <CLCD_WriteString>
																break;
 80023de:	e042      	b.n	8002466 <seclectmenu+0x175a>
															case 3:
																CLCD_Clear(&LCD1);
 80023e0:	488e      	ldr	r0, [pc, #568]	; (800261c <seclectmenu+0x1910>)
 80023e2:	f7fe fa07 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	488c      	ldr	r0, [pc, #560]	; (800261c <seclectmenu+0x1910>)
 80023ec:	f7fe f984 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80023f0:	4990      	ldr	r1, [pc, #576]	; (8002634 <seclectmenu+0x1928>)
 80023f2:	488a      	ldr	r0, [pc, #552]	; (800261c <seclectmenu+0x1910>)
 80023f4:	f7fe f9e7 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2100      	movs	r1, #0
 80023fc:	4887      	ldr	r0, [pc, #540]	; (800261c <seclectmenu+0x1910>)
 80023fe:	f7fe f97b 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8002402:	498d      	ldr	r1, [pc, #564]	; (8002638 <seclectmenu+0x192c>)
 8002404:	4885      	ldr	r0, [pc, #532]	; (800261c <seclectmenu+0x1910>)
 8002406:	f7fe f9de 	bl	80007c6 <CLCD_WriteString>
																break;
 800240a:	e02c      	b.n	8002466 <seclectmenu+0x175a>
															case 4:
																CLCD_Clear(&LCD1);
 800240c:	4883      	ldr	r0, [pc, #524]	; (800261c <seclectmenu+0x1910>)
 800240e:	f7fe f9f1 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	4881      	ldr	r0, [pc, #516]	; (800261c <seclectmenu+0x1910>)
 8002418:	f7fe f96e 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800241c:	4987      	ldr	r1, [pc, #540]	; (800263c <seclectmenu+0x1930>)
 800241e:	487f      	ldr	r0, [pc, #508]	; (800261c <seclectmenu+0x1910>)
 8002420:	f7fe f9d1 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002424:	2201      	movs	r2, #1
 8002426:	2100      	movs	r1, #0
 8002428:	487c      	ldr	r0, [pc, #496]	; (800261c <seclectmenu+0x1910>)
 800242a:	f7fe f965 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 800242e:	4984      	ldr	r1, [pc, #528]	; (8002640 <seclectmenu+0x1934>)
 8002430:	487a      	ldr	r0, [pc, #488]	; (800261c <seclectmenu+0x1910>)
 8002432:	f7fe f9c8 	bl	80007c6 <CLCD_WriteString>
																break;
 8002436:	e016      	b.n	8002466 <seclectmenu+0x175a>
															default:
																CLCD_Clear(&LCD1);
 8002438:	4878      	ldr	r0, [pc, #480]	; (800261c <seclectmenu+0x1910>)
 800243a:	f7fe f9db 	bl	80007f4 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	4876      	ldr	r0, [pc, #472]	; (800261c <seclectmenu+0x1910>)
 8002444:	f7fe f958 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8002448:	497b      	ldr	r1, [pc, #492]	; (8002638 <seclectmenu+0x192c>)
 800244a:	4874      	ldr	r0, [pc, #464]	; (800261c <seclectmenu+0x1910>)
 800244c:	f7fe f9bb 	bl	80007c6 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002450:	2201      	movs	r2, #1
 8002452:	2100      	movs	r1, #0
 8002454:	4871      	ldr	r0, [pc, #452]	; (800261c <seclectmenu+0x1910>)
 8002456:	f7fe f94f 	bl	80006f8 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 800245a:	497a      	ldr	r1, [pc, #488]	; (8002644 <seclectmenu+0x1938>)
 800245c:	486f      	ldr	r0, [pc, #444]	; (800261c <seclectmenu+0x1910>)
 800245e:	f7fe f9b2 	bl	80007c6 <CLCD_WriteString>
																break;
 8002462:	e000      	b.n	8002466 <seclectmenu+0x175a>
															}
														}
 8002464:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8002466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246a:	4877      	ldr	r0, [pc, #476]	; (8002648 <seclectmenu+0x193c>)
 800246c:	f7fe fc00 	bl	8000c70 <checkbuton>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 81a9 	beq.w	80027ca <seclectmenu+0x1abe>
														{
															exitmenu = 15;
 8002478:	4b67      	ldr	r3, [pc, #412]	; (8002618 <seclectmenu+0x190c>)
 800247a:	220f      	movs	r2, #15
 800247c:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800247e:	7b3b      	ldrb	r3, [r7, #12]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	b2da      	uxtb	r2, r3
 8002484:	7a3b      	ldrb	r3, [r7, #8]
 8002486:	4413      	add	r3, r2
 8002488:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 800248a:	7a3b      	ldrb	r3, [r7, #8]
 800248c:	3b01      	subs	r3, #1
 800248e:	2b03      	cmp	r3, #3
 8002490:	f200 8198 	bhi.w	80027c4 <seclectmenu+0x1ab8>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <seclectmenu+0x1790>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	08002563 	.word	0x08002563
 80024a4:	08002659 	.word	0x08002659
 80024a8:	0800270f 	.word	0x0800270f
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 80024ac:	797b      	ldrb	r3, [r7, #5]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fd90 	bl	8002fd4 <CheckKey>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d125      	bne.n	8002506 <seclectmenu+0x17fa>
																{
																	CLCD_Clear(&LCD1);
 80024ba:	4858      	ldr	r0, [pc, #352]	; (800261c <seclectmenu+0x1910>)
 80024bc:	f7fe f99a 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4855      	ldr	r0, [pc, #340]	; (800261c <seclectmenu+0x1910>)
 80024c6:	f7fe f917 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 80024ca:	4960      	ldr	r1, [pc, #384]	; (800264c <seclectmenu+0x1940>)
 80024cc:	4853      	ldr	r0, [pc, #332]	; (800261c <seclectmenu+0x1910>)
 80024ce:	f7fe f97a 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 80024d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d6:	f001 fda5 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80024da:	4850      	ldr	r0, [pc, #320]	; (800261c <seclectmenu+0x1910>)
 80024dc:	f7fe f98a 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	484d      	ldr	r0, [pc, #308]	; (800261c <seclectmenu+0x1910>)
 80024e6:	f7fe f907 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80024ea:	494e      	ldr	r1, [pc, #312]	; (8002624 <seclectmenu+0x1918>)
 80024ec:	484b      	ldr	r0, [pc, #300]	; (800261c <seclectmenu+0x1910>)
 80024ee:	f7fe f96a 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80024f2:	2201      	movs	r2, #1
 80024f4:	2100      	movs	r1, #0
 80024f6:	4849      	ldr	r0, [pc, #292]	; (800261c <seclectmenu+0x1910>)
 80024f8:	f7fe f8fe 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 80024fc:	494a      	ldr	r1, [pc, #296]	; (8002628 <seclectmenu+0x191c>)
 80024fe:	4847      	ldr	r0, [pc, #284]	; (800261c <seclectmenu+0x1910>)
 8002500:	f7fe f961 	bl	80007c6 <CLCD_WriteString>
 8002504:	e162      	b.n	80027cc <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8002506:	797b      	ldrb	r3, [r7, #5]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fd63 	bl	8002fd4 <CheckKey>
 800250e:	4603      	mov	r3, r0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd8d 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 8002516:	4841      	ldr	r0, [pc, #260]	; (800261c <seclectmenu+0x1910>)
 8002518:	f7fe f96c 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	483e      	ldr	r0, [pc, #248]	; (800261c <seclectmenu+0x1910>)
 8002522:	f7fe f8e9 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002526:	494a      	ldr	r1, [pc, #296]	; (8002650 <seclectmenu+0x1944>)
 8002528:	483c      	ldr	r0, [pc, #240]	; (800261c <seclectmenu+0x1910>)
 800252a:	f7fe f94c 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 800252e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002532:	f001 fd77 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002536:	4839      	ldr	r0, [pc, #228]	; (800261c <seclectmenu+0x1910>)
 8002538:	f7fe f95c 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	4836      	ldr	r0, [pc, #216]	; (800261c <seclectmenu+0x1910>)
 8002542:	f7fe f8d9 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <seclectmenu+0x1918>)
 8002548:	4834      	ldr	r0, [pc, #208]	; (800261c <seclectmenu+0x1910>)
 800254a:	f7fe f93c 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800254e:	2201      	movs	r2, #1
 8002550:	2100      	movs	r1, #0
 8002552:	4832      	ldr	r0, [pc, #200]	; (800261c <seclectmenu+0x1910>)
 8002554:	f7fe f8d0 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 8002558:	4933      	ldr	r1, [pc, #204]	; (8002628 <seclectmenu+0x191c>)
 800255a:	4830      	ldr	r0, [pc, #192]	; (800261c <seclectmenu+0x1910>)
 800255c:	f7fe f933 	bl	80007c6 <CLCD_WriteString>
																}
																break;
 8002560:	e134      	b.n	80027cc <seclectmenu+0x1ac0>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd35 	bl	8002fd4 <CheckKey>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d125      	bne.n	80025bc <seclectmenu+0x18b0>
																{
																	CLCD_Clear(&LCD1);
 8002570:	482a      	ldr	r0, [pc, #168]	; (800261c <seclectmenu+0x1910>)
 8002572:	f7fe f93f 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	4828      	ldr	r0, [pc, #160]	; (800261c <seclectmenu+0x1910>)
 800257c:	f7fe f8bc 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 8002580:	4934      	ldr	r1, [pc, #208]	; (8002654 <seclectmenu+0x1948>)
 8002582:	4826      	ldr	r0, [pc, #152]	; (800261c <seclectmenu+0x1910>)
 8002584:	f7fe f91f 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800258c:	f001 fd4a 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002590:	4822      	ldr	r0, [pc, #136]	; (800261c <seclectmenu+0x1910>)
 8002592:	f7fe f92f 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	4820      	ldr	r0, [pc, #128]	; (800261c <seclectmenu+0x1910>)
 800259c:	f7fe f8ac 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80025a0:	4922      	ldr	r1, [pc, #136]	; (800262c <seclectmenu+0x1920>)
 80025a2:	481e      	ldr	r0, [pc, #120]	; (800261c <seclectmenu+0x1910>)
 80025a4:	f7fe f90f 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80025a8:	2201      	movs	r2, #1
 80025aa:	2100      	movs	r1, #0
 80025ac:	481b      	ldr	r0, [pc, #108]	; (800261c <seclectmenu+0x1910>)
 80025ae:	f7fe f8a3 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 80025b2:	491f      	ldr	r1, [pc, #124]	; (8002630 <seclectmenu+0x1924>)
 80025b4:	4819      	ldr	r0, [pc, #100]	; (800261c <seclectmenu+0x1910>)
 80025b6:	f7fe f906 	bl	80007c6 <CLCD_WriteString>
 80025ba:	e107      	b.n	80027cc <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80025bc:	797b      	ldrb	r3, [r7, #5]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fd08 	bl	8002fd4 <CheckKey>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fd32 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 80025cc:	4813      	ldr	r0, [pc, #76]	; (800261c <seclectmenu+0x1910>)
 80025ce:	f7fe f911 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	4811      	ldr	r0, [pc, #68]	; (800261c <seclectmenu+0x1910>)
 80025d8:	f7fe f88e 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80025dc:	491c      	ldr	r1, [pc, #112]	; (8002650 <seclectmenu+0x1944>)
 80025de:	480f      	ldr	r0, [pc, #60]	; (800261c <seclectmenu+0x1910>)
 80025e0:	f7fe f8f1 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 80025e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e8:	f001 fd1c 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <seclectmenu+0x1910>)
 80025ee:	f7fe f901 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	4809      	ldr	r0, [pc, #36]	; (800261c <seclectmenu+0x1910>)
 80025f8:	f7fe f87e 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80025fc:	490b      	ldr	r1, [pc, #44]	; (800262c <seclectmenu+0x1920>)
 80025fe:	4807      	ldr	r0, [pc, #28]	; (800261c <seclectmenu+0x1910>)
 8002600:	f7fe f8e1 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <seclectmenu+0x1910>)
 800260a:	f7fe f875 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <seclectmenu+0x1924>)
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <seclectmenu+0x1910>)
 8002612:	f7fe f8d8 	bl	80007c6 <CLCD_WriteString>
																}
																break;
 8002616:	e0d9      	b.n	80027cc <seclectmenu+0x1ac0>
 8002618:	20000000 	.word	0x20000000
 800261c:	200003b8 	.word	0x200003b8
 8002620:	40010c00 	.word	0x40010c00
 8002624:	08008240 	.word	0x08008240
 8002628:	0800824c 	.word	0x0800824c
 800262c:	08008258 	.word	0x08008258
 8002630:	08008264 	.word	0x08008264
 8002634:	08008270 	.word	0x08008270
 8002638:	0800827c 	.word	0x0800827c
 800263c:	08008288 	.word	0x08008288
 8002640:	08008294 	.word	0x08008294
 8002644:	080082a0 	.word	0x080082a0
 8002648:	40010800 	.word	0x40010800
 800264c:	0800836c 	.word	0x0800836c
 8002650:	0800837c 	.word	0x0800837c
 8002654:	0800838c 	.word	0x0800838c
															case 3:
																if (CheckKey(keyadd2) == 0)
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fcba 	bl	8002fd4 <CheckKey>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d125      	bne.n	80026b2 <seclectmenu+0x19a6>
																{
																	CLCD_Clear(&LCD1);
 8002666:	48b5      	ldr	r0, [pc, #724]	; (800293c <seclectmenu+0x1c30>)
 8002668:	f7fe f8c4 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	48b2      	ldr	r0, [pc, #712]	; (800293c <seclectmenu+0x1c30>)
 8002672:	f7fe f841 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 8002676:	49b2      	ldr	r1, [pc, #712]	; (8002940 <seclectmenu+0x1c34>)
 8002678:	48b0      	ldr	r0, [pc, #704]	; (800293c <seclectmenu+0x1c30>)
 800267a:	f7fe f8a4 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 800267e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002682:	f001 fccf 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002686:	48ad      	ldr	r0, [pc, #692]	; (800293c <seclectmenu+0x1c30>)
 8002688:	f7fe f8b4 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	48aa      	ldr	r0, [pc, #680]	; (800293c <seclectmenu+0x1c30>)
 8002692:	f7fe f831 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002696:	49ab      	ldr	r1, [pc, #684]	; (8002944 <seclectmenu+0x1c38>)
 8002698:	48a8      	ldr	r0, [pc, #672]	; (800293c <seclectmenu+0x1c30>)
 800269a:	f7fe f894 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800269e:	2201      	movs	r2, #1
 80026a0:	2100      	movs	r1, #0
 80026a2:	48a6      	ldr	r0, [pc, #664]	; (800293c <seclectmenu+0x1c30>)
 80026a4:	f7fe f828 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 80026a8:	49a7      	ldr	r1, [pc, #668]	; (8002948 <seclectmenu+0x1c3c>)
 80026aa:	48a4      	ldr	r0, [pc, #656]	; (800293c <seclectmenu+0x1c30>)
 80026ac:	f7fe f88b 	bl	80007c6 <CLCD_WriteString>
 80026b0:	e08c      	b.n	80027cc <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80026b2:	797b      	ldrb	r3, [r7, #5]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fc8d 	bl	8002fd4 <CheckKey>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fcb7 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 80026c2:	489e      	ldr	r0, [pc, #632]	; (800293c <seclectmenu+0x1c30>)
 80026c4:	f7fe f896 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	489b      	ldr	r0, [pc, #620]	; (800293c <seclectmenu+0x1c30>)
 80026ce:	f7fe f813 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80026d2:	499e      	ldr	r1, [pc, #632]	; (800294c <seclectmenu+0x1c40>)
 80026d4:	4899      	ldr	r0, [pc, #612]	; (800293c <seclectmenu+0x1c30>)
 80026d6:	f7fe f876 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 80026da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026de:	f001 fca1 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80026e2:	4896      	ldr	r0, [pc, #600]	; (800293c <seclectmenu+0x1c30>)
 80026e4:	f7fe f886 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	4893      	ldr	r0, [pc, #588]	; (800293c <seclectmenu+0x1c30>)
 80026ee:	f7fe f803 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80026f2:	4994      	ldr	r1, [pc, #592]	; (8002944 <seclectmenu+0x1c38>)
 80026f4:	4891      	ldr	r0, [pc, #580]	; (800293c <seclectmenu+0x1c30>)
 80026f6:	f7fe f866 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026fa:	2201      	movs	r2, #1
 80026fc:	2100      	movs	r1, #0
 80026fe:	488f      	ldr	r0, [pc, #572]	; (800293c <seclectmenu+0x1c30>)
 8002700:	f7fd fffa 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 8002704:	4990      	ldr	r1, [pc, #576]	; (8002948 <seclectmenu+0x1c3c>)
 8002706:	488d      	ldr	r0, [pc, #564]	; (800293c <seclectmenu+0x1c30>)
 8002708:	f7fe f85d 	bl	80007c6 <CLCD_WriteString>
																}
																break;
 800270c:	e05e      	b.n	80027cc <seclectmenu+0x1ac0>
															case 4:
																if (CheckKey(keyadd2) == 0)
 800270e:	797b      	ldrb	r3, [r7, #5]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fc5f 	bl	8002fd4 <CheckKey>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d125      	bne.n	8002768 <seclectmenu+0x1a5c>
																{
																	CLCD_Clear(&LCD1);
 800271c:	4887      	ldr	r0, [pc, #540]	; (800293c <seclectmenu+0x1c30>)
 800271e:	f7fe f869 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	4885      	ldr	r0, [pc, #532]	; (800293c <seclectmenu+0x1c30>)
 8002728:	f7fd ffe6 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 800272c:	4988      	ldr	r1, [pc, #544]	; (8002950 <seclectmenu+0x1c44>)
 800272e:	4883      	ldr	r0, [pc, #524]	; (800293c <seclectmenu+0x1c30>)
 8002730:	f7fe f849 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002738:	f001 fc74 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800273c:	487f      	ldr	r0, [pc, #508]	; (800293c <seclectmenu+0x1c30>)
 800273e:	f7fe f859 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	487d      	ldr	r0, [pc, #500]	; (800293c <seclectmenu+0x1c30>)
 8002748:	f7fd ffd6 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800274c:	4981      	ldr	r1, [pc, #516]	; (8002954 <seclectmenu+0x1c48>)
 800274e:	487b      	ldr	r0, [pc, #492]	; (800293c <seclectmenu+0x1c30>)
 8002750:	f7fe f839 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002754:	2201      	movs	r2, #1
 8002756:	2100      	movs	r1, #0
 8002758:	4878      	ldr	r0, [pc, #480]	; (800293c <seclectmenu+0x1c30>)
 800275a:	f7fd ffcd 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 800275e:	497e      	ldr	r1, [pc, #504]	; (8002958 <seclectmenu+0x1c4c>)
 8002760:	4876      	ldr	r0, [pc, #472]	; (800293c <seclectmenu+0x1c30>)
 8002762:	f7fe f830 	bl	80007c6 <CLCD_WriteString>
 8002766:	e031      	b.n	80027cc <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8002768:	797b      	ldrb	r3, [r7, #5]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fc32 	bl	8002fd4 <CheckKey>
 8002770:	4603      	mov	r3, r0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fc5c 	bl	8003030 <removeuid>
																	CLCD_Clear(&LCD1);
 8002778:	4870      	ldr	r0, [pc, #448]	; (800293c <seclectmenu+0x1c30>)
 800277a:	f7fe f83b 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	486e      	ldr	r0, [pc, #440]	; (800293c <seclectmenu+0x1c30>)
 8002784:	f7fd ffb8 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002788:	4970      	ldr	r1, [pc, #448]	; (800294c <seclectmenu+0x1c40>)
 800278a:	486c      	ldr	r0, [pc, #432]	; (800293c <seclectmenu+0x1c30>)
 800278c:	f7fe f81b 	bl	80007c6 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002794:	f001 fc46 	bl	8004024 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002798:	4868      	ldr	r0, [pc, #416]	; (800293c <seclectmenu+0x1c30>)
 800279a:	f7fe f82b 	bl	80007f4 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	4866      	ldr	r0, [pc, #408]	; (800293c <seclectmenu+0x1c30>)
 80027a4:	f7fd ffa8 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80027a8:	496a      	ldr	r1, [pc, #424]	; (8002954 <seclectmenu+0x1c48>)
 80027aa:	4864      	ldr	r0, [pc, #400]	; (800293c <seclectmenu+0x1c30>)
 80027ac:	f7fe f80b 	bl	80007c6 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80027b0:	2201      	movs	r2, #1
 80027b2:	2100      	movs	r1, #0
 80027b4:	4861      	ldr	r0, [pc, #388]	; (800293c <seclectmenu+0x1c30>)
 80027b6:	f7fd ff9f 	bl	80006f8 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 80027ba:	4967      	ldr	r1, [pc, #412]	; (8002958 <seclectmenu+0x1c4c>)
 80027bc:	485f      	ldr	r0, [pc, #380]	; (800293c <seclectmenu+0x1c30>)
 80027be:	f7fe f802 	bl	80007c6 <CLCD_WriteString>
																}
																break;
 80027c2:	e003      	b.n	80027cc <seclectmenu+0x1ac0>
															default:
																back12 = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	71fb      	strb	r3, [r7, #7]
																break;
 80027c8:	e000      	b.n	80027cc <seclectmenu+0x1ac0>
															}
														}
 80027ca:	bf00      	nop
													while (back12 == 1)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f43f ada8 	beq.w	8002324 <seclectmenu+0x1618>
													}
													CLCD_Clear(&LCD1);
 80027d4:	4859      	ldr	r0, [pc, #356]	; (800293c <seclectmenu+0x1c30>)
 80027d6:	f7fe f80d 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	4857      	ldr	r0, [pc, #348]	; (800293c <seclectmenu+0x1c30>)
 80027e0:	f7fd ff8a 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 80027e4:	495d      	ldr	r1, [pc, #372]	; (800295c <seclectmenu+0x1c50>)
 80027e6:	4855      	ldr	r0, [pc, #340]	; (800293c <seclectmenu+0x1c30>)
 80027e8:	f7fd ffed 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2100      	movs	r1, #0
 80027f0:	4852      	ldr	r0, [pc, #328]	; (800293c <seclectmenu+0x1c30>)
 80027f2:	f7fd ff81 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 80027f6:	495a      	ldr	r1, [pc, #360]	; (8002960 <seclectmenu+0x1c54>)
 80027f8:	4850      	ldr	r0, [pc, #320]	; (800293c <seclectmenu+0x1c30>)
 80027fa:	f7fd ffe4 	bl	80007c6 <CLCD_WriteString>
													break;
 80027fe:	e003      	b.n	8002808 <seclectmenu+0x1afc>
												default:
													backrm10 = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	72fb      	strb	r3, [r7, #11]
													break;
 8002804:	e000      	b.n	8002808 <seclectmenu+0x1afc>
												}
											}
 8002806:	bf00      	nop
										while (backrm10 == 1)
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	2b01      	cmp	r3, #1
 800280c:	f43f a9f8 	beq.w	8001c00 <seclectmenu+0xef4>
										}
										CLCD_Clear(&LCD1);
 8002810:	484a      	ldr	r0, [pc, #296]	; (800293c <seclectmenu+0x1c30>)
 8002812:	f7fd ffef 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	4848      	ldr	r0, [pc, #288]	; (800293c <seclectmenu+0x1c30>)
 800281c:	f7fd ff6c 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 8002820:	4950      	ldr	r1, [pc, #320]	; (8002964 <seclectmenu+0x1c58>)
 8002822:	4846      	ldr	r0, [pc, #280]	; (800293c <seclectmenu+0x1c30>)
 8002824:	f7fd ffcf 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002828:	2201      	movs	r2, #1
 800282a:	2100      	movs	r1, #0
 800282c:	4843      	ldr	r0, [pc, #268]	; (800293c <seclectmenu+0x1c30>)
 800282e:	f7fd ff63 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8002832:	494d      	ldr	r1, [pc, #308]	; (8002968 <seclectmenu+0x1c5c>)
 8002834:	4841      	ldr	r0, [pc, #260]	; (800293c <seclectmenu+0x1c30>)
 8002836:	f7fd ffc6 	bl	80007c6 <CLCD_WriteString>
										break;
 800283a:	e0f0      	b.n	8002a1e <seclectmenu+0x1d12>
									case 1:
										CLCD_Clear(&LCD1);
 800283c:	483f      	ldr	r0, [pc, #252]	; (800293c <seclectmenu+0x1c30>)
 800283e:	f7fd ffd9 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	483d      	ldr	r0, [pc, #244]	; (800293c <seclectmenu+0x1c30>)
 8002848:	f7fd ff56 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "QUET THE");
 800284c:	4947      	ldr	r1, [pc, #284]	; (800296c <seclectmenu+0x1c60>)
 800284e:	483b      	ldr	r0, [pc, #236]	; (800293c <seclectmenu+0x1c30>)
 8002850:	f7fd ffb9 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002854:	2201      	movs	r2, #1
 8002856:	2100      	movs	r1, #0
 8002858:	4838      	ldr	r0, [pc, #224]	; (800293c <seclectmenu+0x1c30>)
 800285a:	f7fd ff4d 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800285e:	4944      	ldr	r1, [pc, #272]	; (8002970 <seclectmenu+0x1c64>)
 8002860:	4836      	ldr	r0, [pc, #216]	; (800293c <seclectmenu+0x1c30>)
 8002862:	f7fd ffb0 	bl	80007c6 <CLCD_WriteString>
										uint8_t rmquet = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 800286a:	e0ba      	b.n	80029e2 <seclectmenu+0x1cd6>
										{
											if (TM_MFRC522_Check(CardID) == MI_OK)
 800286c:	4841      	ldr	r0, [pc, #260]	; (8002974 <seclectmenu+0x1c68>)
 800286e:	f000 ff9d 	bl	80037ac <TM_MFRC522_Check>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 80aa 	bne.w	80029ce <seclectmenu+0x1cc2>
											{
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800287a:	2201      	movs	r2, #1
 800287c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002880:	483d      	ldr	r0, [pc, #244]	; (8002978 <seclectmenu+0x1c6c>)
 8002882:	f002 f8a0 	bl	80049c6 <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288c:	483a      	ldr	r0, [pc, #232]	; (8002978 <seclectmenu+0x1c6c>)
 800288e:	f002 f89a 	bl	80049c6 <HAL_GPIO_WritePin>
												HAL_Delay(delayloa);
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <seclectmenu+0x1c70>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fbc4 	bl	8004024 <HAL_Delay>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a2:	4835      	ldr	r0, [pc, #212]	; (8002978 <seclectmenu+0x1c6c>)
 80028a4:	f002 f88f 	bl	80049c6 <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ae:	4832      	ldr	r0, [pc, #200]	; (8002978 <seclectmenu+0x1c6c>)
 80028b0:	f002 f889 	bl	80049c6 <HAL_GPIO_WritePin>
												if (CheckListUID(CardID) != 0)
 80028b4:	482f      	ldr	r0, [pc, #188]	; (8002974 <seclectmenu+0x1c68>)
 80028b6:	f000 f967 	bl	8002b88 <CheckListUID>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d061      	beq.n	8002984 <seclectmenu+0x1c78>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 80028c0:	482c      	ldr	r0, [pc, #176]	; (8002974 <seclectmenu+0x1c68>)
 80028c2:	f000 f961 	bl	8002b88 <CheckListUID>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fb83 	bl	8002fd4 <CheckKey>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fbad 	bl	8003030 <removeuid>
													CLCD_Clear(&LCD1);
 80028d6:	4819      	ldr	r0, [pc, #100]	; (800293c <seclectmenu+0x1c30>)
 80028d8:	f7fd ff8c 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	4816      	ldr	r0, [pc, #88]	; (800293c <seclectmenu+0x1c30>)
 80028e2:	f7fd ff09 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80028e6:	4919      	ldr	r1, [pc, #100]	; (800294c <seclectmenu+0x1c40>)
 80028e8:	4814      	ldr	r0, [pc, #80]	; (800293c <seclectmenu+0x1c30>)
 80028ea:	f7fd ff6c 	bl	80007c6 <CLCD_WriteString>
													HAL_Delay(1000);
 80028ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f2:	f001 fb97 	bl	8004024 <HAL_Delay>
													if (checkcountUID() == 0)
 80028f6:	f000 f977 	bl	8002be8 <checkcountUID>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <seclectmenu+0x1c04>
													{
														startadd();
 8002900:	f000 fba4 	bl	800304c <startadd>
														rmquet = 1;
 8002904:	2301      	movs	r3, #1
 8002906:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <seclectmenu+0x1c74>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
														return;
 800290e:	e0ef      	b.n	8002af0 <seclectmenu+0x1de4>
													}else{
														CLCD_Clear(&LCD1);
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <seclectmenu+0x1c30>)
 8002912:	f7fd ff6f 	bl	80007f4 <CLCD_Clear>
														CLCD_SetCursor(&LCD1, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	4808      	ldr	r0, [pc, #32]	; (800293c <seclectmenu+0x1c30>)
 800291c:	f7fd feec 	bl	80006f8 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "QUET THE");
 8002920:	4912      	ldr	r1, [pc, #72]	; (800296c <seclectmenu+0x1c60>)
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <seclectmenu+0x1c30>)
 8002924:	f7fd ff4f 	bl	80007c6 <CLCD_WriteString>
														CLCD_SetCursor(&LCD1, 0, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	2100      	movs	r1, #0
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <seclectmenu+0x1c30>)
 800292e:	f7fd fee3 	bl	80006f8 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "=>  BACK");
 8002932:	490f      	ldr	r1, [pc, #60]	; (8002970 <seclectmenu+0x1c64>)
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <seclectmenu+0x1c30>)
 8002936:	f7fd ff46 	bl	80007c6 <CLCD_WriteString>
 800293a:	e048      	b.n	80029ce <seclectmenu+0x1cc2>
 800293c:	200003b8 	.word	0x200003b8
 8002940:	0800839c 	.word	0x0800839c
 8002944:	08008270 	.word	0x08008270
 8002948:	0800827c 	.word	0x0800827c
 800294c:	0800837c 	.word	0x0800837c
 8002950:	080083ac 	.word	0x080083ac
 8002954:	08008288 	.word	0x08008288
 8002958:	08008294 	.word	0x08008294
 800295c:	080081f0 	.word	0x080081f0
 8002960:	08008228 	.word	0x08008228
 8002964:	0800833c 	.word	0x0800833c
 8002968:	08008348 	.word	0x08008348
 800296c:	080083bc 	.word	0x080083bc
 8002970:	080082a0 	.word	0x080082a0
 8002974:	200003a8 	.word	0x200003a8
 8002978:	40010c00 	.word	0x40010c00
 800297c:	20000018 	.word	0x20000018
 8002980:	20000000 	.word	0x20000000
													}

												}
												else
												{
													CLCD_Clear(&LCD1);
 8002984:	485c      	ldr	r0, [pc, #368]	; (8002af8 <seclectmenu+0x1dec>)
 8002986:	f7fd ff35 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	485a      	ldr	r0, [pc, #360]	; (8002af8 <seclectmenu+0x1dec>)
 8002990:	f7fd feb2 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002994:	4959      	ldr	r1, [pc, #356]	; (8002afc <seclectmenu+0x1df0>)
 8002996:	4858      	ldr	r0, [pc, #352]	; (8002af8 <seclectmenu+0x1dec>)
 8002998:	f7fd ff15 	bl	80007c6 <CLCD_WriteString>
													HAL_Delay(1000);
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f001 fb40 	bl	8004024 <HAL_Delay>
													CLCD_Clear(&LCD1);
 80029a4:	4854      	ldr	r0, [pc, #336]	; (8002af8 <seclectmenu+0x1dec>)
 80029a6:	f7fd ff25 	bl	80007f4 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	4852      	ldr	r0, [pc, #328]	; (8002af8 <seclectmenu+0x1dec>)
 80029b0:	f7fd fea2 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "QUET THE");
 80029b4:	4952      	ldr	r1, [pc, #328]	; (8002b00 <seclectmenu+0x1df4>)
 80029b6:	4850      	ldr	r0, [pc, #320]	; (8002af8 <seclectmenu+0x1dec>)
 80029b8:	f7fd ff05 	bl	80007c6 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80029bc:	2201      	movs	r2, #1
 80029be:	2100      	movs	r1, #0
 80029c0:	484d      	ldr	r0, [pc, #308]	; (8002af8 <seclectmenu+0x1dec>)
 80029c2:	f7fd fe99 	bl	80006f8 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  BACK");
 80029c6:	494f      	ldr	r1, [pc, #316]	; (8002b04 <seclectmenu+0x1df8>)
 80029c8:	484b      	ldr	r0, [pc, #300]	; (8002af8 <seclectmenu+0x1dec>)
 80029ca:	f7fd fefc 	bl	80007c6 <CLCD_WriteString>
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 80029ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d2:	484d      	ldr	r0, [pc, #308]	; (8002b08 <seclectmenu+0x1dfc>)
 80029d4:	f7fe f94c 	bl	8000c70 <checkbuton>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <seclectmenu+0x1cd6>
											{
												rmquet = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80029e2:	79bb      	ldrb	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af41 	bne.w	800286c <seclectmenu+0x1b60>
											}
										}
										CLCD_Clear(&LCD1);
 80029ea:	4843      	ldr	r0, [pc, #268]	; (8002af8 <seclectmenu+0x1dec>)
 80029ec:	f7fd ff02 	bl	80007f4 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	4840      	ldr	r0, [pc, #256]	; (8002af8 <seclectmenu+0x1dec>)
 80029f6:	f7fd fe7f 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 80029fa:	4944      	ldr	r1, [pc, #272]	; (8002b0c <seclectmenu+0x1e00>)
 80029fc:	483e      	ldr	r0, [pc, #248]	; (8002af8 <seclectmenu+0x1dec>)
 80029fe:	f7fd fee2 	bl	80007c6 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002a02:	2201      	movs	r2, #1
 8002a04:	2100      	movs	r1, #0
 8002a06:	483c      	ldr	r0, [pc, #240]	; (8002af8 <seclectmenu+0x1dec>)
 8002a08:	f7fd fe76 	bl	80006f8 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8002a0c:	4940      	ldr	r1, [pc, #256]	; (8002b10 <seclectmenu+0x1e04>)
 8002a0e:	483a      	ldr	r0, [pc, #232]	; (8002af8 <seclectmenu+0x1dec>)
 8002a10:	f7fd fed9 	bl	80007c6 <CLCD_WriteString>
										break;
 8002a14:	e003      	b.n	8002a1e <seclectmenu+0x1d12>
									default:
										backrm1 = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	737b      	strb	r3, [r7, #13]
										break;
 8002a1a:	e000      	b.n	8002a1e <seclectmenu+0x1d12>
									}
								}
 8002a1c:	bf00      	nop
							while (backrm1 == 1)
 8002a1e:	7b7b      	ldrb	r3, [r7, #13]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f43f a856 	beq.w	8001ad2 <seclectmenu+0xdc6>
							}
							CLCD_Clear(&LCD1);
 8002a26:	4834      	ldr	r0, [pc, #208]	; (8002af8 <seclectmenu+0x1dec>)
 8002a28:	f7fd fee4 	bl	80007f4 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4831      	ldr	r0, [pc, #196]	; (8002af8 <seclectmenu+0x1dec>)
 8002a32:	f7fd fe61 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 8002a36:	4937      	ldr	r1, [pc, #220]	; (8002b14 <seclectmenu+0x1e08>)
 8002a38:	482f      	ldr	r0, [pc, #188]	; (8002af8 <seclectmenu+0x1dec>)
 8002a3a:	f7fd fec4 	bl	80007c6 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2100      	movs	r1, #0
 8002a42:	482d      	ldr	r0, [pc, #180]	; (8002af8 <seclectmenu+0x1dec>)
 8002a44:	f7fd fe58 	bl	80006f8 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8002a48:	4933      	ldr	r1, [pc, #204]	; (8002b18 <seclectmenu+0x1e0c>)
 8002a4a:	482b      	ldr	r0, [pc, #172]	; (8002af8 <seclectmenu+0x1dec>)
 8002a4c:	f7fd febb 	bl	80007c6 <CLCD_WriteString>
							break;
 8002a50:	e00b      	b.n	8002a6a <seclectmenu+0x1d5e>
						case 1:
							resetflash();
 8002a52:	f000 fc79 	bl	8003348 <resetflash>
							startadd();
 8002a56:	f000 faf9 	bl	800304c <startadd>
							exitmenu = 0;
 8002a5a:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <seclectmenu+0x1e10>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
							break;
 8002a60:	e003      	b.n	8002a6a <seclectmenu+0x1d5e>
						default:
							backrm = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
							break;
 8002a66:	e000      	b.n	8002a6a <seclectmenu+0x1d5e>
						}
					}
 8002a68:	bf00      	nop
				while (backrm == 1)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f43e af6d 	beq.w	800194c <seclectmenu+0xc40>
				}
				CLCD_Clear(&LCD1);
 8002a72:	4821      	ldr	r0, [pc, #132]	; (8002af8 <seclectmenu+0x1dec>)
 8002a74:	f7fd febe 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	481e      	ldr	r0, [pc, #120]	; (8002af8 <seclectmenu+0x1dec>)
 8002a7e:	f7fd fe3b 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8002a82:	4927      	ldr	r1, [pc, #156]	; (8002b20 <seclectmenu+0x1e14>)
 8002a84:	481c      	ldr	r0, [pc, #112]	; (8002af8 <seclectmenu+0x1dec>)
 8002a86:	f7fd fe9e 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	481a      	ldr	r0, [pc, #104]	; (8002af8 <seclectmenu+0x1dec>)
 8002a90:	f7fd fe32 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8002a94:	4923      	ldr	r1, [pc, #140]	; (8002b24 <seclectmenu+0x1e18>)
 8002a96:	4818      	ldr	r0, [pc, #96]	; (8002af8 <seclectmenu+0x1dec>)
 8002a98:	f7fd fe95 	bl	80007c6 <CLCD_WriteString>
				break;
 8002a9c:	e01c      	b.n	8002ad8 <seclectmenu+0x1dcc>
			case 2:
				checkthe();
 8002a9e:	f000 f987 	bl	8002db0 <checkthe>
				CLCD_Clear(&LCD1);
 8002aa2:	4815      	ldr	r0, [pc, #84]	; (8002af8 <seclectmenu+0x1dec>)
 8002aa4:	f7fd fea6 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4812      	ldr	r0, [pc, #72]	; (8002af8 <seclectmenu+0x1dec>)
 8002aae:	f7fd fe23 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8002ab2:	491d      	ldr	r1, [pc, #116]	; (8002b28 <seclectmenu+0x1e1c>)
 8002ab4:	4810      	ldr	r0, [pc, #64]	; (8002af8 <seclectmenu+0x1dec>)
 8002ab6:	f7fd fe86 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002aba:	2201      	movs	r2, #1
 8002abc:	2100      	movs	r1, #0
 8002abe:	480e      	ldr	r0, [pc, #56]	; (8002af8 <seclectmenu+0x1dec>)
 8002ac0:	f7fd fe1a 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8002ac4:	4919      	ldr	r1, [pc, #100]	; (8002b2c <seclectmenu+0x1e20>)
 8002ac6:	480c      	ldr	r0, [pc, #48]	; (8002af8 <seclectmenu+0x1dec>)
 8002ac8:	f7fd fe7d 	bl	80007c6 <CLCD_WriteString>
				break;
 8002acc:	e004      	b.n	8002ad8 <seclectmenu+0x1dcc>
				break;
			default:
				exitmenu = 0;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <seclectmenu+0x1e10>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
				break;
 8002ad4:	e000      	b.n	8002ad8 <seclectmenu+0x1dcc>
			}
		}
 8002ad6:	bf00      	nop
	while (exitmenu )
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <seclectmenu+0x1e10>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47e a934 	bne.w	8000d4a <seclectmenu+0x3e>
	}
	CLCD_Clear(&LCD1);
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <seclectmenu+0x1dec>)
 8002ae4:	f7fd fe86 	bl	80007f4 <CLCD_Clear>
	HAL_Delay(1000);
 8002ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aec:	f001 fa9a 	bl	8004024 <HAL_Delay>
}
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200003b8 	.word	0x200003b8
 8002afc:	080083c8 	.word	0x080083c8
 8002b00:	080083bc 	.word	0x080083bc
 8002b04:	080082a0 	.word	0x080082a0
 8002b08:	40010800 	.word	0x40010800
 8002b0c:	08008354 	.word	0x08008354
 8002b10:	08008360 	.word	0x08008360
 8002b14:	0800830c 	.word	0x0800830c
 8002b18:	0800831c 	.word	0x0800831c
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	08008188 	.word	0x08008188
 8002b24:	080081b4 	.word	0x080081b4
 8002b28:	080081a8 	.word	0x080081a8
 8002b2c:	080081c0 	.word	0x080081c0

08002b30 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4619      	mov	r1, r3
 8002b42:	6838      	ldr	r0, [r7, #0]
 8002b44:	f7fd fb80 	bl	8000248 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002b48:	7cbb      	ldrb	r3, [r7, #18]
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d001      	beq.n	8002b52 <CheckUID+0x22>
		return 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e016      	b.n	8002b80 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]
 8002b56:	e00f      	b.n	8002b78 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	3318      	adds	r3, #24
 8002b64:	443b      	add	r3, r7
 8002b66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <CheckUID+0x42>
			return 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e006      	b.n	8002b80 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	3301      	adds	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d9ec      	bls.n	8002b58 <CheckUID+0x28>
	}
	return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <CheckListUID+0x5c>)
 8002b92:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b94:	e018      	b.n	8002bc8 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3306      	adds	r3, #6
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fb3b 	bl	8000216 <Flash_Read_2Byte>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10a      	bne.n	8002bc2 <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffbe 	bl	8002b30 <CheckUID>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d103      	bne.n	8002bc2 <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3305      	adds	r3, #5
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	e00b      	b.n	8002bda <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3305      	adds	r3, #5
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb16 	bl	80001fe <Flash_Read_Byte>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d1de      	bne.n	8002b96 <CheckListUID+0xe>
	}
	return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	0800a000 	.word	0x0800a000

08002be8 <checkcountUID>:
uint8_t checkcountUID(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <checkcountUID+0x60>)
 8002bf0:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002bf6:	e01a      	b.n	8002c2e <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3306      	adds	r3, #6
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fb0a 	bl	8000216 <Flash_Read_2Byte>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10c      	bne.n	8002c28 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3305      	adds	r3, #5
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd faf3 	bl	80001fe <Flash_Read_Byte>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <checkcountUID+0x40>
			{
				count++;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	3301      	adds	r3, #1
 8002c26:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3305      	adds	r3, #5
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fae3 	bl	80001fe <Flash_Read_Byte>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2bff      	cmp	r3, #255	; 0xff
 8002c3c:	d1dc      	bne.n	8002bf8 <checkcountUID+0x10>
	}
	return count;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	0800a000 	.word	0x0800a000

08002c4c <adduid>:
void adduid(uint8_t key)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002c56:	f000 faa1 	bl	800319c <setaddress>
	CLCD_Clear(&LCD1);
 8002c5a:	484a      	ldr	r0, [pc, #296]	; (8002d84 <adduid+0x138>)
 8002c5c:	f7fd fdca 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	4847      	ldr	r0, [pc, #284]	; (8002d84 <adduid+0x138>)
 8002c66:	f7fd fd47 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002c6a:	4947      	ldr	r1, [pc, #284]	; (8002d88 <adduid+0x13c>)
 8002c6c:	4845      	ldr	r0, [pc, #276]	; (8002d84 <adduid+0x138>)
 8002c6e:	f7fd fdaa 	bl	80007c6 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2100      	movs	r1, #0
 8002c76:	4843      	ldr	r0, [pc, #268]	; (8002d84 <adduid+0x138>)
 8002c78:	f7fd fd3e 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002c7c:	4943      	ldr	r1, [pc, #268]	; (8002d8c <adduid+0x140>)
 8002c7e:	4841      	ldr	r0, [pc, #260]	; (8002d84 <adduid+0x138>)
 8002c80:	f7fd fda1 	bl	80007c6 <CLCD_WriteString>
	while (exitmenu)
 8002c84:	e075      	b.n	8002d72 <adduid+0x126>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c86:	4842      	ldr	r0, [pc, #264]	; (8002d90 <adduid+0x144>)
 8002c88:	f000 fd90 	bl	80037ac <TM_MFRC522_Check>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d167      	bne.n	8002d62 <adduid+0x116>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c98:	483e      	ldr	r0, [pc, #248]	; (8002d94 <adduid+0x148>)
 8002c9a:	f001 fe94 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ca4:	483b      	ldr	r0, [pc, #236]	; (8002d94 <adduid+0x148>)
 8002ca6:	f001 fe8e 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <adduid+0x14c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f9b8 	bl	8004024 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cba:	4836      	ldr	r0, [pc, #216]	; (8002d94 <adduid+0x148>)
 8002cbc:	f001 fe83 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cc6:	4833      	ldr	r0, [pc, #204]	; (8002d94 <adduid+0x148>)
 8002cc8:	f001 fe7d 	bl	80049c6 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002ccc:	4830      	ldr	r0, [pc, #192]	; (8002d90 <adduid+0x144>)
 8002cce:	f7ff ff5b 	bl	8002b88 <CheckListUID>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d11f      	bne.n	8002d18 <adduid+0xcc>
			{
				CardID[5] = key;
 8002cd8:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <adduid+0x144>)
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <adduid+0x150>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2206      	movs	r2, #6
 8002ce4:	492a      	ldr	r1, [pc, #168]	; (8002d90 <adduid+0x144>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fa66 	bl	80001b8 <Flash_Write_Array>
				AddressUID += 8;
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <adduid+0x150>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <adduid+0x150>)
 8002cf4:	6013      	str	r3, [r2, #0]
				CLCD_Clear(&LCD1);
 8002cf6:	4823      	ldr	r0, [pc, #140]	; (8002d84 <adduid+0x138>)
 8002cf8:	f7fd fd7c 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4820      	ldr	r0, [pc, #128]	; (8002d84 <adduid+0x138>)
 8002d02:	f7fd fcf9 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THANH CONG");
 8002d06:	4926      	ldr	r1, [pc, #152]	; (8002da0 <adduid+0x154>)
 8002d08:	481e      	ldr	r0, [pc, #120]	; (8002d84 <adduid+0x138>)
 8002d0a:	f7fd fd5c 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(1000);
 8002d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d12:	f001 f987 	bl	8004024 <HAL_Delay>
				return;
 8002d16:	e032      	b.n	8002d7e <adduid+0x132>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8002d18:	481a      	ldr	r0, [pc, #104]	; (8002d84 <adduid+0x138>)
 8002d1a:	f7fd fd6b 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	4818      	ldr	r0, [pc, #96]	; (8002d84 <adduid+0x138>)
 8002d24:	f7fd fce8 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8002d28:	491e      	ldr	r1, [pc, #120]	; (8002da4 <adduid+0x158>)
 8002d2a:	4816      	ldr	r0, [pc, #88]	; (8002d84 <adduid+0x138>)
 8002d2c:	f7fd fd4b 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(1000);
 8002d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d34:	f001 f976 	bl	8004024 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002d38:	4812      	ldr	r0, [pc, #72]	; (8002d84 <adduid+0x138>)
 8002d3a:	f7fd fd5b 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	4810      	ldr	r0, [pc, #64]	; (8002d84 <adduid+0x138>)
 8002d44:	f7fd fcd8 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002d48:	490f      	ldr	r1, [pc, #60]	; (8002d88 <adduid+0x13c>)
 8002d4a:	480e      	ldr	r0, [pc, #56]	; (8002d84 <adduid+0x138>)
 8002d4c:	f7fd fd3b 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002d50:	2201      	movs	r2, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	480b      	ldr	r0, [pc, #44]	; (8002d84 <adduid+0x138>)
 8002d56:	f7fd fccf 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002d5a:	490c      	ldr	r1, [pc, #48]	; (8002d8c <adduid+0x140>)
 8002d5c:	4809      	ldr	r0, [pc, #36]	; (8002d84 <adduid+0x138>)
 8002d5e:	f7fd fd32 	bl	80007c6 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d66:	4810      	ldr	r0, [pc, #64]	; (8002da8 <adduid+0x15c>)
 8002d68:	f7fd ff82 	bl	8000c70 <checkbuton>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d004      	beq.n	8002d7c <adduid+0x130>
	while (exitmenu)
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <adduid+0x160>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d185      	bne.n	8002c86 <adduid+0x3a>
 8002d7a:	e000      	b.n	8002d7e <adduid+0x132>
		{
			return;
 8002d7c:	bf00      	nop
		}
	}
}
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200003b8 	.word	0x200003b8
 8002d88:	080083bc 	.word	0x080083bc
 8002d8c:	080082a0 	.word	0x080082a0
 8002d90:	200003a8 	.word	0x200003a8
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	20000018 	.word	0x20000018
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	080083d8 	.word	0x080083d8
 8002da4:	080083e4 	.word	0x080083e4
 8002da8:	40010800 	.word	0x40010800
 8002dac:	20000000 	.word	0x20000000

08002db0 <checkthe>:
void checkthe(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002db6:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <checkthe+0x1e8>)
 8002db8:	221e      	movs	r2, #30
 8002dba:	701a      	strb	r2, [r3, #0]
	CLCD_Clear(&LCD1);
 8002dbc:	4877      	ldr	r0, [pc, #476]	; (8002f9c <checkthe+0x1ec>)
 8002dbe:	f7fd fd19 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4875      	ldr	r0, [pc, #468]	; (8002f9c <checkthe+0x1ec>)
 8002dc8:	f7fd fc96 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002dcc:	4974      	ldr	r1, [pc, #464]	; (8002fa0 <checkthe+0x1f0>)
 8002dce:	4873      	ldr	r0, [pc, #460]	; (8002f9c <checkthe+0x1ec>)
 8002dd0:	f7fd fcf9 	bl	80007c6 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4870      	ldr	r0, [pc, #448]	; (8002f9c <checkthe+0x1ec>)
 8002dda:	f7fd fc8d 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002dde:	4971      	ldr	r1, [pc, #452]	; (8002fa4 <checkthe+0x1f4>)
 8002de0:	486e      	ldr	r0, [pc, #440]	; (8002f9c <checkthe+0x1ec>)
 8002de2:	f7fd fcf0 	bl	80007c6 <CLCD_WriteString>
	while (exitmenu )
 8002de6:	e0cc      	b.n	8002f82 <checkthe+0x1d2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002de8:	486f      	ldr	r0, [pc, #444]	; (8002fa8 <checkthe+0x1f8>)
 8002dea:	f000 fcdf 	bl	80037ac <TM_MFRC522_Check>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 80be 	bne.w	8002f72 <checkthe+0x1c2>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002df6:	2201      	movs	r2, #1
 8002df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dfc:	486b      	ldr	r0, [pc, #428]	; (8002fac <checkthe+0x1fc>)
 8002dfe:	f001 fde2 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002e02:	2201      	movs	r2, #1
 8002e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e08:	4868      	ldr	r0, [pc, #416]	; (8002fac <checkthe+0x1fc>)
 8002e0a:	f001 fddc 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002e0e:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <checkthe+0x200>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 f906 	bl	8004024 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e1e:	4863      	ldr	r0, [pc, #396]	; (8002fac <checkthe+0x1fc>)
 8002e20:	f001 fdd1 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e2a:	4860      	ldr	r0, [pc, #384]	; (8002fac <checkthe+0x1fc>)
 8002e2c:	f001 fdcb 	bl	80049c6 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002e30:	485d      	ldr	r0, [pc, #372]	; (8002fa8 <checkthe+0x1f8>)
 8002e32:	f7ff fea9 	bl	8002b88 <CheckListUID>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d129      	bne.n	8002e90 <checkthe+0xe0>
			{
				CLCD_Clear(&LCD1);
 8002e3c:	4857      	ldr	r0, [pc, #348]	; (8002f9c <checkthe+0x1ec>)
 8002e3e:	f7fd fcd9 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	4855      	ldr	r0, [pc, #340]	; (8002f9c <checkthe+0x1ec>)
 8002e48:	f7fd fc56 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002e4c:	4959      	ldr	r1, [pc, #356]	; (8002fb4 <checkthe+0x204>)
 8002e4e:	4853      	ldr	r0, [pc, #332]	; (8002f9c <checkthe+0x1ec>)
 8002e50:	f7fd fcb9 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e58:	f001 f8e4 	bl	8004024 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002e5c:	484f      	ldr	r0, [pc, #316]	; (8002f9c <checkthe+0x1ec>)
 8002e5e:	f7fd fcc9 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	484d      	ldr	r0, [pc, #308]	; (8002f9c <checkthe+0x1ec>)
 8002e68:	f7fd fc46 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002e6c:	494c      	ldr	r1, [pc, #304]	; (8002fa0 <checkthe+0x1f0>)
 8002e6e:	484b      	ldr	r0, [pc, #300]	; (8002f9c <checkthe+0x1ec>)
 8002e70:	f7fd fca9 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002e74:	2201      	movs	r2, #1
 8002e76:	2100      	movs	r1, #0
 8002e78:	4848      	ldr	r0, [pc, #288]	; (8002f9c <checkthe+0x1ec>)
 8002e7a:	f7fd fc3d 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002e7e:	4949      	ldr	r1, [pc, #292]	; (8002fa4 <checkthe+0x1f4>)
 8002e80:	4846      	ldr	r0, [pc, #280]	; (8002f9c <checkthe+0x1ec>)
 8002e82:	f7fd fca0 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e8a:	f001 f8cb 	bl	8004024 <HAL_Delay>
 8002e8e:	e070      	b.n	8002f72 <checkthe+0x1c2>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002e90:	4845      	ldr	r0, [pc, #276]	; (8002fa8 <checkthe+0x1f8>)
 8002e92:	f7ff fe79 	bl	8002b88 <CheckListUID>
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8002ea8:	483c      	ldr	r0, [pc, #240]	; (8002f9c <checkthe+0x1ec>)
 8002eaa:	f7fd fca3 	bl	80007f4 <CLCD_Clear>
				switch (key1)
 8002eae:	797b      	ldrb	r3, [r7, #5]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d109      	bne.n	8002ec8 <checkthe+0x118>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4838      	ldr	r0, [pc, #224]	; (8002f9c <checkthe+0x1ec>)
 8002eba:	f7fd fc1d 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8002ebe:	493e      	ldr	r1, [pc, #248]	; (8002fb8 <checkthe+0x208>)
 8002ec0:	4836      	ldr	r0, [pc, #216]	; (8002f9c <checkthe+0x1ec>)
 8002ec2:	f7fd fc80 	bl	80007c6 <CLCD_WriteString>
					break;
 8002ec6:	e009      	b.n	8002edc <checkthe+0x12c>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4833      	ldr	r0, [pc, #204]	; (8002f9c <checkthe+0x1ec>)
 8002ece:	f7fd fc13 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE TRE EM");
 8002ed2:	493a      	ldr	r1, [pc, #232]	; (8002fbc <checkthe+0x20c>)
 8002ed4:	4831      	ldr	r0, [pc, #196]	; (8002f9c <checkthe+0x1ec>)
 8002ed6:	f7fd fc76 	bl	80007c6 <CLCD_WriteString>
					break;
 8002eda:	bf00      	nop
				}
				switch (key2)
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d01a      	beq.n	8002f18 <checkthe+0x168>
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	dc22      	bgt.n	8002f2c <checkthe+0x17c>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <checkthe+0x140>
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d00a      	beq.n	8002f04 <checkthe+0x154>
 8002eee:	e01d      	b.n	8002f2c <checkthe+0x17c>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4829      	ldr	r0, [pc, #164]	; (8002f9c <checkthe+0x1ec>)
 8002ef6:	f7fd fbff 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 1");
 8002efa:	4931      	ldr	r1, [pc, #196]	; (8002fc0 <checkthe+0x210>)
 8002efc:	4827      	ldr	r0, [pc, #156]	; (8002f9c <checkthe+0x1ec>)
 8002efe:	f7fd fc62 	bl	80007c6 <CLCD_WriteString>
					break;
 8002f02:	e01d      	b.n	8002f40 <checkthe+0x190>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f04:	2201      	movs	r2, #1
 8002f06:	2100      	movs	r1, #0
 8002f08:	4824      	ldr	r0, [pc, #144]	; (8002f9c <checkthe+0x1ec>)
 8002f0a:	f7fd fbf5 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 2");
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <checkthe+0x214>)
 8002f10:	4822      	ldr	r0, [pc, #136]	; (8002f9c <checkthe+0x1ec>)
 8002f12:	f7fd fc58 	bl	80007c6 <CLCD_WriteString>
					break;
 8002f16:	e013      	b.n	8002f40 <checkthe+0x190>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	481f      	ldr	r0, [pc, #124]	; (8002f9c <checkthe+0x1ec>)
 8002f1e:	f7fd fbeb 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 3");
 8002f22:	4929      	ldr	r1, [pc, #164]	; (8002fc8 <checkthe+0x218>)
 8002f24:	481d      	ldr	r0, [pc, #116]	; (8002f9c <checkthe+0x1ec>)
 8002f26:	f7fd fc4e 	bl	80007c6 <CLCD_WriteString>
					break;
 8002f2a:	e009      	b.n	8002f40 <checkthe+0x190>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2100      	movs	r1, #0
 8002f30:	481a      	ldr	r0, [pc, #104]	; (8002f9c <checkthe+0x1ec>)
 8002f32:	f7fd fbe1 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 4");
 8002f36:	4925      	ldr	r1, [pc, #148]	; (8002fcc <checkthe+0x21c>)
 8002f38:	4818      	ldr	r0, [pc, #96]	; (8002f9c <checkthe+0x1ec>)
 8002f3a:	f7fd fc44 	bl	80007c6 <CLCD_WriteString>
					break;
 8002f3e:	bf00      	nop
				}
				HAL_Delay(1000);
 8002f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f44:	f001 f86e 	bl	8004024 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002f48:	4814      	ldr	r0, [pc, #80]	; (8002f9c <checkthe+0x1ec>)
 8002f4a:	f7fd fc53 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	4812      	ldr	r0, [pc, #72]	; (8002f9c <checkthe+0x1ec>)
 8002f54:	f7fd fbd0 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002f58:	4911      	ldr	r1, [pc, #68]	; (8002fa0 <checkthe+0x1f0>)
 8002f5a:	4810      	ldr	r0, [pc, #64]	; (8002f9c <checkthe+0x1ec>)
 8002f5c:	f7fd fc33 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2100      	movs	r1, #0
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <checkthe+0x1ec>)
 8002f66:	f7fd fbc7 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002f6a:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <checkthe+0x1f4>)
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <checkthe+0x1ec>)
 8002f6e:	f7fd fc2a 	bl	80007c6 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f76:	4816      	ldr	r0, [pc, #88]	; (8002fd0 <checkthe+0x220>)
 8002f78:	f7fd fe7a 	bl	8000c70 <checkbuton>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d005      	beq.n	8002f8e <checkthe+0x1de>
	while (exitmenu )
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <checkthe+0x1e8>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f47f af2e 	bne.w	8002de8 <checkthe+0x38>
 8002f8c:	e000      	b.n	8002f90 <checkthe+0x1e0>
		{
			return;
 8002f8e:	bf00      	nop
		}
	}
}
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	200003b8 	.word	0x200003b8
 8002fa0:	080083bc 	.word	0x080083bc
 8002fa4:	080082a0 	.word	0x080082a0
 8002fa8:	200003a8 	.word	0x200003a8
 8002fac:	40010c00 	.word	0x40010c00
 8002fb0:	20000018 	.word	0x20000018
 8002fb4:	080083c8 	.word	0x080083c8
 8002fb8:	080083f4 	.word	0x080083f4
 8002fbc:	08008404 	.word	0x08008404
 8002fc0:	08008410 	.word	0x08008410
 8002fc4:	08008418 	.word	0x08008418
 8002fc8:	08008420 	.word	0x08008420
 8002fcc:	08008428 	.word	0x08008428
 8002fd0:	40010800 	.word	0x40010800

08002fd4 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <CheckKey+0x58>)
 8002fe0:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002fe2:	e015      	b.n	8003010 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3306      	adds	r3, #6
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd f914 	bl	8000216 <Flash_Read_2Byte>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d107      	bne.n	800300a <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3305      	adds	r3, #5
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	429a      	cmp	r2, r3
 8003004:	d101      	bne.n	800300a <CheckKey+0x36>
				return pt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	e00b      	b.n	8003022 <CheckKey+0x4e>
		}
		pt = pt + 8;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3308      	adds	r3, #8
 800300e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3305      	adds	r3, #5
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd f8f2 	bl	80001fe <Flash_Read_Byte>
 800301a:	4603      	mov	r3, r0
 800301c:	2bff      	cmp	r3, #255	; 0xff
 800301e:	d1e1      	bne.n	8002fe4 <CheckKey+0x10>
	}
	return 0;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	0800a000 	.word	0x0800a000

08003030 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3306      	adds	r3, #6
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd f8a2 	bl	8000188 <Flash_Write_2Byte>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <startadd>:
void startadd(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003050:	4849      	ldr	r0, [pc, #292]	; (8003178 <startadd+0x12c>)
 8003052:	f7fd fbcf 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	4847      	ldr	r0, [pc, #284]	; (8003178 <startadd+0x12c>)
 800305c:	f7fd fb4c 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "MOI QUET THE");
 8003060:	4946      	ldr	r1, [pc, #280]	; (800317c <startadd+0x130>)
 8003062:	4845      	ldr	r0, [pc, #276]	; (8003178 <startadd+0x12c>)
 8003064:	f7fd fbaf 	bl	80007c6 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8003068:	2201      	movs	r2, #1
 800306a:	2100      	movs	r1, #0
 800306c:	4842      	ldr	r0, [pc, #264]	; (8003178 <startadd+0x12c>)
 800306e:	f7fd fb43 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8003072:	4943      	ldr	r1, [pc, #268]	; (8003180 <startadd+0x134>)
 8003074:	4840      	ldr	r0, [pc, #256]	; (8003178 <startadd+0x12c>)
 8003076:	f7fd fba6 	bl	80007c6 <CLCD_WriteString>
	setaddress();
 800307a:	f000 f88f 	bl	800319c <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800307e:	4841      	ldr	r0, [pc, #260]	; (8003184 <startadd+0x138>)
 8003080:	f000 fb94 	bl	80037ac <TM_MFRC522_Check>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <startadd+0x32>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800308a:	2201      	movs	r2, #1
 800308c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003090:	483d      	ldr	r0, [pc, #244]	; (8003188 <startadd+0x13c>)
 8003092:	f001 fc98 	bl	80049c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8003096:	2201      	movs	r2, #1
 8003098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800309c:	483a      	ldr	r0, [pc, #232]	; (8003188 <startadd+0x13c>)
 800309e:	f001 fc92 	bl	80049c6 <HAL_GPIO_WritePin>
				HAL_Delay(delayloa);
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <startadd+0x140>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 ffbc 	bl	8004024 <HAL_Delay>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030b2:	4835      	ldr	r0, [pc, #212]	; (8003188 <startadd+0x13c>)
 80030b4:	f001 fc87 	bl	80049c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030be:	4832      	ldr	r0, [pc, #200]	; (8003188 <startadd+0x13c>)
 80030c0:	f001 fc81 	bl	80049c6 <HAL_GPIO_WritePin>
				if (CheckListUID(CardID) == 0)
 80030c4:	482f      	ldr	r0, [pc, #188]	; (8003184 <startadd+0x138>)
 80030c6:	f7ff fd5f 	bl	8002b88 <CheckListUID>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <startadd+0xa4>
				{
					CardID[5] = 0x11;
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <startadd+0x138>)
 80030d2:	2211      	movs	r2, #17
 80030d4:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <startadd+0x144>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2206      	movs	r2, #6
 80030dc:	4929      	ldr	r1, [pc, #164]	; (8003184 <startadd+0x138>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f86a 	bl	80001b8 <Flash_Write_Array>
					AddressUID += 8;
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <startadd+0x144>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	4a29      	ldr	r2, [pc, #164]	; (8003190 <startadd+0x144>)
 80030ec:	6013      	str	r3, [r2, #0]
					break;
 80030ee:	e025      	b.n	800313c <startadd+0xf0>
				}
				else
				{
					CLCD_Clear(&LCD1);
 80030f0:	4821      	ldr	r0, [pc, #132]	; (8003178 <startadd+0x12c>)
 80030f2:	f7fd fb7f 	bl	80007f4 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	481f      	ldr	r0, [pc, #124]	; (8003178 <startadd+0x12c>)
 80030fc:	f7fd fafc 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8003100:	4924      	ldr	r1, [pc, #144]	; (8003194 <startadd+0x148>)
 8003102:	481d      	ldr	r0, [pc, #116]	; (8003178 <startadd+0x12c>)
 8003104:	f7fd fb5f 	bl	80007c6 <CLCD_WriteString>
					HAL_Delay(1000);
 8003108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800310c:	f000 ff8a 	bl	8004024 <HAL_Delay>
					CLCD_Clear(&LCD1);
 8003110:	4819      	ldr	r0, [pc, #100]	; (8003178 <startadd+0x12c>)
 8003112:	f7fd fb6f 	bl	80007f4 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	4817      	ldr	r0, [pc, #92]	; (8003178 <startadd+0x12c>)
 800311c:	f7fd faec 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "MOI QUET THE");
 8003120:	4916      	ldr	r1, [pc, #88]	; (800317c <startadd+0x130>)
 8003122:	4815      	ldr	r0, [pc, #84]	; (8003178 <startadd+0x12c>)
 8003124:	f7fd fb4f 	bl	80007c6 <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 8003128:	2201      	movs	r2, #1
 800312a:	2100      	movs	r1, #0
 800312c:	4812      	ldr	r0, [pc, #72]	; (8003178 <startadd+0x12c>)
 800312e:	f7fd fae3 	bl	80006f8 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8003132:	4913      	ldr	r1, [pc, #76]	; (8003180 <startadd+0x134>)
 8003134:	4810      	ldr	r0, [pc, #64]	; (8003178 <startadd+0x12c>)
 8003136:	f7fd fb46 	bl	80007c6 <CLCD_WriteString>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800313a:	e7a0      	b.n	800307e <startadd+0x32>
				}
			}
		}
	CLCD_Clear(&LCD1);
 800313c:	480e      	ldr	r0, [pc, #56]	; (8003178 <startadd+0x12c>)
 800313e:	f7fd fb59 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	480c      	ldr	r0, [pc, #48]	; (8003178 <startadd+0x12c>)
 8003148:	f7fd fad6 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THEM THANH CONG");
 800314c:	4912      	ldr	r1, [pc, #72]	; (8003198 <startadd+0x14c>)
 800314e:	480a      	ldr	r0, [pc, #40]	; (8003178 <startadd+0x12c>)
 8003150:	f7fd fb39 	bl	80007c6 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8003154:	2201      	movs	r2, #1
 8003156:	2100      	movs	r1, #0
 8003158:	4807      	ldr	r0, [pc, #28]	; (8003178 <startadd+0x12c>)
 800315a:	f7fd facd 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 800315e:	4908      	ldr	r1, [pc, #32]	; (8003180 <startadd+0x134>)
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <startadd+0x12c>)
 8003162:	f7fd fb30 	bl	80007c6 <CLCD_WriteString>
	HAL_Delay(1000);
 8003166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800316a:	f000 ff5b 	bl	8004024 <HAL_Delay>
	CLCD_Clear(&LCD1);
 800316e:	4802      	ldr	r0, [pc, #8]	; (8003178 <startadd+0x12c>)
 8003170:	f7fd fb40 	bl	80007f4 <CLCD_Clear>
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200003b8 	.word	0x200003b8
 800317c:	08008430 	.word	0x08008430
 8003180:	080083f4 	.word	0x080083f4
 8003184:	200003a8 	.word	0x200003a8
 8003188:	40010c00 	.word	0x40010c00
 800318c:	20000018 	.word	0x20000018
 8003190:	20000004 	.word	0x20000004
 8003194:	080083e4 	.word	0x080083e4
 8003198:	08008440 	.word	0x08008440

0800319c <setaddress>:
void setaddress(void){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <setaddress+0x30>)
 80031a4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80031a6:	e002      	b.n	80031ae <setaddress+0x12>
	{
		pt = pt + 8;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3308      	adds	r3, #8
 80031ac:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3305      	adds	r3, #5
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f823 	bl	80001fe <Flash_Read_Byte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d1f4      	bne.n	80031a8 <setaddress+0xc>
	}
	AddressUID = pt;
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <setaddress+0x34>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0800a000 	.word	0x0800a000
 80031d0:	20000004 	.word	0x20000004

080031d4 <password>:

void password(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 80031da:	4855      	ldr	r0, [pc, #340]	; (8003330 <password+0x15c>)
 80031dc:	f7fd fb0a 	bl	80007f4 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	4852      	ldr	r0, [pc, #328]	; (8003330 <password+0x15c>)
 80031e6:	f7fd fa87 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "NHAP PASSWORD :");
 80031ea:	4952      	ldr	r1, [pc, #328]	; (8003334 <password+0x160>)
 80031ec:	4850      	ldr	r0, [pc, #320]	; (8003330 <password+0x15c>)
 80031ee:	f7fd faea 	bl	80007c6 <CLCD_WriteString>
	exitmenu =120;
 80031f2:	4b51      	ldr	r3, [pc, #324]	; (8003338 <password+0x164>)
 80031f4:	2278      	movs	r2, #120	; 0x78
 80031f6:	701a      	strb	r2, [r3, #0]
	uint8_t pass[16] = {-1};
 80031f8:	23ff      	movs	r3, #255	; 0xff
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
	uint8_t k=0;
 8003208:	2300      	movs	r3, #0
 800320a:	75fb      	strb	r3, [r7, #23]
	uint8_t pas = -1;
 800320c:	23ff      	movs	r3, #255	; 0xff
 800320e:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(1000);
 8003210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003214:	f000 ff06 	bl	8004024 <HAL_Delay>
	while(checkbuton(MENU_GPIO_Port, MENU_Pin) != 0){}
 8003218:	bf00      	nop
 800321a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321e:	4847      	ldr	r0, [pc, #284]	; (800333c <password+0x168>)
 8003220:	f7fd fd26 	bl	8000c70 <checkbuton>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f7      	bne.n	800321a <password+0x46>
	CLCD_SetCursor(&LCD1, k, 1);
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2201      	movs	r2, #1
 800322e:	4619      	mov	r1, r3
 8003230:	483f      	ldr	r0, [pc, #252]	; (8003330 <password+0x15c>)
 8003232:	f7fd fa61 	bl	80006f8 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 95);
 8003236:	215f      	movs	r1, #95	; 0x5f
 8003238:	483d      	ldr	r0, [pc, #244]	; (8003330 <password+0x15c>)
 800323a:	f7fd faa5 	bl	8000788 <CLCD_WriteChar>
	while(exitmenu){
 800323e:	e06d      	b.n	800331c <password+0x148>
		if(checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) == 1){
 8003240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003244:	483e      	ldr	r0, [pc, #248]	; (8003340 <password+0x16c>)
 8003246:	f7fd fd13 	bl	8000c70 <checkbuton>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d114      	bne.n	800327a <password+0xa6>
			pas++;
 8003250:	7dbb      	ldrb	r3, [r7, #22]
 8003252:	3301      	adds	r3, #1
 8003254:	75bb      	strb	r3, [r7, #22]
			if(pas == 10)	pas = 0;
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	2b0a      	cmp	r3, #10
 800325a:	d101      	bne.n	8003260 <password+0x8c>
 800325c:	2300      	movs	r3, #0
 800325e:	75bb      	strb	r3, [r7, #22]
			CLCD_SetCursor(&LCD1, k, 1);
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2201      	movs	r2, #1
 8003264:	4619      	mov	r1, r3
 8003266:	4832      	ldr	r0, [pc, #200]	; (8003330 <password+0x15c>)
 8003268:	f7fd fa46 	bl	80006f8 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, pas + 0x30);
 800326c:	7dbb      	ldrb	r3, [r7, #22]
 800326e:	3330      	adds	r3, #48	; 0x30
 8003270:	b2db      	uxtb	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	482e      	ldr	r0, [pc, #184]	; (8003330 <password+0x15c>)
 8003276:	f7fd fa87 	bl	8000788 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 800327a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800327e:	482f      	ldr	r0, [pc, #188]	; (800333c <password+0x168>)
 8003280:	f7fd fcf6 	bl	8000c70 <checkbuton>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d148      	bne.n	800331c <password+0x148>
			pass[k] = pas;
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	3318      	adds	r3, #24
 800328e:	443b      	add	r3, r7
 8003290:	7dba      	ldrb	r2, [r7, #22]
 8003292:	f803 2c14 	strb.w	r2, [r3, #-20]
			k = k+1;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	3301      	adds	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
			pas = -1;
 800329c:	23ff      	movs	r3, #255	; 0xff
 800329e:	75bb      	strb	r3, [r7, #22]
			if(k == 16){
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d130      	bne.n	8003308 <password+0x134>
				for(uint8_t i = 0; i<16; i++){
 80032a6:	2300      	movs	r3, #0
 80032a8:	757b      	strb	r3, [r7, #21]
 80032aa:	e010      	b.n	80032ce <password+0xfa>
					if(pass[i] != PassWord[i]){
 80032ac:	7d7b      	ldrb	r3, [r7, #21]
 80032ae:	3318      	adds	r3, #24
 80032b0:	443b      	add	r3, r7
 80032b2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80032b6:	7d7b      	ldrb	r3, [r7, #21]
 80032b8:	4922      	ldr	r1, [pc, #136]	; (8003344 <password+0x170>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d003      	beq.n	80032c8 <password+0xf4>
						CLCD_Clear(&LCD1);
 80032c0:	481b      	ldr	r0, [pc, #108]	; (8003330 <password+0x15c>)
 80032c2:	f7fd fa97 	bl	80007f4 <CLCD_Clear>
 80032c6:	e030      	b.n	800332a <password+0x156>
				for(uint8_t i = 0; i<16; i++){
 80032c8:	7d7b      	ldrb	r3, [r7, #21]
 80032ca:	3301      	adds	r3, #1
 80032cc:	757b      	strb	r3, [r7, #21]
 80032ce:	7d7b      	ldrb	r3, [r7, #21]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d9eb      	bls.n	80032ac <password+0xd8>
						return;
					}
				}
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 80032d4:	2201      	movs	r2, #1
 80032d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032da:	4819      	ldr	r0, [pc, #100]	; (8003340 <password+0x16c>)
 80032dc:	f001 fb73 	bl	80049c6 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 80032e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80032e4:	f000 fe9e 	bl	8004024 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ee:	4814      	ldr	r0, [pc, #80]	; (8003340 <password+0x16c>)
 80032f0:	f001 fb69 	bl	80049c6 <HAL_GPIO_WritePin>
				resetflash();
 80032f4:	f000 f828 	bl	8003348 <resetflash>
				CLCD_Clear(&LCD1);
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <password+0x15c>)
 80032fa:	f7fd fa7b 	bl	80007f4 <CLCD_Clear>
				startadd();
 80032fe:	f7ff fea5 	bl	800304c <startadd>
				exitmenu =0;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <password+0x164>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
			}
			CLCD_SetCursor(&LCD1, k, 1);
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	4808      	ldr	r0, [pc, #32]	; (8003330 <password+0x15c>)
 8003310:	f7fd f9f2 	bl	80006f8 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 95);
 8003314:	215f      	movs	r1, #95	; 0x5f
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <password+0x15c>)
 8003318:	f7fd fa36 	bl	8000788 <CLCD_WriteChar>
	while(exitmenu){
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <password+0x164>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d18d      	bne.n	8003240 <password+0x6c>
		}
	}
	CLCD_Clear(&LCD1);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <password+0x15c>)
 8003326:	f7fd fa65 	bl	80007f4 <CLCD_Clear>
}
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200003b8 	.word	0x200003b8
 8003334:	08008450 	.word	0x08008450
 8003338:	20000000 	.word	0x20000000
 800333c:	40010800 	.word	0x40010800
 8003340:	40010c00 	.word	0x40010c00
 8003344:	20000008 	.word	0x20000008

08003348 <resetflash>:
void resetflash(){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <resetflash+0x34>)
 8003350:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8003352:	e002      	b.n	800335a <resetflash+0x12>
		Flash_Erase(pt);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fc fefb 	bl	8000150 <Flash_Erase>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fc ff67 	bl	800022e <Flash_Read_8Byte>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	bf08      	it	eq
 800336a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800336e:	d1f1      	bne.n	8003354 <resetflash+0xc>
	}
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	0800a000 	.word	0x0800a000

08003380 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
	BaseType_t checkIfyeildRequired;
	checkIfyeildRequired = xTaskResumeFromISR(defaultTaskHandle);
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_GPIO_EXTI_Callback+0x34>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fa74 	bl	800687c <xTaskResumeFromISR>
 8003394:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(checkIfyeildRequired);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_GPIO_EXTI_Callback+0x2c>
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_GPIO_EXTI_Callback+0x38>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy

}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200003a0 	.word	0x200003a0
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <startabntask>:
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void startabntask( void const * paramerter){
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af04      	add	r7, sp, #16
 80033c2:	6078      	str	r0, [r7, #4]
	while(1){
		CLCD_SetCursor(&LCD1, 0, 0);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	484b      	ldr	r0, [pc, #300]	; (80034f8 <startabntask+0x13c>)
 80033ca:	f7fd f995 	bl	80006f8 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " MOI QUET THE ");
 80033ce:	494b      	ldr	r1, [pc, #300]	; (80034fc <startabntask+0x140>)
 80033d0:	4849      	ldr	r0, [pc, #292]	; (80034f8 <startabntask+0x13c>)
 80033d2:	f7fd f9f8 	bl	80007c6 <CLCD_WriteString>
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80033d6:	484a      	ldr	r0, [pc, #296]	; (8003500 <startabntask+0x144>)
 80033d8:	f000 f9e8 	bl	80037ac <TM_MFRC522_Check>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8085 	bne.w	80034ee <startabntask+0x132>
		{
			sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <startabntask+0x144>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <startabntask+0x144>)
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	461c      	mov	r4, r3
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <startabntask+0x144>)
 80033f2:	789b      	ldrb	r3, [r3, #2]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <startabntask+0x144>)
 80033f8:	78db      	ldrb	r3, [r3, #3]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <startabntask+0x144>)
 80033fe:	791b      	ldrb	r3, [r3, #4]
 8003400:	9302      	str	r3, [sp, #8]
 8003402:	9101      	str	r1, [sp, #4]
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	4623      	mov	r3, r4
 8003408:	4602      	mov	r2, r0
 800340a:	493e      	ldr	r1, [pc, #248]	; (8003504 <startabntask+0x148>)
 800340c:	483e      	ldr	r0, [pc, #248]	; (8003508 <startabntask+0x14c>)
 800340e:	f004 fa15 	bl	800783c <siprintf>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8003412:	2201      	movs	r2, #1
 8003414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003418:	483c      	ldr	r0, [pc, #240]	; (800350c <startabntask+0x150>)
 800341a:	f001 fad4 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003424:	4839      	ldr	r0, [pc, #228]	; (800350c <startabntask+0x150>)
 8003426:	f001 face 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <startabntask+0x154>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fdf8 	bl	8004024 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343a:	4834      	ldr	r0, [pc, #208]	; (800350c <startabntask+0x150>)
 800343c:	f001 fac3 	bl	80049c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003446:	4831      	ldr	r0, [pc, #196]	; (800350c <startabntask+0x150>)
 8003448:	f001 fabd 	bl	80049c6 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) != 0)
 800344c:	482c      	ldr	r0, [pc, #176]	; (8003500 <startabntask+0x144>)
 800344e:	f7ff fb9b 	bl	8002b88 <CheckListUID>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <startabntask+0xe8>
			{
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800345e:	482b      	ldr	r0, [pc, #172]	; (800350c <startabntask+0x150>)
 8003460:	f001 fab1 	bl	80049c6 <HAL_GPIO_WritePin>
				CLCD_Clear(&LCD1);
 8003464:	4824      	ldr	r0, [pc, #144]	; (80034f8 <startabntask+0x13c>)
 8003466:	f7fd f9c5 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	4822      	ldr	r0, [pc, #136]	; (80034f8 <startabntask+0x13c>)
 8003470:	f7fd f942 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    WELCOME");
 8003474:	4927      	ldr	r1, [pc, #156]	; (8003514 <startabntask+0x158>)
 8003476:	4820      	ldr	r0, [pc, #128]	; (80034f8 <startabntask+0x13c>)
 8003478:	f7fd f9a5 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 800347c:	2201      	movs	r2, #1
 800347e:	2100      	movs	r1, #0
 8003480:	481d      	ldr	r0, [pc, #116]	; (80034f8 <startabntask+0x13c>)
 8003482:	f7fd f939 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1,str);
 8003486:	4920      	ldr	r1, [pc, #128]	; (8003508 <startabntask+0x14c>)
 8003488:	481b      	ldr	r0, [pc, #108]	; (80034f8 <startabntask+0x13c>)
 800348a:	f7fd f99c 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(5000);
 800348e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003492:	f000 fdc7 	bl	8004024 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800349c:	481b      	ldr	r0, [pc, #108]	; (800350c <startabntask+0x150>)
 800349e:	f001 fa92 	bl	80049c6 <HAL_GPIO_WritePin>
 80034a2:	e018      	b.n	80034d6 <startabntask+0x11a>
			}
			else
			{
				CLCD_Clear(&LCD1);
 80034a4:	4814      	ldr	r0, [pc, #80]	; (80034f8 <startabntask+0x13c>)
 80034a6:	f7fd f9a5 	bl	80007f4 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	4812      	ldr	r0, [pc, #72]	; (80034f8 <startabntask+0x13c>)
 80034b0:	f7fd f922 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE SAI");
 80034b4:	4918      	ldr	r1, [pc, #96]	; (8003518 <startabntask+0x15c>)
 80034b6:	4810      	ldr	r0, [pc, #64]	; (80034f8 <startabntask+0x13c>)
 80034b8:	f7fd f985 	bl	80007c6 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80034bc:	2201      	movs	r2, #1
 80034be:	2100      	movs	r1, #0
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <startabntask+0x13c>)
 80034c2:	f7fd f919 	bl	80006f8 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, str);
 80034c6:	4910      	ldr	r1, [pc, #64]	; (8003508 <startabntask+0x14c>)
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <startabntask+0x13c>)
 80034ca:	f7fd f97c 	bl	80007c6 <CLCD_WriteString>
				HAL_Delay(5000);
 80034ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80034d2:	f000 fda7 	bl	8004024 <HAL_Delay>
			}

			CLCD_Clear(&LCD1);
 80034d6:	4808      	ldr	r0, [pc, #32]	; (80034f8 <startabntask+0x13c>)
 80034d8:	f7fd f98c 	bl	80007f4 <CLCD_Clear>
			CLCD_SetCursor(&LCD1, 0, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2100      	movs	r1, #0
 80034e0:	4805      	ldr	r0, [pc, #20]	; (80034f8 <startabntask+0x13c>)
 80034e2:	f7fd f909 	bl	80006f8 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, " MOI QUET THE ");
 80034e6:	4905      	ldr	r1, [pc, #20]	; (80034fc <startabntask+0x140>)
 80034e8:	4803      	ldr	r0, [pc, #12]	; (80034f8 <startabntask+0x13c>)
 80034ea:	f7fd f96c 	bl	80007c6 <CLCD_WriteString>
		}
		osDelay(1000);
 80034ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034f2:	f002 fe17 	bl	8006124 <osDelay>
		CLCD_SetCursor(&LCD1, 0, 0);
 80034f6:	e765      	b.n	80033c4 <startabntask+0x8>
 80034f8:	200003b8 	.word	0x200003b8
 80034fc:	08008460 	.word	0x08008460
 8003500:	200003a8 	.word	0x200003a8
 8003504:	08008470 	.word	0x08008470
 8003508:	20000410 	.word	0x20000410
 800350c:	40010c00 	.word	0x40010c00
 8003510:	20000018 	.word	0x20000018
 8003514:	0800848c 	.word	0x0800848c
 8003518:	08008498 	.word	0x08008498

0800351c <StartDefaultTask>:
	}
}

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8003524:	2000      	movs	r0, #0
 8003526:	f003 f87f 	bl	8006628 <vTaskSuspend>
	  HAL_NVIC_DisableIRQ(MENU_EXTI_IRQn);
 800352a:	2017      	movs	r0, #23
 800352c:	f000 fea1 	bl	8004272 <HAL_NVIC_DisableIRQ>
	  Set_Pin_IT(MENU_GPIO_Port, MENU_Pin);
 8003530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003534:	4852      	ldr	r0, [pc, #328]	; (8003680 <StartDefaultTask+0x164>)
 8003536:	f7fd fb79 	bl	8000c2c <Set_Pin_IT>
	  		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800353a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800353e:	4850      	ldr	r0, [pc, #320]	; (8003680 <StartDefaultTask+0x164>)
 8003540:	f7fd fb96 	bl	8000c70 <checkbuton>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8094 	beq.w	8003674 <StartDefaultTask+0x158>
	  		{
	  			vTaskSuspend(abnTaskHanle);
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <StartDefaultTask+0x168>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f003 f869 	bl	8006628 <vTaskSuspend>
	  			exitmenu = 15;
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <StartDefaultTask+0x16c>)
 8003558:	220f      	movs	r2, #15
 800355a:	701a      	strb	r2, [r3, #0]
	  			CLCD_SetCursor(&LCD1, 0, 1);
 800355c:	2201      	movs	r2, #1
 800355e:	2100      	movs	r1, #0
 8003560:	484a      	ldr	r0, [pc, #296]	; (800368c <StartDefaultTask+0x170>)
 8003562:	f7fd f8c9 	bl	80006f8 <CLCD_SetCursor>
	  			CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8003566:	494a      	ldr	r1, [pc, #296]	; (8003690 <StartDefaultTask+0x174>)
 8003568:	4848      	ldr	r0, [pc, #288]	; (800368c <StartDefaultTask+0x170>)
 800356a:	f7fd f92c 	bl	80007c6 <CLCD_WriteString>
	  			uint8_t key = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
	  			uint8_t stat ;
	  			while (exitmenu )
 8003572:	e046      	b.n	8003602 <StartDefaultTask+0xe6>
	  			{
	  				if (TM_MFRC522_Check(CardID) == MI_OK)
 8003574:	4847      	ldr	r0, [pc, #284]	; (8003694 <StartDefaultTask+0x178>)
 8003576:	f000 f919 	bl	80037ac <TM_MFRC522_Check>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d125      	bne.n	80035cc <StartDefaultTask+0xb0>
	  				{
	  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8003580:	2201      	movs	r2, #1
 8003582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003586:	4844      	ldr	r0, [pc, #272]	; (8003698 <StartDefaultTask+0x17c>)
 8003588:	f001 fa1d 	bl	80049c6 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 800358c:	2201      	movs	r2, #1
 800358e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003592:	4841      	ldr	r0, [pc, #260]	; (8003698 <StartDefaultTask+0x17c>)
 8003594:	f001 fa17 	bl	80049c6 <HAL_GPIO_WritePin>
	  					HAL_Delay(delayloa);
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <StartDefaultTask+0x180>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fd41 	bl	8004024 <HAL_Delay>
	  					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035a8:	483b      	ldr	r0, [pc, #236]	; (8003698 <StartDefaultTask+0x17c>)
 80035aa:	f001 fa0c 	bl	80049c6 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b4:	4838      	ldr	r0, [pc, #224]	; (8003698 <StartDefaultTask+0x17c>)
 80035b6:	f001 fa06 	bl	80049c6 <HAL_GPIO_WritePin>
	  					key = CheckListUID(CardID);
 80035ba:	4836      	ldr	r0, [pc, #216]	; (8003694 <StartDefaultTask+0x178>)
 80035bc:	f7ff fae4 	bl	8002b88 <CheckListUID>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
	  					key = key >> 4;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	73fb      	strb	r3, [r7, #15]
	  					break;
 80035ca:	e01e      	b.n	800360a <StartDefaultTask+0xee>
	  				}
	  				stat = checkbuton(MENU_GPIO_Port, MENU_Pin);
 80035cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d0:	482b      	ldr	r0, [pc, #172]	; (8003680 <StartDefaultTask+0x164>)
 80035d2:	f7fd fb4d 	bl	8000c70 <checkbuton>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73bb      	strb	r3, [r7, #14]
	  				switch(stat){
 80035da:	7bbb      	ldrb	r3, [r7, #14]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <StartDefaultTask+0xe6>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d000      	beq.n	80035e6 <StartDefaultTask+0xca>
 80035e4:	e007      	b.n	80035f6 <StartDefaultTask+0xda>
	  				case 0:
	  					break;
	  				case 3:
	  					password();
 80035e6:	f7ff fdf5 	bl	80031d4 <password>
	  					key = 99;
 80035ea:	2363      	movs	r3, #99	; 0x63
 80035ec:	73fb      	strb	r3, [r7, #15]
	  					exitmenu = 0;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <StartDefaultTask+0x16c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
	  					break;
 80035f4:	e005      	b.n	8003602 <StartDefaultTask+0xe6>
	  				default :
	  					key = 2;
 80035f6:	2302      	movs	r3, #2
 80035f8:	73fb      	strb	r3, [r7, #15]
	  					exitmenu = 0;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <StartDefaultTask+0x16c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
	  					break;
 8003600:	bf00      	nop
	  			while (exitmenu )
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <StartDefaultTask+0x16c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1b4      	bne.n	8003574 <StartDefaultTask+0x58>
	  				}
	  			}
	  			switch (key){
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <StartDefaultTask+0xfa>
 8003610:	2b63      	cmp	r3, #99	; 0x63
 8003612:	d029      	beq.n	8003668 <StartDefaultTask+0x14c>
 8003614:	e002      	b.n	800361c <StartDefaultTask+0x100>
	  			case 1:
	  				seclectmenu();
 8003616:	f7fd fb79 	bl	8000d0c <seclectmenu>
	  				break;
 800361a:	e026      	b.n	800366a <StartDefaultTask+0x14e>
	  			case 99:
	  				break;
	  			default:
	  				CLCD_Clear(&LCD1);
 800361c:	481b      	ldr	r0, [pc, #108]	; (800368c <StartDefaultTask+0x170>)
 800361e:	f7fd f8e9 	bl	80007f4 <CLCD_Clear>
	  				CLCD_SetCursor(&LCD1, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	4819      	ldr	r0, [pc, #100]	; (800368c <StartDefaultTask+0x170>)
 8003628:	f7fd f866 	bl	80006f8 <CLCD_SetCursor>
	  				CLCD_WriteString(&LCD1, "      SAI ");
 800362c:	491c      	ldr	r1, [pc, #112]	; (80036a0 <StartDefaultTask+0x184>)
 800362e:	4817      	ldr	r0, [pc, #92]	; (800368c <StartDefaultTask+0x170>)
 8003630:	f7fd f8c9 	bl	80007c6 <CLCD_WriteString>
	  				CLCD_SetCursor(&LCD1, 0, 1);
 8003634:	2201      	movs	r2, #1
 8003636:	2100      	movs	r1, #0
 8003638:	4814      	ldr	r0, [pc, #80]	; (800368c <StartDefaultTask+0x170>)
 800363a:	f7fd f85d 	bl	80006f8 <CLCD_SetCursor>
	  				CLCD_WriteString(&LCD1, "KHONG CO QUYEN");
 800363e:	4919      	ldr	r1, [pc, #100]	; (80036a4 <StartDefaultTask+0x188>)
 8003640:	4812      	ldr	r0, [pc, #72]	; (800368c <StartDefaultTask+0x170>)
 8003642:	f7fd f8c0 	bl	80007c6 <CLCD_WriteString>
	  				HAL_Delay(1000);
 8003646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800364a:	f000 fceb 	bl	8004024 <HAL_Delay>
	  				CLCD_Clear(&LCD1);
 800364e:	480f      	ldr	r0, [pc, #60]	; (800368c <StartDefaultTask+0x170>)
 8003650:	f7fd f8d0 	bl	80007f4 <CLCD_Clear>
	  				CLCD_SetCursor(&LCD1, 0, 0);
 8003654:	2200      	movs	r2, #0
 8003656:	2100      	movs	r1, #0
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <StartDefaultTask+0x170>)
 800365a:	f7fd f84d 	bl	80006f8 <CLCD_SetCursor>
	  				CLCD_WriteString(&LCD1, " MOI QUET THE ");
 800365e:	4912      	ldr	r1, [pc, #72]	; (80036a8 <StartDefaultTask+0x18c>)
 8003660:	480a      	ldr	r0, [pc, #40]	; (800368c <StartDefaultTask+0x170>)
 8003662:	f7fd f8b0 	bl	80007c6 <CLCD_WriteString>
	  				break;
 8003666:	e000      	b.n	800366a <StartDefaultTask+0x14e>
	  				break;
 8003668:	bf00      	nop
	  			}
	  			vTaskResume(abnTaskHanle);
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <StartDefaultTask+0x168>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f003 f8a6 	bl	80067c0 <vTaskResume>
	  		}
    Set_Pin_Input(MENU_GPIO_Port, MENU_GPIO_Port);
 8003674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <StartDefaultTask+0x164>)
 800367a:	f7fd fab9 	bl	8000bf0 <Set_Pin_Input>
	  vTaskSuspend(NULL);
 800367e:	e751      	b.n	8003524 <StartDefaultTask+0x8>
 8003680:	40010800 	.word	0x40010800
 8003684:	200003a4 	.word	0x200003a4
 8003688:	20000000 	.word	0x20000000
 800368c:	200003b8 	.word	0x200003b8
 8003690:	080083f4 	.word	0x080083f4
 8003694:	200003a8 	.word	0x200003a8
 8003698:	40010c00 	.word	0x40010c00
 800369c:	20000018 	.word	0x20000018
 80036a0:	080084a4 	.word	0x080084a4
 80036a4:	080084b0 	.word	0x080084b0
 80036a8:	08008460 	.word	0x08008460

080036ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036be:	f000 fc95 	bl	8003fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d112      	bne.n	80036f2 <HAL_TIM_PeriodElapsedCallback+0x46>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80036cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036d0:	480b      	ldr	r0, [pc, #44]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80036d2:	f001 f990 	bl	80049f6 <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <HAL_TIM_PeriodElapsedCallback+0x40>
		exitmenu --;
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036e8:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
  }
  /* USER CODE END Callback 1 */
}
 80036ea:	e002      	b.n	80036f2 <HAL_TIM_PeriodElapsedCallback+0x46>
	else exitmenu = 0;
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40000800 	.word	0x40000800
 8003700:	40011000 	.word	0x40011000
 8003704:	20000000 	.word	0x20000000

08003708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
}
 800370e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003710:	e7fe      	b.n	8003710 <Error_Handler+0x8>
	...

08003714 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003722:	bf00      	nop
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <TM_SPI_Send+0x4c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d1f8      	bne.n	8003724 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003732:	f107 0208 	add.w	r2, r7, #8
 8003736:	f107 010c 	add.w	r1, r7, #12
 800373a:	230a      	movs	r3, #10
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2301      	movs	r3, #1
 8003740:	4807      	ldr	r0, [pc, #28]	; (8003760 <TM_SPI_Send+0x4c>)
 8003742:	f001 fe43 	bl	80053cc <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003746:	bf00      	nop
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <TM_SPI_Send+0x4c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d0f8      	beq.n	8003748 <TM_SPI_Send+0x34>
	return data_re[0];
 8003756:	7a3b      	ldrb	r3, [r7, #8]

}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000300 	.word	0x20000300

08003764 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003768:	f000 f8d5 	bl	8003916 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800376c:	218d      	movs	r1, #141	; 0x8d
 800376e:	202a      	movs	r0, #42	; 0x2a
 8003770:	f000 f836 	bl	80037e0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003774:	213e      	movs	r1, #62	; 0x3e
 8003776:	202b      	movs	r0, #43	; 0x2b
 8003778:	f000 f832 	bl	80037e0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 800377c:	211e      	movs	r1, #30
 800377e:	202d      	movs	r0, #45	; 0x2d
 8003780:	f000 f82e 	bl	80037e0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003784:	2100      	movs	r1, #0
 8003786:	202c      	movs	r0, #44	; 0x2c
 8003788:	f000 f82a 	bl	80037e0 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800378c:	2170      	movs	r1, #112	; 0x70
 800378e:	2026      	movs	r0, #38	; 0x26
 8003790:	f000 f826 	bl	80037e0 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003794:	2140      	movs	r1, #64	; 0x40
 8003796:	2015      	movs	r0, #21
 8003798:	f000 f822 	bl	80037e0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800379c:	213d      	movs	r1, #61	; 0x3d
 800379e:	2011      	movs	r0, #17
 80037a0:	f000 f81e 	bl	80037e0 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80037a4:	f000 f8a2 	bl	80038ec <TM_MFRC522_AntennaOn>
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}

080037ac <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	2026      	movs	r0, #38	; 0x26
 80037b8:	f000 f8b5 	bl	8003926 <TM_MFRC522_Request>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9a1 	bl	8003b0e <TM_MFRC522_Anticoll>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80037d0:	f000 fa23 	bl	8003c1a <TM_MFRC522_Halt>
	return status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	460a      	mov	r2, r1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80037f0:	2200      	movs	r2, #0
 80037f2:	2110      	movs	r1, #16
 80037f4:	480c      	ldr	r0, [pc, #48]	; (8003828 <TM_MFRC522_WriteRegister+0x48>)
 80037f6:	f001 f8e6 	bl	80049c6 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ff84 	bl	8003714 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff80 	bl	8003714 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003814:	2201      	movs	r2, #1
 8003816:	2110      	movs	r1, #16
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <TM_MFRC522_WriteRegister+0x48>)
 800381a:	f001 f8d4 	bl	80049c6 <HAL_GPIO_WritePin>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40010800 	.word	0x40010800

0800382c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003836:	2200      	movs	r2, #0
 8003838:	2110      	movs	r1, #16
 800383a:	480f      	ldr	r0, [pc, #60]	; (8003878 <TM_MFRC522_ReadRegister+0x4c>)
 800383c:	f001 f8c3 	bl	80049c6 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800385a:	2000      	movs	r0, #0
 800385c:	f7ff ff5a 	bl	8003714 <TM_SPI_Send>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003864:	2201      	movs	r2, #1
 8003866:	2110      	movs	r1, #16
 8003868:	4803      	ldr	r0, [pc, #12]	; (8003878 <TM_MFRC522_ReadRegister+0x4c>)
 800386a:	f001 f8ac 	bl	80049c6 <HAL_GPIO_WritePin>

	return val;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010800 	.word	0x40010800

0800387c <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	460a      	mov	r2, r1
 8003886:	71fb      	strb	r3, [r7, #7]
 8003888:	4613      	mov	r3, r2
 800388a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ffcc 	bl	800382c <TM_MFRC522_ReadRegister>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	4313      	orrs	r3, r2
 800389c:	b2da      	uxtb	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff9c 	bl	80037e0 <TM_MFRC522_WriteRegister>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	460a      	mov	r2, r1
 80038ba:	71fb      	strb	r3, [r7, #7]
 80038bc:	4613      	mov	r3, r2
 80038be:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ffb2 	bl	800382c <TM_MFRC522_ReadRegister>
 80038c8:	4603      	mov	r3, r0
 80038ca:	b25a      	sxtb	r2, r3
 80038cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff7e 	bl	80037e0 <TM_MFRC522_WriteRegister>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80038f2:	2014      	movs	r0, #20
 80038f4:	f7ff ff9a 	bl	800382c <TM_MFRC522_ReadRegister>
 80038f8:	4603      	mov	r3, r0
 80038fa:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003906:	2103      	movs	r1, #3
 8003908:	2014      	movs	r0, #20
 800390a:	f7ff ffb7 	bl	800387c <TM_MFRC522_SetBitMask>
	}
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003916:	b580      	push	{r7, lr}
 8003918:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800391a:	210f      	movs	r1, #15
 800391c:	2001      	movs	r0, #1
 800391e:	f7ff ff5f 	bl	80037e0 <TM_MFRC522_WriteRegister>
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}

08003926 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af02      	add	r7, sp, #8
 800392c:	4603      	mov	r3, r0
 800392e:	6039      	str	r1, [r7, #0]
 8003930:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003932:	2107      	movs	r1, #7
 8003934:	200d      	movs	r0, #13
 8003936:	f7ff ff53 	bl	80037e0 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	200c      	movs	r0, #12
 800394e:	f000 f80f 	bl	8003970 <TM_MFRC522_ToCard>
 8003952:	4603      	mov	r3, r0
 8003954:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <TM_MFRC522_Request+0x3c>
 800395c:	89bb      	ldrh	r3, [r7, #12]
 800395e:	2b10      	cmp	r3, #16
 8003960:	d001      	beq.n	8003966 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003962:	2302      	movs	r3, #2
 8003964:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003966:	7bfb      	ldrb	r3, [r7, #15]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	4613      	mov	r3, r2
 8003980:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003982:	2302      	movs	r3, #2
 8003984:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d006      	beq.n	80039a2 <TM_MFRC522_ToCard+0x32>
 8003994:	2b0e      	cmp	r3, #14
 8003996:	d109      	bne.n	80039ac <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003998:	2312      	movs	r3, #18
 800399a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800399c:	2310      	movs	r3, #16
 800399e:	757b      	strb	r3, [r7, #21]
			break;
 80039a0:	e005      	b.n	80039ae <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80039a2:	2377      	movs	r3, #119	; 0x77
 80039a4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80039a6:	2330      	movs	r3, #48	; 0x30
 80039a8:	757b      	strb	r3, [r7, #21]
			break;
 80039aa:	e000      	b.n	80039ae <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80039ac:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80039ae:	7dbb      	ldrb	r3, [r7, #22]
 80039b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	2002      	movs	r0, #2
 80039ba:	f7ff ff11 	bl	80037e0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	2004      	movs	r0, #4
 80039c2:	f7ff ff75 	bl	80038b0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	200a      	movs	r0, #10
 80039ca:	f7ff ff57 	bl	800387c <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80039ce:	2100      	movs	r1, #0
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7ff ff05 	bl	80037e0 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	827b      	strh	r3, [r7, #18]
 80039da:	e00a      	b.n	80039f2 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80039dc:	8a7b      	ldrh	r3, [r7, #18]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	2009      	movs	r0, #9
 80039e8:	f7ff fefa 	bl	80037e0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80039ec:	8a7b      	ldrh	r3, [r7, #18]
 80039ee:	3301      	adds	r3, #1
 80039f0:	827b      	strh	r3, [r7, #18]
 80039f2:	7bbb      	ldrb	r3, [r7, #14]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8a7a      	ldrh	r2, [r7, #18]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d3ef      	bcc.n	80039dc <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	4619      	mov	r1, r3
 8003a00:	2001      	movs	r0, #1
 8003a02:	f7ff feed 	bl	80037e0 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d103      	bne.n	8003a14 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	200d      	movs	r0, #13
 8003a10:	f7ff ff34 	bl	800387c <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003a14:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a18:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003a1a:	2004      	movs	r0, #4
 8003a1c:	f7ff ff06 	bl	800382c <TM_MFRC522_ReadRegister>
 8003a20:	4603      	mov	r3, r0
 8003a22:	753b      	strb	r3, [r7, #20]
		i--;
 8003a24:	8a7b      	ldrh	r3, [r7, #18]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003a2a:	8a7b      	ldrh	r3, [r7, #18]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <TM_MFRC522_ToCard+0xd6>
 8003a30:	7d3b      	ldrb	r3, [r7, #20]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <TM_MFRC522_ToCard+0xd6>
 8003a3a:	7d3a      	ldrb	r2, [r7, #20]
 8003a3c:	7d7b      	ldrb	r3, [r7, #21]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0e9      	beq.n	8003a1a <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	200d      	movs	r0, #13
 8003a4a:	f7ff ff31 	bl	80038b0 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003a4e:	8a7b      	ldrh	r3, [r7, #18]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d057      	beq.n	8003b04 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003a54:	2006      	movs	r0, #6
 8003a56:	f7ff fee9 	bl	800382c <TM_MFRC522_ReadRegister>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f003 031b 	and.w	r3, r3, #27
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14d      	bne.n	8003b00 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003a68:	7d3a      	ldrb	r2, [r7, #20]
 8003a6a:	7dbb      	ldrb	r3, [r7, #22]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d140      	bne.n	8003b04 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003a82:	200a      	movs	r0, #10
 8003a84:	f7ff fed2 	bl	800382c <TM_MFRC522_ReadRegister>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003a8c:	200c      	movs	r0, #12
 8003a8e:	f7ff fecd 	bl	800382c <TM_MFRC522_ReadRegister>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003a9a:	7c7b      	ldrb	r3, [r7, #17]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003aa0:	7d3b      	ldrb	r3, [r7, #20]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	7c7b      	ldrb	r3, [r7, #17]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	e005      	b.n	8003ac4 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003ab8:	7d3b      	ldrb	r3, [r7, #20]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003ac4:	7d3b      	ldrb	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003ace:	7d3b      	ldrb	r3, [r7, #20]
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d901      	bls.n	8003ad8 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003ad8:	2300      	movs	r3, #0
 8003ada:	827b      	strh	r3, [r7, #18]
 8003adc:	e00a      	b.n	8003af4 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003ade:	8a7b      	ldrh	r3, [r7, #18]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	18d4      	adds	r4, r2, r3
 8003ae4:	2009      	movs	r0, #9
 8003ae6:	f7ff fea1 	bl	800382c <TM_MFRC522_ReadRegister>
 8003aea:	4603      	mov	r3, r0
 8003aec:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003aee:	8a7b      	ldrh	r3, [r7, #18]
 8003af0:	3301      	adds	r3, #1
 8003af2:	827b      	strh	r3, [r7, #18]
 8003af4:	7d3b      	ldrb	r3, [r7, #20]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8a7a      	ldrh	r2, [r7, #18]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3ef      	bcc.n	8003ade <TM_MFRC522_ToCard+0x16e>
 8003afe:	e001      	b.n	8003b04 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003b00:	2302      	movs	r3, #2
 8003b02:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}

08003b0e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	200d      	movs	r0, #13
 8003b1e:	f7ff fe5f 	bl	80037e0 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2293      	movs	r2, #147	; 0x93
 8003b26:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003b30:	f107 030a 	add.w	r3, r7, #10
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	200c      	movs	r0, #12
 8003b3e:	f7ff ff17 	bl	8003970 <TM_MFRC522_ToCard>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d118      	bne.n	8003b7e <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73bb      	strb	r3, [r7, #14]
 8003b50:	e009      	b.n	8003b66 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	7b7b      	ldrb	r3, [r7, #13]
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	3301      	adds	r3, #1
 8003b64:	73bb      	strb	r3, [r7, #14]
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d9f2      	bls.n	8003b52 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	7b7a      	ldrb	r2, [r7, #13]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	460b      	mov	r3, r1
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003b96:	2104      	movs	r1, #4
 8003b98:	2005      	movs	r0, #5
 8003b9a:	f7ff fe89 	bl	80038b0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f7ff fe6b 	bl	800387c <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
 8003baa:	e00a      	b.n	8003bc2 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	2009      	movs	r0, #9
 8003bb8:	f7ff fe12 	bl	80037e0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
 8003bc2:	7dfa      	ldrb	r2, [r7, #23]
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3f0      	bcc.n	8003bac <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003bca:	2103      	movs	r1, #3
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f7ff fe07 	bl	80037e0 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003bd2:	23ff      	movs	r3, #255	; 0xff
 8003bd4:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003bd6:	2005      	movs	r0, #5
 8003bd8:	f7ff fe28 	bl	800382c <TM_MFRC522_ReadRegister>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75bb      	strb	r3, [r7, #22]
		i--;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <TM_MFRC522_CalculateCRC+0x6e>
 8003bec:	7dbb      	ldrb	r3, [r7, #22]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003bf6:	2022      	movs	r0, #34	; 0x22
 8003bf8:	f7ff fe18 	bl	800382c <TM_MFRC522_ReadRegister>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1c5c      	adds	r4, r3, #1
 8003c08:	2021      	movs	r0, #33	; 0x21
 8003c0a:	f7ff fe0f 	bl	800382c <TM_MFRC522_ReadRegister>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	7023      	strb	r3, [r4, #0]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}

08003c1a <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003c20:	2350      	movs	r3, #80	; 0x50
 8003c22:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003c28:	463b      	mov	r3, r7
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ffa9 	bl	8003b88 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003c36:	463a      	mov	r2, r7
 8003c38:	4639      	mov	r1, r7
 8003c3a:	1dbb      	adds	r3, r7, #6
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	2204      	movs	r2, #4
 8003c42:	200c      	movs	r0, #12
 8003c44:	f7ff fe94 	bl	8003970 <TM_MFRC522_ToCard>



}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6193      	str	r3, [r2, #24]
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	61d3      	str	r3, [r2, #28]
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_MspInit+0x68>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	210f      	movs	r1, #15
 8003c8a:	f06f 0001 	mvn.w	r0, #1
 8003c8e:	f000 fac6 	bl	800421e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_MspInit+0x6c>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_MspInit+0x6c>)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40010000 	.word	0x40010000

08003cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_SPI_MspInit+0x88>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d12f      	bne.n	8003d40 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cea:	6193      	str	r3, [r2, #24]
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6193      	str	r3, [r2, #24]
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_SPI_MspInit+0x8c>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d10:	23a0      	movs	r3, #160	; 0xa0
 8003d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4619      	mov	r1, r3
 8003d22:	480b      	ldr	r0, [pc, #44]	; (8003d50 <HAL_SPI_MspInit+0x90>)
 8003d24:	f000 fcb4 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d28:	2340      	movs	r3, #64	; 0x40
 8003d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <HAL_SPI_MspInit+0x90>)
 8003d3c:	f000 fca8 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013000 	.word	0x40013000
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40010800 	.word	0x40010800

08003d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d113      	bne.n	8003d8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_TIM_Base_MspInit+0x44>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_TIM_Base_MspInit+0x44>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	61d3      	str	r3, [r2, #28]
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_TIM_Base_MspInit+0x44>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2105      	movs	r1, #5
 8003d82:	201c      	movs	r0, #28
 8003d84:	f000 fa4b 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d88:	201c      	movs	r0, #28
 8003d8a:	f000 fa64 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000

08003d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003db2:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_InitTick+0xe8>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <HAL_InitTick+0xe8>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	61d3      	str	r3, [r2, #28]
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_InitTick+0xe8>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dca:	f107 0210 	add.w	r2, r7, #16
 8003dce:	f107 0314 	add.w	r3, r7, #20
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fa27 	bl	8005228 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003de4:	f001 fa0c 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8003de8:	6378      	str	r0, [r7, #52]	; 0x34
 8003dea:	e004      	b.n	8003df6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003dec:	f001 fa08 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8003df0:	4603      	mov	r3, r0
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_InitTick+0xec>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0c9b      	lsrs	r3, r3, #18
 8003e00:	3b01      	subs	r3, #1
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e06:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_InitTick+0xf4>)
 8003e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e10:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003e2a:	4818      	ldr	r0, [pc, #96]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e2c:	f001 fd16 	bl	800585c <HAL_TIM_Base_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11b      	bne.n	8003e76 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003e3e:	4813      	ldr	r0, [pc, #76]	; (8003e8c <HAL_InitTick+0xf0>)
 8003e40:	f001 fd5c 	bl	80058fc <HAL_TIM_Base_Start_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d111      	bne.n	8003e76 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e52:	201e      	movs	r0, #30
 8003e54:	f000 f9ff 	bl	8004256 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d808      	bhi.n	8003e70 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	201e      	movs	r0, #30
 8003e64:	f000 f9db 	bl	800421e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_InitTick+0xf8>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e002      	b.n	8003e76 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3738      	adds	r7, #56	; 0x38
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	20000424 	.word	0x20000424
 8003e90:	40000800 	.word	0x40000800
 8003e94:	20000020 	.word	0x20000020

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_Pin);
 8003ec6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003eca:	f000 fdad 	bl	8004a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <TIM2_IRQHandler+0x10>)
 8003eda:	f001 fd61 	bl	80059a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000358 	.word	0x20000358

08003ee8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003eec:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <TIM4_IRQHandler+0x10>)
 8003eee:	f001 fd57 	bl	80059a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000424 	.word	0x20000424

08003efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <_sbrk+0x5c>)
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <_sbrk+0x60>)
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f10:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <_sbrk+0x64>)
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <_sbrk+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <_sbrk+0x64>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d207      	bcs.n	8003f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f2c:	f003 fc46 	bl	80077bc <__errno>
 8003f30:	4603      	mov	r3, r0
 8003f32:	220c      	movs	r2, #12
 8003f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	e009      	b.n	8003f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <_sbrk+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f42:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <_sbrk+0x64>)
 8003f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20005000 	.word	0x20005000
 8003f5c:	00000400 	.word	0x00000400
 8003f60:	2000046c 	.word	0x2000046c
 8003f64:	200011f8 	.word	0x200011f8

08003f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f74:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f76:	490d      	ldr	r1, [pc, #52]	; (8003fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f7c:	e002      	b.n	8003f84 <LoopCopyDataInit>

08003f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f82:	3304      	adds	r3, #4

08003f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f88:	d3f9      	bcc.n	8003f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f8c:	4c0a      	ldr	r4, [pc, #40]	; (8003fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f90:	e001      	b.n	8003f96 <LoopFillZerobss>

08003f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f94:	3204      	adds	r2, #4

08003f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f98:	d3fb      	bcc.n	8003f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f9a:	f7ff ffe5 	bl	8003f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f9e:	f003 fc13 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fa2:	f7fc fc45 	bl	8000830 <main>
  bx lr
 8003fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8003fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003fb0:	0800852c 	.word	0x0800852c
  ldr r2, =_sbss
 8003fb4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003fb8:	200011f4 	.word	0x200011f4

08003fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <ADC1_2_IRQHandler>
	...

08003fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_Init+0x28>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_Init+0x28>)
 8003fca:	f043 0310 	orr.w	r3, r3, #16
 8003fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f000 f919 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fd6:	200f      	movs	r0, #15
 8003fd8:	f7ff fee0 	bl	8003d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fdc:	f7ff fe38 	bl	8003c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40022000 	.word	0x40022000

08003fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_IncTick+0x1c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_IncTick+0x20>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a03      	ldr	r2, [pc, #12]	; (800400c <HAL_IncTick+0x20>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	20000024 	.word	0x20000024
 800400c:	20000470 	.word	0x20000470

08004010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return uwTick;
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <HAL_GetTick+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000470 	.word	0x20000470

08004024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fff0 	bl	8004010 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d005      	beq.n	800404a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_Delay+0x44>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800404a:	bf00      	nop
 800404c:	f7ff ffe0 	bl	8004010 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d8f7      	bhi.n	800404c <HAL_Delay+0x28>
  {
  }
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000024 	.word	0x20000024

0800406c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004088:	4013      	ands	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800409c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800409e:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	60d3      	str	r3, [r2, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <__NVIC_GetPriorityGrouping+0x18>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	f003 0307 	and.w	r3, r3, #7
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	db0b      	blt.n	80040fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	f003 021f 	and.w	r2, r3, #31
 80040e8:	4906      	ldr	r1, [pc, #24]	; (8004104 <__NVIC_EnableIRQ+0x34>)
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2001      	movs	r0, #1
 80040f2:	fa00 f202 	lsl.w	r2, r0, r2
 80040f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	e000e100 	.word	0xe000e100

08004108 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db12      	blt.n	8004140 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	490a      	ldr	r1, [pc, #40]	; (800414c <__NVIC_DisableIRQ+0x44>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	3320      	adds	r3, #32
 8004130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004134:	f3bf 8f4f 	dsb	sy
}
 8004138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800413a:	f3bf 8f6f 	isb	sy
}
 800413e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	; (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff2b 	bl	800406c <__NVIC_SetPriorityGrouping>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004230:	f7ff ff40 	bl	80040b4 <__NVIC_GetPriorityGrouping>
 8004234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff ffb2 	bl	80041a4 <NVIC_EncodePriority>
 8004240:	4602      	mov	r2, r0
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff81 	bl	8004150 <__NVIC_SetPriority>
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff33 	bl	80040d0 <__NVIC_EnableIRQ>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff41 	bl	8004108 <__NVIC_DisableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <HAL_FLASH_Program+0xd8>)
 80042ac:	7e1b      	ldrb	r3, [r3, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_FLASH_Program+0x26>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e054      	b.n	8004360 <HAL_FLASH_Program+0xd0>
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_FLASH_Program+0xd8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042c0:	f000 f8a8 	bl	8004414 <FLASH_WaitForLastOperation>
 80042c4:	4603      	mov	r3, r0
 80042c6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d144      	bne.n	8004358 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	757b      	strb	r3, [r7, #21]
 80042d8:	e007      	b.n	80042ea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d102      	bne.n	80042e6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80042e0:	2302      	movs	r3, #2
 80042e2:	757b      	strb	r3, [r7, #21]
 80042e4:	e001      	b.n	80042ea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80042e6:	2304      	movs	r3, #4
 80042e8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	75bb      	strb	r3, [r7, #22]
 80042ee:	e02d      	b.n	800434c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80042f0:	7dbb      	ldrb	r3, [r7, #22]
 80042f2:	005a      	lsls	r2, r3, #1
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	eb02 0c03 	add.w	ip, r2, r3
 80042fa:	7dbb      	ldrb	r3, [r7, #22]
 80042fc:	0119      	lsls	r1, r3, #4
 80042fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004302:	f1c1 0620 	rsb	r6, r1, #32
 8004306:	f1a1 0020 	sub.w	r0, r1, #32
 800430a:	fa22 f401 	lsr.w	r4, r2, r1
 800430e:	fa03 f606 	lsl.w	r6, r3, r6
 8004312:	4334      	orrs	r4, r6
 8004314:	fa23 f000 	lsr.w	r0, r3, r0
 8004318:	4304      	orrs	r4, r0
 800431a:	fa23 f501 	lsr.w	r5, r3, r1
 800431e:	b2a3      	uxth	r3, r4
 8004320:	4619      	mov	r1, r3
 8004322:	4660      	mov	r0, ip
 8004324:	f000 f85a 	bl	80043dc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004328:	f24c 3050 	movw	r0, #50000	; 0xc350
 800432c:	f000 f872 	bl	8004414 <FLASH_WaitForLastOperation>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_FLASH_Program+0xdc>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_FLASH_Program+0xdc>)
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004346:	7dbb      	ldrb	r3, [r7, #22]
 8004348:	3301      	adds	r3, #1
 800434a:	75bb      	strb	r3, [r7, #22]
 800434c:	7dba      	ldrb	r2, [r7, #22]
 800434e:	7d7b      	ldrb	r3, [r7, #21]
 8004350:	429a      	cmp	r2, r3
 8004352:	d3cd      	bcc.n	80042f0 <HAL_FLASH_Program+0x60>
 8004354:	e000      	b.n	8004358 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004356:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_FLASH_Program+0xd8>)
 800435a:	2200      	movs	r2, #0
 800435c:	761a      	strb	r2, [r3, #24]

  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004368:	20000478 	.word	0x20000478
 800436c:	40022000 	.word	0x40022000

08004370 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <HAL_FLASH_Unlock+0x40>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_FLASH_Unlock+0x40>)
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_FLASH_Unlock+0x44>)
 800438a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_FLASH_Unlock+0x40>)
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_FLASH_Unlock+0x48>)
 8004390:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_FLASH_Unlock+0x40>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80043a2:	79fb      	ldrb	r3, [r7, #7]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40022000 	.word	0x40022000
 80043b4:	45670123 	.word	0x45670123
 80043b8:	cdef89ab 	.word	0xcdef89ab

080043bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_FLASH_Lock+0x1c>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_FLASH_Lock+0x1c>)
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000

080043dc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <FLASH_Program_HalfWord+0x30>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <FLASH_Program_HalfWord+0x34>)
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	4a07      	ldr	r2, [pc, #28]	; (8004410 <FLASH_Program_HalfWord+0x34>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	801a      	strh	r2, [r3, #0]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000478 	.word	0x20000478
 8004410:	40022000 	.word	0x40022000

08004414 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff fdf8 	bl	8004010 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004422:	e010      	b.n	8004446 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d00c      	beq.n	8004446 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <FLASH_WaitForLastOperation+0x2e>
 8004432:	f7ff fded 	bl	8004010 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d201      	bcs.n	8004446 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e025      	b.n	8004492 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e8      	bne.n	8004424 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 8004460:	2220      	movs	r2, #32
 8004462:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <FLASH_WaitForLastOperation+0x88>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004488:	f000 f80a 	bl	80044a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40022000 	.word	0x40022000

080044a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <FLASH_SetErrorCode+0x98>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <FLASH_SetErrorCode+0x9c>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f043 0302 	orr.w	r3, r3, #2
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <FLASH_SetErrorCode+0x9c>)
 80044c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f043 0310 	orr.w	r3, r3, #16
 80044c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <FLASH_SetErrorCode+0x98>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <FLASH_SetErrorCode+0x9c>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <FLASH_SetErrorCode+0x9c>)
 80044e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <FLASH_SetErrorCode+0x98>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <FLASH_SetErrorCode+0x9c>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	4a0f      	ldr	r2, [pc, #60]	; (800453c <FLASH_SetErrorCode+0x9c>)
 8004500:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <FLASH_SetErrorCode+0x98>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <FLASH_SetErrorCode+0x98>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f240 1201 	movw	r2, #257	; 0x101
 8004514:	4293      	cmp	r3, r2
 8004516:	d106      	bne.n	8004526 <FLASH_SetErrorCode+0x86>
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <FLASH_SetErrorCode+0x98>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <FLASH_SetErrorCode+0x98>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	61d3      	str	r3, [r2, #28]
}  
 8004524:	e002      	b.n	800452c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <FLASH_SetErrorCode+0x98>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60d3      	str	r3, [r2, #12]
}  
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40022000 	.word	0x40022000
 800453c:	20000478 	.word	0x20000478

08004540 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004552:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <HAL_FLASHEx_Erase+0xd0>)
 8004554:	7e1b      	ldrb	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_FLASHEx_Erase+0x1e>
 800455a:	2302      	movs	r3, #2
 800455c:	e053      	b.n	8004606 <HAL_FLASHEx_Erase+0xc6>
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_FLASHEx_Erase+0xd0>)
 8004560:	2201      	movs	r2, #1
 8004562:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d116      	bne.n	800459a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800456c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004570:	f7ff ff50 	bl	8004414 <FLASH_WaitForLastOperation>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d141      	bne.n	80045fe <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800457a:	2001      	movs	r0, #1
 800457c:	f000 f84c 	bl	8004618 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004580:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004584:	f7ff ff46 	bl	8004414 <FLASH_WaitForLastOperation>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_FLASHEx_Erase+0xd4>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <HAL_FLASHEx_Erase+0xd4>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6113      	str	r3, [r2, #16]
 8004598:	e031      	b.n	80045fe <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800459a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800459e:	f7ff ff39 	bl	8004414 <FLASH_WaitForLastOperation>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d12a      	bne.n	80045fe <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	e019      	b.n	80045ec <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f000 f849 	bl	8004650 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045c2:	f7ff ff27 	bl	8004414 <FLASH_WaitForLastOperation>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_FLASHEx_Erase+0xd4>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4a11      	ldr	r2, [pc, #68]	; (8004614 <HAL_FLASHEx_Erase+0xd4>)
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	601a      	str	r2, [r3, #0]
            break;
 80045e2:	e00c      	b.n	80045fe <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ea:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	029a      	lsls	r2, r3, #10
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3dc      	bcc.n	80045b8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_FLASHEx_Erase+0xd0>)
 8004600:	2200      	movs	r2, #0
 8004602:	761a      	strb	r2, [r3, #24]

  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000478 	.word	0x20000478
 8004614:	40022000 	.word	0x40022000

08004618 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <FLASH_MassErase+0x30>)
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <FLASH_MassErase+0x34>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <FLASH_MassErase+0x34>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <FLASH_MassErase+0x34>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <FLASH_MassErase+0x34>)
 8004638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	20000478 	.word	0x20000478
 800464c:	40022000 	.word	0x40022000

08004650 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <FLASH_PageErase+0x38>)
 800465a:	2200      	movs	r2, #0
 800465c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <FLASH_PageErase+0x3c>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <FLASH_PageErase+0x3c>)
 8004664:	f043 0302 	orr.w	r3, r3, #2
 8004668:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <FLASH_PageErase+0x3c>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <FLASH_PageErase+0x3c>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	4a05      	ldr	r2, [pc, #20]	; (800468c <FLASH_PageErase+0x3c>)
 8004676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000478 	.word	0x20000478
 800468c:	40022000 	.word	0x40022000

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b08b      	sub	sp, #44	; 0x2c
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800469e:	2300      	movs	r3, #0
 80046a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a2:	e169      	b.n	8004978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046a4:	2201      	movs	r2, #1
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	429a      	cmp	r2, r3
 80046be:	f040 8158 	bne.w	8004972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4a9a      	ldr	r2, [pc, #616]	; (8004930 <HAL_GPIO_Init+0x2a0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d05e      	beq.n	800478a <HAL_GPIO_Init+0xfa>
 80046cc:	4a98      	ldr	r2, [pc, #608]	; (8004930 <HAL_GPIO_Init+0x2a0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d875      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 80046d2:	4a98      	ldr	r2, [pc, #608]	; (8004934 <HAL_GPIO_Init+0x2a4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d058      	beq.n	800478a <HAL_GPIO_Init+0xfa>
 80046d8:	4a96      	ldr	r2, [pc, #600]	; (8004934 <HAL_GPIO_Init+0x2a4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d86f      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 80046de:	4a96      	ldr	r2, [pc, #600]	; (8004938 <HAL_GPIO_Init+0x2a8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d052      	beq.n	800478a <HAL_GPIO_Init+0xfa>
 80046e4:	4a94      	ldr	r2, [pc, #592]	; (8004938 <HAL_GPIO_Init+0x2a8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d869      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 80046ea:	4a94      	ldr	r2, [pc, #592]	; (800493c <HAL_GPIO_Init+0x2ac>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d04c      	beq.n	800478a <HAL_GPIO_Init+0xfa>
 80046f0:	4a92      	ldr	r2, [pc, #584]	; (800493c <HAL_GPIO_Init+0x2ac>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d863      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 80046f6:	4a92      	ldr	r2, [pc, #584]	; (8004940 <HAL_GPIO_Init+0x2b0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d046      	beq.n	800478a <HAL_GPIO_Init+0xfa>
 80046fc:	4a90      	ldr	r2, [pc, #576]	; (8004940 <HAL_GPIO_Init+0x2b0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d85d      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 8004702:	2b12      	cmp	r3, #18
 8004704:	d82a      	bhi.n	800475c <HAL_GPIO_Init+0xcc>
 8004706:	2b12      	cmp	r3, #18
 8004708:	d859      	bhi.n	80047be <HAL_GPIO_Init+0x12e>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_GPIO_Init+0x80>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	0800478b 	.word	0x0800478b
 8004714:	08004765 	.word	0x08004765
 8004718:	08004777 	.word	0x08004777
 800471c:	080047b9 	.word	0x080047b9
 8004720:	080047bf 	.word	0x080047bf
 8004724:	080047bf 	.word	0x080047bf
 8004728:	080047bf 	.word	0x080047bf
 800472c:	080047bf 	.word	0x080047bf
 8004730:	080047bf 	.word	0x080047bf
 8004734:	080047bf 	.word	0x080047bf
 8004738:	080047bf 	.word	0x080047bf
 800473c:	080047bf 	.word	0x080047bf
 8004740:	080047bf 	.word	0x080047bf
 8004744:	080047bf 	.word	0x080047bf
 8004748:	080047bf 	.word	0x080047bf
 800474c:	080047bf 	.word	0x080047bf
 8004750:	080047bf 	.word	0x080047bf
 8004754:	0800476d 	.word	0x0800476d
 8004758:	08004781 	.word	0x08004781
 800475c:	4a79      	ldr	r2, [pc, #484]	; (8004944 <HAL_GPIO_Init+0x2b4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004762:	e02c      	b.n	80047be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	623b      	str	r3, [r7, #32]
          break;
 800476a:	e029      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	3304      	adds	r3, #4
 8004772:	623b      	str	r3, [r7, #32]
          break;
 8004774:	e024      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	3308      	adds	r3, #8
 800477c:	623b      	str	r3, [r7, #32]
          break;
 800477e:	e01f      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	330c      	adds	r3, #12
 8004786:	623b      	str	r3, [r7, #32]
          break;
 8004788:	e01a      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004792:	2304      	movs	r3, #4
 8004794:	623b      	str	r3, [r7, #32]
          break;
 8004796:	e013      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a0:	2308      	movs	r3, #8
 80047a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	611a      	str	r2, [r3, #16]
          break;
 80047aa:	e009      	b.n	80047c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047ac:	2308      	movs	r3, #8
 80047ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	615a      	str	r2, [r3, #20]
          break;
 80047b6:	e003      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
          break;
 80047bc:	e000      	b.n	80047c0 <HAL_GPIO_Init+0x130>
          break;
 80047be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2bff      	cmp	r3, #255	; 0xff
 80047c4:	d801      	bhi.n	80047ca <HAL_GPIO_Init+0x13a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_Init+0x13e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2bff      	cmp	r3, #255	; 0xff
 80047d4:	d802      	bhi.n	80047dc <HAL_GPIO_Init+0x14c>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	e002      	b.n	80047e2 <HAL_GPIO_Init+0x152>
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	3b08      	subs	r3, #8
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	210f      	movs	r1, #15
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	6a39      	ldr	r1, [r7, #32]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	431a      	orrs	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80b1 	beq.w	8004972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004810:	4b4d      	ldr	r3, [pc, #308]	; (8004948 <HAL_GPIO_Init+0x2b8>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4a4c      	ldr	r2, [pc, #304]	; (8004948 <HAL_GPIO_Init+0x2b8>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6193      	str	r3, [r2, #24]
 800481c:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <HAL_GPIO_Init+0x2b8>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004828:	4a48      	ldr	r2, [pc, #288]	; (800494c <HAL_GPIO_Init+0x2bc>)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3302      	adds	r3, #2
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	220f      	movs	r2, #15
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a40      	ldr	r2, [pc, #256]	; (8004950 <HAL_GPIO_Init+0x2c0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_GPIO_Init+0x1ec>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3f      	ldr	r2, [pc, #252]	; (8004954 <HAL_GPIO_Init+0x2c4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00d      	beq.n	8004878 <HAL_GPIO_Init+0x1e8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <HAL_GPIO_Init+0x2c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <HAL_GPIO_Init+0x1e4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3d      	ldr	r2, [pc, #244]	; (800495c <HAL_GPIO_Init+0x2cc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_GPIO_Init+0x1e0>
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004870:	2304      	movs	r3, #4
 8004872:	e004      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004874:	2302      	movs	r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 800487c:	2300      	movs	r3, #0
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800488e:	492f      	ldr	r1, [pc, #188]	; (800494c <HAL_GPIO_Init+0x2bc>)
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	3302      	adds	r3, #2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048a8:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	492c      	ldr	r1, [pc, #176]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	e006      	b.n	80048c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	43db      	mvns	r3, r3
 80048be:	4928      	ldr	r1, [pc, #160]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
 80048dc:	e006      	b.n	80048ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	491e      	ldr	r1, [pc, #120]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d006      	beq.n	8004906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4918      	ldr	r1, [pc, #96]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
 8004904:	e006      	b.n	8004914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	43db      	mvns	r3, r3
 800490e:	4914      	ldr	r1, [pc, #80]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 8004910:	4013      	ands	r3, r2
 8004912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d021      	beq.n	8004964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e021      	b.n	8004972 <HAL_GPIO_Init+0x2e2>
 800492e:	bf00      	nop
 8004930:	10320000 	.word	0x10320000
 8004934:	10310000 	.word	0x10310000
 8004938:	10220000 	.word	0x10220000
 800493c:	10210000 	.word	0x10210000
 8004940:	10120000 	.word	0x10120000
 8004944:	10110000 	.word	0x10110000
 8004948:	40021000 	.word	0x40021000
 800494c:	40010000 	.word	0x40010000
 8004950:	40010800 	.word	0x40010800
 8004954:	40010c00 	.word	0x40010c00
 8004958:	40011000 	.word	0x40011000
 800495c:	40011400 	.word	0x40011400
 8004960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_GPIO_Init+0x304>)
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	43db      	mvns	r3, r3
 800496c:	4909      	ldr	r1, [pc, #36]	; (8004994 <HAL_GPIO_Init+0x304>)
 800496e:	4013      	ands	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f ae8e 	bne.w	80046a4 <HAL_GPIO_Init+0x14>
  }
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	372c      	adds	r7, #44	; 0x2c
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40010400 	.word	0x40010400

08004998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e001      	b.n	80049ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	807b      	strh	r3, [r7, #2]
 80049d2:	4613      	mov	r3, r2
 80049d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d6:	787b      	ldrb	r3, [r7, #1]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049e2:	e003      	b.n	80049ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	041a      	lsls	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	611a      	str	r2, [r3, #16]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a08:	887a      	ldrh	r2, [r7, #2]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	041a      	lsls	r2, r3, #16
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	400b      	ands	r3, r1
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d006      	beq.n	8004a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fc9a 	bl	8003380 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40010400 	.word	0x40010400

08004a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e272      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8087 	beq.w	8004b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a78:	4b92      	ldr	r3, [pc, #584]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d00c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a84:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d112      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x5e>
 8004a90:	4b8c      	ldr	r3, [pc, #560]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9e:	4b89      	ldr	r3, [pc, #548]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d06c      	beq.n	8004b84 <HAL_RCC_OscConfig+0x12c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d168      	bne.n	8004b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e24c      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x76>
 8004ac0:	4b80      	ldr	r3, [pc, #512]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a7f      	ldr	r2, [pc, #508]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	e02e      	b.n	8004b2c <HAL_RCC_OscConfig+0xd4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x98>
 8004ad6:	4b7b      	ldr	r3, [pc, #492]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a7a      	ldr	r2, [pc, #488]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b78      	ldr	r3, [pc, #480]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a77      	ldr	r2, [pc, #476]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e01d      	b.n	8004b2c <HAL_RCC_OscConfig+0xd4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0xbc>
 8004afa:	4b72      	ldr	r3, [pc, #456]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a71      	ldr	r2, [pc, #452]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b6f      	ldr	r3, [pc, #444]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a6e      	ldr	r2, [pc, #440]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0xd4>
 8004b14:	4b6b      	ldr	r3, [pc, #428]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a6a      	ldr	r2, [pc, #424]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a67      	ldr	r2, [pc, #412]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7ff fa6c 	bl	8004010 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7ff fa68 	bl	8004010 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e200      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0xe4>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7ff fa58 	bl	8004010 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7ff fa54 	bl	8004010 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1ec      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b76:	4b53      	ldr	r3, [pc, #332]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x10c>
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b92:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b9e:	4b49      	ldr	r3, [pc, #292]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d11c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x18c>
 8004baa:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d116      	bne.n	8004be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x176>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e1c0      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bce:	4b3d      	ldr	r3, [pc, #244]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4939      	ldr	r1, [pc, #228]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	e03a      	b.n	8004c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d020      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <HAL_RCC_OscConfig+0x270>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7ff fa0d 	bl	8004010 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7ff fa09 	bl	8004010 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e1a1      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0c:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4927      	ldr	r1, [pc, #156]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]
 8004c2c:	e015      	b.n	8004c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <HAL_RCC_OscConfig+0x270>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7ff f9ec 	bl	8004010 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7ff f9e8 	bl	8004010 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e180      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03a      	beq.n	8004cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d019      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6e:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c74:	f7ff f9cc 	bl	8004010 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7c:	f7ff f9c8 	bl	8004010 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e160      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f000 faf4 	bl	8005288 <RCC_Delay>
 8004ca0:	e01c      	b.n	8004cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca8:	f7ff f9b2 	bl	8004010 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cae:	e00f      	b.n	8004cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7ff f9ae 	bl	8004010 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d908      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e146      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	42420000 	.word	0x42420000
 8004ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd0:	4b92      	ldr	r3, [pc, #584]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e9      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a6 	beq.w	8004e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	61d3      	str	r3, [r2, #28]
 8004d06:	4b85      	ldr	r3, [pc, #532]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <HAL_RCC_OscConfig+0x4c8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d118      	bne.n	8004d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d22:	4b7f      	ldr	r3, [pc, #508]	; (8004f20 <HAL_RCC_OscConfig+0x4c8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7e      	ldr	r2, [pc, #504]	; (8004f20 <HAL_RCC_OscConfig+0x4c8>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2e:	f7ff f96f 	bl	8004010 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7ff f96b 	bl	8004010 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b64      	cmp	r3, #100	; 0x64
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e103      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d48:	4b75      	ldr	r3, [pc, #468]	; (8004f20 <HAL_RCC_OscConfig+0x4c8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCC_OscConfig+0x312>
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	e02d      	b.n	8004dc6 <HAL_RCC_OscConfig+0x36e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x334>
 8004d72:	4b6a      	ldr	r3, [pc, #424]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	4a69      	ldr	r2, [pc, #420]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	6213      	str	r3, [r2, #32]
 8004d7e:	4b67      	ldr	r3, [pc, #412]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	f023 0304 	bic.w	r3, r3, #4
 8004d88:	6213      	str	r3, [r2, #32]
 8004d8a:	e01c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x36e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x356>
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	4a60      	ldr	r2, [pc, #384]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	6213      	str	r3, [r2, #32]
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a5d      	ldr	r2, [pc, #372]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6213      	str	r3, [r2, #32]
 8004dac:	e00b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x36e>
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	4a5a      	ldr	r2, [pc, #360]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6213      	str	r3, [r2, #32]
 8004dba:	4b58      	ldr	r3, [pc, #352]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	4a57      	ldr	r2, [pc, #348]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dce:	f7ff f91f 	bl	8004010 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7ff f91b 	bl	8004010 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0b1      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ee      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x37e>
 8004df8:	e014      	b.n	8004e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfa:	f7ff f909 	bl	8004010 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7ff f905 	bl	8004010 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e09b      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e18:	4b40      	ldr	r3, [pc, #256]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ee      	bne.n	8004e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8087 	beq.w	8004f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d061      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d146      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7ff f8d9 	bl	8004010 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7ff f8d5 	bl	8004010 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e06d      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e74:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d108      	bne.n	8004e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	4921      	ldr	r1, [pc, #132]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a19      	ldr	r1, [r3, #32]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	430b      	orrs	r3, r1
 8004eae:	491b      	ldr	r1, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eba:	f7ff f8a9 	bl	8004010 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7ff f8a5 	bl	8004010 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e03d      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed4:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x46a>
 8004ee0:	e035      	b.n	8004f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_RCC_OscConfig+0x4cc>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7ff f892 	bl	8004010 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7ff f88e 	bl	8004010 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e026      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x498>
 8004f0e:	e01e      	b.n	8004f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e019      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40007000 	.word	0x40007000
 8004f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_OscConfig+0x500>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000

08004f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4965      	ldr	r1, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d040      	beq.n	800507c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e073      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4936      	ldr	r1, [pc, #216]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800504c:	f7fe ffe0 	bl	8004010 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fe ffdc 	bl	8004010 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e053      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d210      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 0207 	bic.w	r2, r3, #7
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1cc>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fe46 	bl	8003d9c <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	080084d8 	.word	0x080084d8
 8005128:	2000001c 	.word	0x2000001c
 800512c:	20000020 	.word	0x20000020

08005130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b490      	push	{r4, r7}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005136:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_RCC_GetSysClockFreq+0xac>)
 8005138:	1d3c      	adds	r4, r7, #4
 800513a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005140:	f240 2301 	movw	r3, #513	; 0x201
 8005144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x46>
 800516e:	e02b      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e02b      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	0c9b      	lsrs	r3, r3, #18
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	3328      	adds	r3, #40	; 0x28
 8005180:	443b      	add	r3, r7
 8005182:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005186:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	0c5b      	lsrs	r3, r3, #17
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	3328      	adds	r3, #40	; 0x28
 800519e:	443b      	add	r3, r7
 80051a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051aa:	fb03 f202 	mul.w	r2, r3, r2
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	e004      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	623b      	str	r3, [r7, #32]
      break;
 80051c6:	e002      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051ca:	623b      	str	r3, [r7, #32]
      break;
 80051cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc90      	pop	{r4, r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	080084c0 	.word	0x080084c0
 80051e0:	40021000 	.word	0x40021000
 80051e4:	007a1200 	.word	0x007a1200
 80051e8:	003d0900 	.word	0x003d0900

080051ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f0:	4b02      	ldr	r3, [pc, #8]	; (80051fc <HAL_RCC_GetHCLKFreq+0x10>)
 80051f2:	681b      	ldr	r3, [r3, #0]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	2000001c 	.word	0x2000001c

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff2 	bl	80051ec <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	080084e8 	.word	0x080084e8

08005228 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	220f      	movs	r2, #15
 8005236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0207 	and.w	r2, r3, #7
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	40021000 	.word	0x40021000
 8005284:	40022000 	.word	0x40022000

08005288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <RCC_Delay+0x34>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <RCC_Delay+0x38>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0a5b      	lsrs	r3, r3, #9
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052a4:	bf00      	nop
  }
  while (Delay --);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f9      	bne.n	80052a4 <RCC_Delay+0x1c>
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	2000001c 	.word	0x2000001c
 80052c0:	10624dd3 	.word	0x10624dd3

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e076      	b.n	80053c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e005      	b.n	80052fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fe fcd2 	bl	8003cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	0c1a      	lsrs	r2, r3, #16
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f002 0204 	and.w	r2, r2, #4
 80053a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08c      	sub	sp, #48	; 0x30
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053da:	2301      	movs	r3, #1
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x26>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e18a      	b.n	8005708 <HAL_SPI_TransmitReceive+0x33c>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053fa:	f7fe fe09 	bl	8004010 <HAL_GetTick>
 80053fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005410:	887b      	ldrh	r3, [r7, #2]
 8005412:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005418:	2b01      	cmp	r3, #1
 800541a:	d00f      	beq.n	800543c <HAL_SPI_TransmitReceive+0x70>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d107      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x68>
 800542c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005430:	2b04      	cmp	r3, #4
 8005432:	d003      	beq.n	800543c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800543a:	e15b      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_SPI_TransmitReceive+0x82>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_TransmitReceive+0x82>
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005454:	e14e      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b04      	cmp	r3, #4
 8005460:	d003      	beq.n	800546a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2205      	movs	r2, #5
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	887a      	ldrh	r2, [r7, #2]
 800547a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	887a      	ldrh	r2, [r7, #2]
 8005492:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d007      	beq.n	80054be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	d178      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x10a>
 80054d0:	8b7b      	ldrh	r3, [r7, #26]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d166      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054fa:	e053      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d11b      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x176>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_SPI_TransmitReceive+0x176>
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d113      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	881a      	ldrh	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d119      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x1b8>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	b292      	uxth	r2, r2
 8005566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	1c9a      	adds	r2, r3, #2
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005580:	2301      	movs	r3, #1
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005584:	f7fe fd44 	bl	8004010 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005590:	429a      	cmp	r2, r3
 8005592:	d807      	bhi.n	80055a4 <HAL_SPI_TransmitReceive+0x1d8>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d003      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055a2:	e0a7      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1a6      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x130>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1a1      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x130>
 80055b8:	e07c      	b.n	80056b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x1fc>
 80055c2:	8b7b      	ldrh	r3, [r7, #26]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d16b      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ee:	e057      	b.n	80056a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d11c      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x26c>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x26c>
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d114      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d119      	bne.n	800567a <HAL_SPI_TransmitReceive+0x2ae>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d014      	beq.n	800567a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005676:	2301      	movs	r3, #1
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800567a:	f7fe fcc9 	bl	8004010 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005686:	429a      	cmp	r2, r3
 8005688:	d803      	bhi.n	8005692 <HAL_SPI_TransmitReceive+0x2c6>
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d102      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x2cc>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800569e:	e029      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1a2      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x224>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d19d      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f8b1 	bl	8005820 <SPI_EndRxTxTransaction>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056d0:	e010      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	e000      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005708:	4618      	mov	r0, r3
 800570a:	3730      	adds	r7, #48	; 0x30
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005720:	f7fe fc76 	bl	8004010 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4413      	add	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005730:	f7fe fc6e 	bl	8004010 <HAL_GetTick>
 8005734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005736:	4b39      	ldr	r3, [pc, #228]	; (800581c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	015b      	lsls	r3, r3, #5
 800573c:	0d1b      	lsrs	r3, r3, #20
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005746:	e054      	b.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d050      	beq.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005750:	f7fe fc5e 	bl	8004010 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	429a      	cmp	r2, r3
 800575e:	d902      	bls.n	8005766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d13d      	bne.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d111      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	d004      	beq.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d107      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d10f      	bne.n	80057ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e017      	b.n	8005812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	429a      	cmp	r2, r3
 800580e:	d19b      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000001c 	.word	0x2000001c

08005820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff6a 	bl	8005710 <SPI_WaitFlagStateUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e000      	b.n	8005854 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e041      	b.n	80058f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fe fa66 	bl	8003d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fa70 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e03a      	b.n	800598a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIM_Base_Start_IT+0x98>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x58>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d009      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x58>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <HAL_TIM_Base_Start_IT+0x9c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x58>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <HAL_TIM_Base_Start_IT+0xa0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d111      	bne.n	8005978 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b06      	cmp	r3, #6
 8005964:	d010      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	e007      	b.n	8005988 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800

080059a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d122      	bne.n	80059fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d11b      	bne.n	80059fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0202 	mvn.w	r2, #2
 80059cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9b1 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9a4 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f9b3 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0204 	mvn.w	r2, #4
 8005a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f987 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f97a 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f989 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0208 	mvn.w	r2, #8
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f95d 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f950 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f95f 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b10      	cmp	r3, #16
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0210 	mvn.w	r2, #16
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2208      	movs	r2, #8
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f933 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f926 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f935 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0201 	mvn.w	r2, #1
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fd fdc4 	bl	80036ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa77 	bl	800603e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8f9 	bl	8005d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0220 	mvn.w	r2, #32
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa42 	bl	800602c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_ConfigClockSource+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0b3      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x180>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c00:	d03e      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0xd0>
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	f200 8087 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	f000 8085 	beq.w	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d87f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c18:	2b70      	cmp	r3, #112	; 0x70
 8005c1a:	d01a      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xa2>
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d87b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c20:	2b60      	cmp	r3, #96	; 0x60
 8005c22:	d050      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x116>
 8005c24:	2b60      	cmp	r3, #96	; 0x60
 8005c26:	d877      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c28:	2b50      	cmp	r3, #80	; 0x50
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0xf6>
 8005c2c:	2b50      	cmp	r3, #80	; 0x50
 8005c2e:	d873      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d058      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x136>
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d86f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d064      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x156>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d86b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d060      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x156>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d867      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x156>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d05a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c50:	e062      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f000 f966 	bl	8005f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	609a      	str	r2, [r3, #8]
      break;
 8005c7e:	e04e      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f000 f94f 	bl	8005f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca2:	609a      	str	r2, [r3, #8]
      break;
 8005ca4:	e03b      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 f8c6 	bl	8005e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2150      	movs	r1, #80	; 0x50
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f91d 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e02b      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 f8e4 	bl	8005ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2160      	movs	r1, #96	; 0x60
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f90d 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e01b      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 f8a6 	bl	8005e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f8fd 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005d04:	e00b      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 f8f4 	bl	8005efe <TIM_ITRx_SetConfig>
        break;
 8005d16:	e002      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a29      	ldr	r2, [pc, #164]	; (8005e38 <TIM_Base_SetConfig+0xb8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <TIM_Base_SetConfig+0xbc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <TIM_Base_SetConfig+0xc0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <TIM_Base_SetConfig+0xb8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <TIM_Base_SetConfig+0xbc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <TIM_Base_SetConfig+0xc0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a07      	ldr	r2, [pc, #28]	; (8005e38 <TIM_Base_SetConfig+0xb8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d103      	bne.n	8005e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	615a      	str	r2, [r3, #20]
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800

08005e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 030a 	bic.w	r3, r3, #10
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f023 0210 	bic.w	r2, r3, #16
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	031b      	lsls	r3, r3, #12
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr

08005efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f043 0307 	orr.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr

08005f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	021a      	lsls	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e046      	b.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a16      	ldr	r2, [pc, #88]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00e      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d009      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10c      	bne.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800

0800602c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800605e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006062:	2b84      	cmp	r3, #132	; 0x84
 8006064:	d005      	beq.n	8006072 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	3303      	adds	r3, #3
 8006070:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr

0800607e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006082:	f000 fc6d 	bl	8006960 <vTaskStartScheduler>
  
  return osOK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}

0800608c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af04      	add	r7, sp, #16
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d020      	beq.n	80060e0 <osThreadCreate+0x54>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01c      	beq.n	80060e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685c      	ldr	r4, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691e      	ldr	r6, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ffc9 	bl	8006050 <makeFreeRtosPriority>
 80060be:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060c8:	9202      	str	r2, [sp, #8]
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	9100      	str	r1, [sp, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	4632      	mov	r2, r6
 80060d2:	4629      	mov	r1, r5
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f8e8 	bl	80062aa <xTaskCreateStatic>
 80060da:	4603      	mov	r3, r0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e01c      	b.n	800611a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685c      	ldr	r4, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ec:	b29e      	uxth	r6, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ffab 	bl	8006050 <makeFreeRtosPriority>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f107 030c 	add.w	r3, r7, #12
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	9200      	str	r2, [sp, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4632      	mov	r2, r6
 8006108:	4629      	mov	r1, r5
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f929 	bl	8006362 <xTaskCreate>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006124 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <osDelay+0x16>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	e000      	b.n	800613c <osDelay+0x18>
 800613a:	2301      	movs	r3, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fa3f 	bl	80065c0 <vTaskDelay>
  
  return osOK;
 8006142:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f103 0208 	add.w	r2, r3, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f103 0208 	add.w	r2, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 0208 	add.w	r2, r3, #8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e00c      	b.n	8006222 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3308      	adds	r3, #8
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e002      	b.n	8006216 <vListInsert+0x2e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d2f6      	bcs.n	8006210 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr

08006258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6892      	ldr	r2, [r2, #8]
 800626e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6852      	ldr	r2, [r2, #4]
 8006278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d103      	bne.n	800628c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b08e      	sub	sp, #56	; 0x38
 80062ae:	af04      	add	r7, sp, #16
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <xTaskCreateStatic+0x46>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	61fb      	str	r3, [r7, #28]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062f0:	2354      	movs	r3, #84	; 0x54
 80062f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b54      	cmp	r3, #84	; 0x54
 80062f8:	d00a      	beq.n	8006310 <xTaskCreateStatic+0x66>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	61bb      	str	r3, [r7, #24]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01e      	beq.n	8006354 <xTaskCreateStatic+0xaa>
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01b      	beq.n	8006354 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2202      	movs	r2, #2
 800632a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800632e:	2300      	movs	r3, #0
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	9302      	str	r3, [sp, #8]
 8006336:	f107 0314 	add.w	r3, r7, #20
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f850 	bl	80063ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800634c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800634e:	f000 f8cd 	bl	80064ec <prvAddNewTaskToReadyList>
 8006352:	e001      	b.n	8006358 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006358:	697b      	ldr	r3, [r7, #20]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3728      	adds	r7, #40	; 0x28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006362:	b580      	push	{r7, lr}
 8006364:	b08c      	sub	sp, #48	; 0x30
 8006366:	af04      	add	r7, sp, #16
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f848 	bl	800740c <pvPortMalloc>
 800637c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006384:	2054      	movs	r0, #84	; 0x54
 8006386:	f001 f841 	bl	800740c <pvPortMalloc>
 800638a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
 8006398:	e005      	b.n	80063a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800639a:	6978      	ldr	r0, [r7, #20]
 800639c:	f001 f8fa 	bl	8007594 <vPortFree>
 80063a0:	e001      	b.n	80063a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063b4:	88fa      	ldrh	r2, [r7, #6]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9303      	str	r3, [sp, #12]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f80e 	bl	80063ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063d0:	69f8      	ldr	r0, [r7, #28]
 80063d2:	f000 f88b 	bl	80064ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063d6:	2301      	movs	r3, #1
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e002      	b.n	80063e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
 80063e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063e2:	69bb      	ldr	r3, [r7, #24]
	}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006404:	3b01      	subs	r3, #1
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <prvInitialiseNewTask+0x48>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	617b      	str	r3, [r7, #20]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e012      	b.n	8006460 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	7819      	ldrb	r1, [r3, #0]
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	3334      	adds	r3, #52	; 0x34
 800644a:	460a      	mov	r2, r1
 800644c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	d9e9      	bls.n	800643a <prvInitialiseNewTask+0x4e>
 8006466:	e000      	b.n	800646a <prvInitialiseNewTask+0x7e>
		{
			break;
 8006468:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	2b06      	cmp	r3, #6
 8006476:	d901      	bls.n	800647c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006478:	2306      	movs	r3, #6
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006486:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2200      	movs	r2, #0
 800648c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fe79 	bl	800618a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	3318      	adds	r3, #24
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fe74 	bl	800618a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	f1c3 0207 	rsb	r2, r3, #7
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	2200      	movs	r2, #0
 80064bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	68f9      	ldr	r1, [r7, #12]
 80064ca:	69b8      	ldr	r0, [r7, #24]
 80064cc:	f000 fdaa 	bl	8007024 <pxPortInitialiseStack>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e2:	bf00      	nop
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064f4:	f000 fe8a 	bl	800720c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064f8:	4b2a      	ldr	r3, [pc, #168]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 8006500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006502:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006510:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d110      	bne.n	800653a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006518:	f000 fc5c 	bl	8006dd4 <prvInitialiseTaskLists>
 800651c:	e00d      	b.n	800653a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <prvAddNewTaskToReadyList+0xc0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006526:	4b20      	ldr	r3, [pc, #128]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d802      	bhi.n	800653a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <prvAddNewTaskToReadyList+0xc4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <prvAddNewTaskToReadyList+0xc4>)
 8006542:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <prvAddNewTaskToReadyList+0xc8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4313      	orrs	r3, r2
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <prvAddNewTaskToReadyList+0xc8>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <prvAddNewTaskToReadyList+0xcc>)
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7ff fe18 	bl	80061a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006572:	f000 fe7b 	bl	800726c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <prvAddNewTaskToReadyList+0xc0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	429a      	cmp	r2, r3
 800658a:	d207      	bcs.n	800659c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <prvAddNewTaskToReadyList+0xd0>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000598 	.word	0x20000598
 80065a8:	20000498 	.word	0x20000498
 80065ac:	200005a4 	.word	0x200005a4
 80065b0:	200005b4 	.word	0x200005b4
 80065b4:	200005a0 	.word	0x200005a0
 80065b8:	2000049c 	.word	0x2000049c
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <vTaskDelay+0x60>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <vTaskDelay+0x30>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60bb      	str	r3, [r7, #8]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065f0:	f000 fa16 	bl	8006a20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065f4:	2100      	movs	r1, #0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fcae 	bl	8006f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065fc:	f000 fa1e 	bl	8006a3c <xTaskResumeAll>
 8006600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <vTaskDelay+0x64>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	200005c0 	.word	0x200005c0
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006630:	f000 fdec 	bl	800720c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <vTaskSuspend+0x18>
 800663a:	4b3c      	ldr	r3, [pc, #240]	; (800672c <vTaskSuspend+0x104>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	e000      	b.n	8006642 <vTaskSuspend+0x1a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fe05 	bl	8006258 <uxListRemove>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	4935      	ldr	r1, [pc, #212]	; (8006730 <vTaskSuspend+0x108>)
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <vTaskSuspend+0x58>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	2201      	movs	r2, #1
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	43da      	mvns	r2, r3
 8006676:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <vTaskSuspend+0x10c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4013      	ands	r3, r2
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <vTaskSuspend+0x10c>)
 800667e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3318      	adds	r3, #24
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fde3 	bl	8006258 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4827      	ldr	r0, [pc, #156]	; (8006738 <vTaskSuspend+0x110>)
 800669a:	f7ff fd82 	bl	80061a2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d103      	bne.n	80066b2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80066b2:	f000 fddb 	bl	800726c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80066b6:	4b21      	ldr	r3, [pc, #132]	; (800673c <vTaskSuspend+0x114>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80066be:	f000 fda5 	bl	800720c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80066c2:	f000 fc25 	bl	8006f10 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80066c6:	f000 fdd1 	bl	800726c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80066ca:	4b18      	ldr	r3, [pc, #96]	; (800672c <vTaskSuspend+0x104>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d127      	bne.n	8006724 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <vTaskSuspend+0x114>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d017      	beq.n	800670c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <vTaskSuspend+0x118>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <vTaskSuspend+0xd2>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60bb      	str	r3, [r7, #8]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80066fa:	4b12      	ldr	r3, [pc, #72]	; (8006744 <vTaskSuspend+0x11c>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800670a:	e00b      	b.n	8006724 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <vTaskSuspend+0x110>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <vTaskSuspend+0x120>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d103      	bne.n	8006720 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <vTaskSuspend+0x104>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
	}
 800671e:	e001      	b.n	8006724 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006720:	f000 fae6 	bl	8006cf0 <vTaskSwitchContext>
	}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000498 	.word	0x20000498
 8006730:	2000049c 	.word	0x2000049c
 8006734:	200005a0 	.word	0x200005a0
 8006738:	20000584 	.word	0x20000584
 800673c:	200005a4 	.word	0x200005a4
 8006740:	200005c0 	.word	0x200005c0
 8006744:	e000ed04 	.word	0xe000ed04
 8006748:	20000598 	.word	0x20000598

0800674c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60fb      	str	r3, [r7, #12]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <prvTaskIsTaskSuspended+0x6c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <prvTaskIsTaskSuspended+0x3a>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <prvTaskIsTaskSuspended+0x3c>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00f      	beq.n	80067ac <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <prvTaskIsTaskSuspended+0x70>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00a      	beq.n	80067ac <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <prvTaskIsTaskSuspended+0x56>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <prvTaskIsTaskSuspended+0x58>
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067ac:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	20000584 	.word	0x20000584
 80067bc:	20000558 	.word	0x20000558

080067c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <vTaskResume+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60bb      	str	r3, [r7, #8]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d039      	beq.n	8006862 <vTaskResume+0xa2>
 80067ee:	4b1f      	ldr	r3, [pc, #124]	; (800686c <vTaskResume+0xac>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d034      	beq.n	8006862 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80067f8:	f000 fd08 	bl	800720c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff ffa5 	bl	800674c <prvTaskIsTaskSuspended>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02a      	beq.n	800685e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fd23 	bl	8006258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	2201      	movs	r2, #1
 8006818:	409a      	lsls	r2, r3
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <vTaskResume+0xb0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4313      	orrs	r3, r2
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <vTaskResume+0xb0>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4a10      	ldr	r2, [pc, #64]	; (8006874 <vTaskResume+0xb4>)
 8006832:	441a      	add	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7ff fcb1 	bl	80061a2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <vTaskResume+0xac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	429a      	cmp	r2, r3
 800684c:	d307      	bcc.n	800685e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <vTaskResume+0xb8>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800685e:	f000 fd05 	bl	800726c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000498 	.word	0x20000498
 8006870:	200005a0 	.word	0x200005a0
 8006874:	2000049c 	.word	0x2000049c
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	; 0x28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61bb      	str	r3, [r7, #24]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a8:	f000 fd72 	bl	8007390 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068ac:	f3ef 8211 	mrs	r2, BASEPRI
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	617a      	str	r2, [r7, #20]
 80068c2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068c4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80068c8:	6a38      	ldr	r0, [r7, #32]
 80068ca:	f7ff ff3f 	bl	800674c <prvTaskIsTaskSuspended>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02f      	beq.n	8006934 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <xTaskResumeFromISR+0xd0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d125      	bne.n	8006928 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e0:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <xTaskResumeFromISR+0xd4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d301      	bcc.n	80068ee <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fcb0 	bl	8006258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2201      	movs	r2, #1
 80068fe:	409a      	lsls	r2, r3
 8006900:	4b14      	ldr	r3, [pc, #80]	; (8006954 <xTaskResumeFromISR+0xd8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4313      	orrs	r3, r2
 8006906:	4a13      	ldr	r2, [pc, #76]	; (8006954 <xTaskResumeFromISR+0xd8>)
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a10      	ldr	r2, [pc, #64]	; (8006958 <xTaskResumeFromISR+0xdc>)
 8006918:	441a      	add	r2, r3
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7ff fc3e 	bl	80061a2 <vListInsertEnd>
 8006926:	e005      	b.n	8006934 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	3318      	adds	r3, #24
 800692c:	4619      	mov	r1, r3
 800692e:	480b      	ldr	r0, [pc, #44]	; (800695c <xTaskResumeFromISR+0xe0>)
 8006930:	f7ff fc37 	bl	80061a2 <vListInsertEnd>
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800693e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200005c0 	.word	0x200005c0
 8006950:	20000498 	.word	0x20000498
 8006954:	200005a0 	.word	0x200005a0
 8006958:	2000049c 	.word	0x2000049c
 800695c:	20000558 	.word	0x20000558

08006960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800696e:	463a      	mov	r2, r7
 8006970:	1d39      	adds	r1, r7, #4
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f7f9 fc88 	bl	800028c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	2300      	movs	r3, #0
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	2300      	movs	r3, #0
 800698c:	460a      	mov	r2, r1
 800698e:	491e      	ldr	r1, [pc, #120]	; (8006a08 <vTaskStartScheduler+0xa8>)
 8006990:	481e      	ldr	r0, [pc, #120]	; (8006a0c <vTaskStartScheduler+0xac>)
 8006992:	f7ff fc8a 	bl	80062aa <xTaskCreateStatic>
 8006996:	4603      	mov	r3, r0
 8006998:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <vTaskStartScheduler+0xb0>)
 800699a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800699c:	4b1c      	ldr	r3, [pc, #112]	; (8006a10 <vTaskStartScheduler+0xb0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e001      	b.n	80069ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d116      	bne.n	80069e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	613b      	str	r3, [r7, #16]
}
 80069c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <vTaskStartScheduler+0xb4>)
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <vTaskStartScheduler+0xb8>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <vTaskStartScheduler+0xbc>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069dc:	f000 fba4 	bl	8007128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069e0:	e00e      	b.n	8006a00 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d10a      	bne.n	8006a00 <vTaskStartScheduler+0xa0>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	60fb      	str	r3, [r7, #12]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <vTaskStartScheduler+0x9e>
}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	080084d0 	.word	0x080084d0
 8006a0c:	08006da5 	.word	0x08006da5
 8006a10:	200005bc 	.word	0x200005bc
 8006a14:	200005b8 	.word	0x200005b8
 8006a18:	200005a4 	.word	0x200005a4
 8006a1c:	2000059c 	.word	0x2000059c

08006a20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <vTaskSuspendAll+0x18>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a03      	ldr	r2, [pc, #12]	; (8006a38 <vTaskSuspendAll+0x18>)
 8006a2c:	6013      	str	r3, [r2, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	200005c0 	.word	0x200005c0

08006a3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a4a:	4b41      	ldr	r3, [pc, #260]	; (8006b50 <xTaskResumeAll+0x114>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	603b      	str	r3, [r7, #0]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a68:	f000 fbd0 	bl	800720c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a6c:	4b38      	ldr	r3, [pc, #224]	; (8006b50 <xTaskResumeAll+0x114>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4a37      	ldr	r2, [pc, #220]	; (8006b50 <xTaskResumeAll+0x114>)
 8006a74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <xTaskResumeAll+0x114>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d161      	bne.n	8006b42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a7e:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <xTaskResumeAll+0x118>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d05d      	beq.n	8006b42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a86:	e02e      	b.n	8006ae6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a88:	4b33      	ldr	r3, [pc, #204]	; (8006b58 <xTaskResumeAll+0x11c>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3318      	adds	r3, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fbdf 	bl	8006258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fbda 	bl	8006258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	409a      	lsls	r2, r3
 8006aac:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <xTaskResumeAll+0x120>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	4a2a      	ldr	r2, [pc, #168]	; (8006b5c <xTaskResumeAll+0x120>)
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <xTaskResumeAll+0x124>)
 8006ac4:	441a      	add	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	4610      	mov	r0, r2
 8006ace:	f7ff fb68 	bl	80061a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <xTaskResumeAll+0x128>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ae0:	4b21      	ldr	r3, [pc, #132]	; (8006b68 <xTaskResumeAll+0x12c>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <xTaskResumeAll+0x11c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1cc      	bne.n	8006a88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006af4:	f000 fa0c 	bl	8006f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006af8:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <xTaskResumeAll+0x130>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d010      	beq.n	8006b26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b04:	f000 f836 	bl	8006b74 <xTaskIncrementTick>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <xTaskResumeAll+0x12c>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f1      	bne.n	8006b04 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006b20:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <xTaskResumeAll+0x130>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <xTaskResumeAll+0x12c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <xTaskResumeAll+0x134>)
 8006b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b42:	f000 fb93 	bl	800726c <vPortExitCritical>

	return xAlreadyYielded;
 8006b46:	68bb      	ldr	r3, [r7, #8]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	200005c0 	.word	0x200005c0
 8006b54:	20000598 	.word	0x20000598
 8006b58:	20000558 	.word	0x20000558
 8006b5c:	200005a0 	.word	0x200005a0
 8006b60:	2000049c 	.word	0x2000049c
 8006b64:	20000498 	.word	0x20000498
 8006b68:	200005ac 	.word	0x200005ac
 8006b6c:	200005a8 	.word	0x200005a8
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b7e:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <xTaskIncrementTick+0x150>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 808d 	bne.w	8006ca2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b88:	4b4f      	ldr	r3, [pc, #316]	; (8006cc8 <xTaskIncrementTick+0x154>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b90:	4a4d      	ldr	r2, [pc, #308]	; (8006cc8 <xTaskIncrementTick+0x154>)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d120      	bne.n	8006bde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b9c:	4b4b      	ldr	r3, [pc, #300]	; (8006ccc <xTaskIncrementTick+0x158>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	603b      	str	r3, [r7, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xTaskIncrementTick+0x46>
 8006bbc:	4b43      	ldr	r3, [pc, #268]	; (8006ccc <xTaskIncrementTick+0x158>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <xTaskIncrementTick+0x15c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <xTaskIncrementTick+0x158>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	4a41      	ldr	r2, [pc, #260]	; (8006cd0 <xTaskIncrementTick+0x15c>)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b40      	ldr	r3, [pc, #256]	; (8006cd4 <xTaskIncrementTick+0x160>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a3f      	ldr	r2, [pc, #252]	; (8006cd4 <xTaskIncrementTick+0x160>)
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	f000 f999 	bl	8006f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bde:	4b3e      	ldr	r3, [pc, #248]	; (8006cd8 <xTaskIncrementTick+0x164>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d34d      	bcc.n	8006c84 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be8:	4b38      	ldr	r3, [pc, #224]	; (8006ccc <xTaskIncrementTick+0x158>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <xTaskIncrementTick+0x82>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <xTaskIncrementTick+0x84>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfc:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <xTaskIncrementTick+0x164>)
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	601a      	str	r2, [r3, #0]
					break;
 8006c04:	e03e      	b.n	8006c84 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c06:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <xTaskIncrementTick+0x158>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d203      	bcs.n	8006c26 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c1e:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <xTaskIncrementTick+0x164>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6013      	str	r3, [r2, #0]
						break;
 8006c24:	e02e      	b.n	8006c84 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fb14 	bl	8006258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	3318      	adds	r3, #24
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fb0b 	bl	8006258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	2201      	movs	r2, #1
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <xTaskIncrementTick+0x168>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <xTaskIncrementTick+0x168>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <xTaskIncrementTick+0x16c>)
 8006c62:	441a      	add	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7ff fa99 	bl	80061a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <xTaskIncrementTick+0x170>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d3b4      	bcc.n	8006be8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c82:	e7b1      	b.n	8006be8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c84:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <xTaskIncrementTick+0x170>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4915      	ldr	r1, [pc, #84]	; (8006ce0 <xTaskIncrementTick+0x16c>)
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d907      	bls.n	8006cac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e004      	b.n	8006cac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <xTaskIncrementTick+0x174>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <xTaskIncrementTick+0x174>)
 8006caa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <xTaskIncrementTick+0x178>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006cb8:	697b      	ldr	r3, [r7, #20]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200005c0 	.word	0x200005c0
 8006cc8:	2000059c 	.word	0x2000059c
 8006ccc:	20000550 	.word	0x20000550
 8006cd0:	20000554 	.word	0x20000554
 8006cd4:	200005b0 	.word	0x200005b0
 8006cd8:	200005b8 	.word	0x200005b8
 8006cdc:	200005a0 	.word	0x200005a0
 8006ce0:	2000049c 	.word	0x2000049c
 8006ce4:	20000498 	.word	0x20000498
 8006ce8:	200005a8 	.word	0x200005a8
 8006cec:	200005ac 	.word	0x200005ac

08006cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cf6:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <vTaskSwitchContext+0xa0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cfe:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <vTaskSwitchContext+0xa4>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d04:	e03f      	b.n	8006d86 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <vTaskSwitchContext+0xa4>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d0c:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <vTaskSwitchContext+0xa8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	fab3 f383 	clz	r3, r3
 8006d18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	f1c3 031f 	rsb	r3, r3, #31
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	491e      	ldr	r1, [pc, #120]	; (8006d9c <vTaskSwitchContext+0xac>)
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	607b      	str	r3, [r7, #4]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <vTaskSwitchContext+0x5a>
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <vTaskSwitchContext+0xac>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d104      	bne.n	8006d7c <vTaskSwitchContext+0x8c>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	605a      	str	r2, [r3, #4]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	4a07      	ldr	r2, [pc, #28]	; (8006da0 <vTaskSwitchContext+0xb0>)
 8006d84:	6013      	str	r3, [r2, #0]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	200005c0 	.word	0x200005c0
 8006d94:	200005ac 	.word	0x200005ac
 8006d98:	200005a0 	.word	0x200005a0
 8006d9c:	2000049c 	.word	0x2000049c
 8006da0:	20000498 	.word	0x20000498

08006da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dac:	f000 f852 	bl	8006e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <prvIdleTask+0x28>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d9f9      	bls.n	8006dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <prvIdleTask+0x2c>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dc8:	e7f0      	b.n	8006dac <prvIdleTask+0x8>
 8006dca:	bf00      	nop
 8006dcc:	2000049c 	.word	0x2000049c
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	e00c      	b.n	8006dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <prvInitialiseTaskLists+0x60>)
 8006dec:	4413      	add	r3, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f9ac 	bl	800614c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d9ef      	bls.n	8006de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e00:	480d      	ldr	r0, [pc, #52]	; (8006e38 <prvInitialiseTaskLists+0x64>)
 8006e02:	f7ff f9a3 	bl	800614c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e06:	480d      	ldr	r0, [pc, #52]	; (8006e3c <prvInitialiseTaskLists+0x68>)
 8006e08:	f7ff f9a0 	bl	800614c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e0c:	480c      	ldr	r0, [pc, #48]	; (8006e40 <prvInitialiseTaskLists+0x6c>)
 8006e0e:	f7ff f99d 	bl	800614c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e12:	480c      	ldr	r0, [pc, #48]	; (8006e44 <prvInitialiseTaskLists+0x70>)
 8006e14:	f7ff f99a 	bl	800614c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e18:	480b      	ldr	r0, [pc, #44]	; (8006e48 <prvInitialiseTaskLists+0x74>)
 8006e1a:	f7ff f997 	bl	800614c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <prvInitialiseTaskLists+0x78>)
 8006e20:	4a05      	ldr	r2, [pc, #20]	; (8006e38 <prvInitialiseTaskLists+0x64>)
 8006e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvInitialiseTaskLists+0x7c>)
 8006e26:	4a05      	ldr	r2, [pc, #20]	; (8006e3c <prvInitialiseTaskLists+0x68>)
 8006e28:	601a      	str	r2, [r3, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	2000049c 	.word	0x2000049c
 8006e38:	20000528 	.word	0x20000528
 8006e3c:	2000053c 	.word	0x2000053c
 8006e40:	20000558 	.word	0x20000558
 8006e44:	2000056c 	.word	0x2000056c
 8006e48:	20000584 	.word	0x20000584
 8006e4c:	20000550 	.word	0x20000550
 8006e50:	20000554 	.word	0x20000554

08006e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5a:	e019      	b.n	8006e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e5c:	f000 f9d6 	bl	800720c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e60:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <prvCheckTasksWaitingTermination+0x50>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff f9f3 	bl	8006258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e72:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <prvCheckTasksWaitingTermination+0x54>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <prvCheckTasksWaitingTermination+0x54>)
 8006e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e86:	f000 f9f1 	bl	800726c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f810 	bl	8006eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e1      	bne.n	8006e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000056c 	.word	0x2000056c
 8006ea8:	20000598 	.word	0x20000598
 8006eac:	20000580 	.word	0x20000580

08006eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d108      	bne.n	8006ed4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fb64 	bl	8007594 <vPortFree>
				vPortFree( pxTCB );
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fb61 	bl	8007594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ed2:	e018      	b.n	8006f06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d103      	bne.n	8006ee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fb58 	bl	8007594 <vPortFree>
	}
 8006ee4:	e00f      	b.n	8006f06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d00a      	beq.n	8006f06 <prvDeleteTCB+0x56>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <prvDeleteTCB+0x54>
	}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <prvResetNextTaskUnblockTime+0x40>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <prvResetNextTaskUnblockTime+0x14>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <prvResetNextTaskUnblockTime+0x16>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <prvResetNextTaskUnblockTime+0x44>)
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f32:	e008      	b.n	8006f46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <prvResetNextTaskUnblockTime+0x40>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <prvResetNextTaskUnblockTime+0x44>)
 8006f44:	6013      	str	r3, [r2, #0]
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr
 8006f50:	20000550 	.word	0x20000550
 8006f54:	200005b8 	.word	0x200005b8

08006f58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f62:	4b29      	ldr	r3, [pc, #164]	; (8007008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f68:	4b28      	ldr	r3, [pc, #160]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff f972 	bl	8006258 <uxListRemove>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006f7a:	4b24      	ldr	r3, [pc, #144]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	2201      	movs	r2, #1
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43da      	mvns	r2, r3
 8006f88:	4b21      	ldr	r3, [pc, #132]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	4a20      	ldr	r2, [pc, #128]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d10a      	bne.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa0:	4b1a      	ldr	r3, [pc, #104]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	481a      	ldr	r0, [pc, #104]	; (8007014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006faa:	f7ff f8fa 	bl	80061a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fae:	e026      	b.n	8006ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d209      	bcs.n	8006fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc8:	4b13      	ldr	r3, [pc, #76]	; (8007018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7ff f907 	bl	80061e8 <vListInsert>
}
 8006fda:	e010      	b.n	8006ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7ff f8fd 	bl	80061e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d202      	bcs.n	8006ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6013      	str	r3, [r2, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000059c 	.word	0x2000059c
 800700c:	20000498 	.word	0x20000498
 8007010:	200005a0 	.word	0x200005a0
 8007014:	20000584 	.word	0x20000584
 8007018:	20000554 	.word	0x20000554
 800701c:	20000550 	.word	0x20000550
 8007020:	200005b8 	.word	0x200005b8

08007024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3b04      	subs	r3, #4
 8007034:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800703c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3b04      	subs	r3, #4
 8007042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f023 0201 	bic.w	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3b04      	subs	r3, #4
 8007052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007054:	4a08      	ldr	r2, [pc, #32]	; (8007078 <pxPortInitialiseStack+0x54>)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3b14      	subs	r3, #20
 800705e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3b20      	subs	r3, #32
 800706a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr
 8007078:	0800707d 	.word	0x0800707d

0800707c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007086:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <prvTaskExitError+0x54>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d00a      	beq.n	80070a6 <prvTaskExitError+0x2a>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <prvTaskExitError+0x28>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070ba:	bf00      	nop
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0fc      	beq.n	80070bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000028 	.word	0x20000028
	...

080070e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <pxCurrentTCBConst2>)
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070ea:	f380 8809 	msr	PSP, r0
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80070fe:	4770      	bx	lr

08007100 <pxCurrentTCBConst2>:
 8007100:	20000498 	.word	0x20000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007108:	4806      	ldr	r0, [pc, #24]	; (8007124 <prvPortStartFirstTask+0x1c>)
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f380 8808 	msr	MSP, r0
 8007112:	b662      	cpsie	i
 8007114:	b661      	cpsie	f
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	df00      	svc	0
 8007120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007122:	bf00      	nop
 8007124:	e000ed08 	.word	0xe000ed08

08007128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800712e:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <xPortStartScheduler+0xd0>)
 8007130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007150:	b2da      	uxtb	r2, r3
 8007152:	4b2a      	ldr	r3, [pc, #168]	; (80071fc <xPortStartScheduler+0xd4>)
 8007154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <xPortStartScheduler+0xd8>)
 8007158:	2207      	movs	r2, #7
 800715a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800715c:	e009      	b.n	8007172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800715e:	4b28      	ldr	r3, [pc, #160]	; (8007200 <xPortStartScheduler+0xd8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	4a26      	ldr	r2, [pc, #152]	; (8007200 <xPortStartScheduler+0xd8>)
 8007166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	2b80      	cmp	r3, #128	; 0x80
 800717c:	d0ef      	beq.n	800715e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800717e:	4b20      	ldr	r3, [pc, #128]	; (8007200 <xPortStartScheduler+0xd8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1c3 0307 	rsb	r3, r3, #7
 8007186:	2b04      	cmp	r3, #4
 8007188:	d00a      	beq.n	80071a0 <xPortStartScheduler+0x78>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	60bb      	str	r3, [r7, #8]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <xPortStartScheduler+0xd8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	4a16      	ldr	r2, [pc, #88]	; (8007200 <xPortStartScheduler+0xd8>)
 80071a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <xPortStartScheduler+0xd8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <xPortStartScheduler+0xd8>)
 80071b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071be:	4b11      	ldr	r3, [pc, #68]	; (8007204 <xPortStartScheduler+0xdc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <xPortStartScheduler+0xdc>)
 80071c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <xPortStartScheduler+0xdc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <xPortStartScheduler+0xdc>)
 80071d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071d6:	f000 f8b9 	bl	800734c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <xPortStartScheduler+0xe0>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071e0:	f7ff ff92 	bl	8007108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071e4:	f7ff fd84 	bl	8006cf0 <vTaskSwitchContext>
	prvTaskExitError();
 80071e8:	f7ff ff48 	bl	800707c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	e000e400 	.word	0xe000e400
 80071fc:	200005c4 	.word	0x200005c4
 8007200:	200005c8 	.word	0x200005c8
 8007204:	e000ed20 	.word	0xe000ed20
 8007208:	20000028 	.word	0x20000028

0800720c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <vPortEnterCritical+0x58>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <vPortEnterCritical+0x58>)
 800722e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <vPortEnterCritical+0x58>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10f      	bne.n	8007258 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <vPortEnterCritical+0x5c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <vPortEnterCritical+0x4c>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	603b      	str	r3, [r7, #0]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <vPortEnterCritical+0x4a>
	}
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000028 	.word	0x20000028
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <vPortExitCritical+0x4c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <vPortExitCritical+0x24>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	607b      	str	r3, [r7, #4]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <vPortExitCritical+0x4c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <vPortExitCritical+0x4c>)
 8007298:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <vPortExitCritical+0x4c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d105      	bne.n	80072ae <vPortExitCritical+0x42>
 80072a2:	2300      	movs	r3, #0
 80072a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f383 8811 	msr	BASEPRI, r3
}
 80072ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	20000028 	.word	0x20000028
 80072bc:	00000000 	.word	0x00000000

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072da:	f380 8811 	msr	BASEPRI, r0
 80072de:	f7ff fd07 	bl	8006cf0 <vTaskSwitchContext>
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8811 	msr	BASEPRI, r0
 80072ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072f6:	f380 8809 	msr	PSP, r0
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	4770      	bx	lr

08007300 <pxCurrentTCBConst>:
 8007300:	20000498 	.word	0x20000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007322:	f7ff fc27 	bl	8006b74 <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <SysTick_Handler+0x40>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f383 8811 	msr	BASEPRI, r3
}
 800733e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <vPortSetupTimerInterrupt+0x30>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <vPortSetupTimerInterrupt+0x38>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a09      	ldr	r2, [pc, #36]	; (8007388 <vPortSetupTimerInterrupt+0x3c>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <vPortSetupTimerInterrupt+0x40>)
 800736a:	3b01      	subs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800736e:	4b03      	ldr	r3, [pc, #12]	; (800737c <vPortSetupTimerInterrupt+0x30>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr
 800737c:	e000e010 	.word	0xe000e010
 8007380:	e000e018 	.word	0xe000e018
 8007384:	2000001c 	.word	0x2000001c
 8007388:	10624dd3 	.word	0x10624dd3
 800738c:	e000e014 	.word	0xe000e014

08007390 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007396:	f3ef 8305 	mrs	r3, IPSR
 800739a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d914      	bls.n	80073cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073a2:	4a16      	ldr	r2, [pc, #88]	; (80073fc <vPortValidateInterruptPriority+0x6c>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <vPortValidateInterruptPriority+0x70>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	7afa      	ldrb	r2, [r7, #11]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d20a      	bcs.n	80073cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	607b      	str	r3, [r7, #4]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <vPortValidateInterruptPriority+0x74>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <vPortValidateInterruptPriority+0x78>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d90a      	bls.n	80073f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	603b      	str	r3, [r7, #0]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <vPortValidateInterruptPriority+0x60>
	}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	e000e3f0 	.word	0xe000e3f0
 8007400:	200005c4 	.word	0x200005c4
 8007404:	e000ed0c 	.word	0xe000ed0c
 8007408:	200005c8 	.word	0x200005c8

0800740c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007418:	f7ff fb02 	bl	8006a20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800741c:	4b58      	ldr	r3, [pc, #352]	; (8007580 <pvPortMalloc+0x174>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007424:	f000 f910 	bl	8007648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007428:	4b56      	ldr	r3, [pc, #344]	; (8007584 <pvPortMalloc+0x178>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 808e 	bne.w	8007552 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01d      	beq.n	8007478 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800743c:	2208      	movs	r2, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	3308      	adds	r3, #8
 8007456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <pvPortMalloc+0x6c>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d069      	beq.n	8007552 <pvPortMalloc+0x146>
 800747e:	4b42      	ldr	r3, [pc, #264]	; (8007588 <pvPortMalloc+0x17c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d864      	bhi.n	8007552 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007488:	4b40      	ldr	r3, [pc, #256]	; (800758c <pvPortMalloc+0x180>)
 800748a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748c:	4b3f      	ldr	r3, [pc, #252]	; (800758c <pvPortMalloc+0x180>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007492:	e004      	b.n	800749e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d903      	bls.n	80074b0 <pvPortMalloc+0xa4>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f1      	bne.n	8007494 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074b0:	4b33      	ldr	r3, [pc, #204]	; (8007580 <pvPortMalloc+0x174>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d04b      	beq.n	8007552 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2208      	movs	r2, #8
 80074c0:	4413      	add	r3, r2
 80074c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	2308      	movs	r3, #8
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	429a      	cmp	r2, r3
 80074da:	d91f      	bls.n	800751c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <pvPortMalloc+0xf8>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	613b      	str	r3, [r7, #16]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8f8 	bl	800770c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <pvPortMalloc+0x17c>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <pvPortMalloc+0x17c>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <pvPortMalloc+0x17c>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <pvPortMalloc+0x184>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <pvPortMalloc+0x17c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <pvPortMalloc+0x184>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <pvPortMalloc+0x178>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7ff fa73 	bl	8006a3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <pvPortMalloc+0x16a>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <pvPortMalloc+0x168>
	return pvReturn;
 8007576:	69fb      	ldr	r3, [r7, #28]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	; 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200011d4 	.word	0x200011d4
 8007584:	200011e0 	.word	0x200011e0
 8007588:	200011d8 	.word	0x200011d8
 800758c:	200011cc 	.word	0x200011cc
 8007590:	200011dc 	.word	0x200011dc

08007594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d048      	beq.n	8007638 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075a6:	2308      	movs	r3, #8
 80075a8:	425b      	negs	r3, r3
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <vPortFree+0xac>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <vPortFree+0x44>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <vPortFree+0x62>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60bb      	str	r3, [r7, #8]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <vPortFree+0xac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d019      	beq.n	8007638 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d115      	bne.n	8007638 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <vPortFree+0xac>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	43db      	mvns	r3, r3
 8007616:	401a      	ands	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800761c:	f7ff fa00 	bl	8006a20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <vPortFree+0xb0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4413      	add	r3, r2
 800762a:	4a06      	ldr	r2, [pc, #24]	; (8007644 <vPortFree+0xb0>)
 800762c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f000 f86c 	bl	800770c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007634:	f7ff fa02 	bl	8006a3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200011e0 	.word	0x200011e0
 8007644:	200011d8 	.word	0x200011d8

08007648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <prvHeapInit+0xac>)
 8007656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00c      	beq.n	800767c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3307      	adds	r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <prvHeapInit+0xac>)
 8007678:	4413      	add	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <prvHeapInit+0xb0>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007686:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <prvHeapInit+0xb0>)
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007694:	2208      	movs	r2, #8
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4a15      	ldr	r2, [pc, #84]	; (80076fc <prvHeapInit+0xb4>)
 80076a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <prvHeapInit+0xb4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <prvHeapInit+0xb4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <prvHeapInit+0xb4>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <prvHeapInit+0xb8>)
 80076d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <prvHeapInit+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvHeapInit+0xc0>)
 80076e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e6:	601a      	str	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	200005cc 	.word	0x200005cc
 80076f8:	200011cc 	.word	0x200011cc
 80076fc:	200011d4 	.word	0x200011d4
 8007700:	200011dc 	.word	0x200011dc
 8007704:	200011d8 	.word	0x200011d8
 8007708:	200011e0 	.word	0x200011e0

0800770c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <prvInsertBlockIntoFreeList+0xa8>)
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e002      	b.n	8007720 <prvInsertBlockIntoFreeList+0x14>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d8f7      	bhi.n	800771a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	429a      	cmp	r2, r3
 800773a:	d108      	bne.n	800774e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	441a      	add	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d118      	bne.n	8007794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvInsertBlockIntoFreeList+0xac>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d00d      	beq.n	800778a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	441a      	add	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e008      	b.n	800779c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <prvInsertBlockIntoFreeList+0xac>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e003      	b.n	800779c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d002      	beq.n	80077aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	200011cc 	.word	0x200011cc
 80077b8:	200011d4 	.word	0x200011d4

080077bc <__errno>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	; (80077c4 <__errno+0x8>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	2000002c 	.word	0x2000002c

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2600      	movs	r6, #0
 80077cc:	4d0c      	ldr	r5, [pc, #48]	; (8007800 <__libc_init_array+0x38>)
 80077ce:	4c0d      	ldr	r4, [pc, #52]	; (8007804 <__libc_init_array+0x3c>)
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	f000 fc9c 	bl	8008114 <_init>
 80077dc:	2600      	movs	r6, #0
 80077de:	4d0a      	ldr	r5, [pc, #40]	; (8007808 <__libc_init_array+0x40>)
 80077e0:	4c0a      	ldr	r4, [pc, #40]	; (800780c <__libc_init_array+0x44>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	08008524 	.word	0x08008524
 8007804:	08008524 	.word	0x08008524
 8007808:	08008524 	.word	0x08008524
 800780c:	08008528 	.word	0x08008528

08007810 <memcpy>:
 8007810:	440a      	add	r2, r1
 8007812:	4291      	cmp	r1, r2
 8007814:	f100 33ff 	add.w	r3, r0, #4294967295
 8007818:	d100      	bne.n	800781c <memcpy+0xc>
 800781a:	4770      	bx	lr
 800781c:	b510      	push	{r4, lr}
 800781e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007822:	4291      	cmp	r1, r2
 8007824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007828:	d1f9      	bne.n	800781e <memcpy+0xe>
 800782a:	bd10      	pop	{r4, pc}

0800782c <memset>:
 800782c:	4603      	mov	r3, r0
 800782e:	4402      	add	r2, r0
 8007830:	4293      	cmp	r3, r2
 8007832:	d100      	bne.n	8007836 <memset+0xa>
 8007834:	4770      	bx	lr
 8007836:	f803 1b01 	strb.w	r1, [r3], #1
 800783a:	e7f9      	b.n	8007830 <memset+0x4>

0800783c <siprintf>:
 800783c:	b40e      	push	{r1, r2, r3}
 800783e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007842:	b500      	push	{lr}
 8007844:	b09c      	sub	sp, #112	; 0x70
 8007846:	ab1d      	add	r3, sp, #116	; 0x74
 8007848:	9002      	str	r0, [sp, #8]
 800784a:	9006      	str	r0, [sp, #24]
 800784c:	9107      	str	r1, [sp, #28]
 800784e:	9104      	str	r1, [sp, #16]
 8007850:	4808      	ldr	r0, [pc, #32]	; (8007874 <siprintf+0x38>)
 8007852:	4909      	ldr	r1, [pc, #36]	; (8007878 <siprintf+0x3c>)
 8007854:	f853 2b04 	ldr.w	r2, [r3], #4
 8007858:	9105      	str	r1, [sp, #20]
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	a902      	add	r1, sp, #8
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f000 f868 	bl	8007934 <_svfiprintf_r>
 8007864:	2200      	movs	r2, #0
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	b01c      	add	sp, #112	; 0x70
 800786c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007870:	b003      	add	sp, #12
 8007872:	4770      	bx	lr
 8007874:	2000002c 	.word	0x2000002c
 8007878:	ffff0208 	.word	0xffff0208

0800787c <__ssputs_r>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	688e      	ldr	r6, [r1, #8]
 8007882:	4682      	mov	sl, r0
 8007884:	429e      	cmp	r6, r3
 8007886:	460c      	mov	r4, r1
 8007888:	4690      	mov	r8, r2
 800788a:	461f      	mov	r7, r3
 800788c:	d838      	bhi.n	8007900 <__ssputs_r+0x84>
 800788e:	898a      	ldrh	r2, [r1, #12]
 8007890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007894:	d032      	beq.n	80078fc <__ssputs_r+0x80>
 8007896:	6825      	ldr	r5, [r4, #0]
 8007898:	6909      	ldr	r1, [r1, #16]
 800789a:	3301      	adds	r3, #1
 800789c:	eba5 0901 	sub.w	r9, r5, r1
 80078a0:	6965      	ldr	r5, [r4, #20]
 80078a2:	444b      	add	r3, r9
 80078a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078ac:	106d      	asrs	r5, r5, #1
 80078ae:	429d      	cmp	r5, r3
 80078b0:	bf38      	it	cc
 80078b2:	461d      	movcc	r5, r3
 80078b4:	0553      	lsls	r3, r2, #21
 80078b6:	d531      	bpl.n	800791c <__ssputs_r+0xa0>
 80078b8:	4629      	mov	r1, r5
 80078ba:	f000 fb61 	bl	8007f80 <_malloc_r>
 80078be:	4606      	mov	r6, r0
 80078c0:	b950      	cbnz	r0, 80078d8 <__ssputs_r+0x5c>
 80078c2:	230c      	movs	r3, #12
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	f8ca 3000 	str.w	r3, [sl]
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d8:	464a      	mov	r2, r9
 80078da:	6921      	ldr	r1, [r4, #16]
 80078dc:	f7ff ff98 	bl	8007810 <memcpy>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	6126      	str	r6, [r4, #16]
 80078ee:	444e      	add	r6, r9
 80078f0:	6026      	str	r6, [r4, #0]
 80078f2:	463e      	mov	r6, r7
 80078f4:	6165      	str	r5, [r4, #20]
 80078f6:	eba5 0509 	sub.w	r5, r5, r9
 80078fa:	60a5      	str	r5, [r4, #8]
 80078fc:	42be      	cmp	r6, r7
 80078fe:	d900      	bls.n	8007902 <__ssputs_r+0x86>
 8007900:	463e      	mov	r6, r7
 8007902:	4632      	mov	r2, r6
 8007904:	4641      	mov	r1, r8
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	f000 fab8 	bl	8007e7c <memmove>
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	2000      	movs	r0, #0
 8007910:	1b9b      	subs	r3, r3, r6
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	4433      	add	r3, r6
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	e7db      	b.n	80078d4 <__ssputs_r+0x58>
 800791c:	462a      	mov	r2, r5
 800791e:	f000 fba3 	bl	8008068 <_realloc_r>
 8007922:	4606      	mov	r6, r0
 8007924:	2800      	cmp	r0, #0
 8007926:	d1e1      	bne.n	80078ec <__ssputs_r+0x70>
 8007928:	4650      	mov	r0, sl
 800792a:	6921      	ldr	r1, [r4, #16]
 800792c:	f000 fac0 	bl	8007eb0 <_free_r>
 8007930:	e7c7      	b.n	80078c2 <__ssputs_r+0x46>
	...

08007934 <_svfiprintf_r>:
 8007934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	4698      	mov	r8, r3
 800793a:	898b      	ldrh	r3, [r1, #12]
 800793c:	4607      	mov	r7, r0
 800793e:	061b      	lsls	r3, r3, #24
 8007940:	460d      	mov	r5, r1
 8007942:	4614      	mov	r4, r2
 8007944:	b09d      	sub	sp, #116	; 0x74
 8007946:	d50e      	bpl.n	8007966 <_svfiprintf_r+0x32>
 8007948:	690b      	ldr	r3, [r1, #16]
 800794a:	b963      	cbnz	r3, 8007966 <_svfiprintf_r+0x32>
 800794c:	2140      	movs	r1, #64	; 0x40
 800794e:	f000 fb17 	bl	8007f80 <_malloc_r>
 8007952:	6028      	str	r0, [r5, #0]
 8007954:	6128      	str	r0, [r5, #16]
 8007956:	b920      	cbnz	r0, 8007962 <_svfiprintf_r+0x2e>
 8007958:	230c      	movs	r3, #12
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e0d1      	b.n	8007b06 <_svfiprintf_r+0x1d2>
 8007962:	2340      	movs	r3, #64	; 0x40
 8007964:	616b      	str	r3, [r5, #20]
 8007966:	2300      	movs	r3, #0
 8007968:	9309      	str	r3, [sp, #36]	; 0x24
 800796a:	2320      	movs	r3, #32
 800796c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007970:	2330      	movs	r3, #48	; 0x30
 8007972:	f04f 0901 	mov.w	r9, #1
 8007976:	f8cd 800c 	str.w	r8, [sp, #12]
 800797a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b20 <_svfiprintf_r+0x1ec>
 800797e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007982:	4623      	mov	r3, r4
 8007984:	469a      	mov	sl, r3
 8007986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800798a:	b10a      	cbz	r2, 8007990 <_svfiprintf_r+0x5c>
 800798c:	2a25      	cmp	r2, #37	; 0x25
 800798e:	d1f9      	bne.n	8007984 <_svfiprintf_r+0x50>
 8007990:	ebba 0b04 	subs.w	fp, sl, r4
 8007994:	d00b      	beq.n	80079ae <_svfiprintf_r+0x7a>
 8007996:	465b      	mov	r3, fp
 8007998:	4622      	mov	r2, r4
 800799a:	4629      	mov	r1, r5
 800799c:	4638      	mov	r0, r7
 800799e:	f7ff ff6d 	bl	800787c <__ssputs_r>
 80079a2:	3001      	adds	r0, #1
 80079a4:	f000 80aa 	beq.w	8007afc <_svfiprintf_r+0x1c8>
 80079a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079aa:	445a      	add	r2, fp
 80079ac:	9209      	str	r2, [sp, #36]	; 0x24
 80079ae:	f89a 3000 	ldrb.w	r3, [sl]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80a2 	beq.w	8007afc <_svfiprintf_r+0x1c8>
 80079b8:	2300      	movs	r3, #0
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c2:	f10a 0a01 	add.w	sl, sl, #1
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ce:	931a      	str	r3, [sp, #104]	; 0x68
 80079d0:	4654      	mov	r4, sl
 80079d2:	2205      	movs	r2, #5
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	4851      	ldr	r0, [pc, #324]	; (8007b20 <_svfiprintf_r+0x1ec>)
 80079da:	f000 fa41 	bl	8007e60 <memchr>
 80079de:	9a04      	ldr	r2, [sp, #16]
 80079e0:	b9d8      	cbnz	r0, 8007a1a <_svfiprintf_r+0xe6>
 80079e2:	06d0      	lsls	r0, r2, #27
 80079e4:	bf44      	itt	mi
 80079e6:	2320      	movmi	r3, #32
 80079e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ec:	0711      	lsls	r1, r2, #28
 80079ee:	bf44      	itt	mi
 80079f0:	232b      	movmi	r3, #43	; 0x2b
 80079f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079f6:	f89a 3000 	ldrb.w	r3, [sl]
 80079fa:	2b2a      	cmp	r3, #42	; 0x2a
 80079fc:	d015      	beq.n	8007a2a <_svfiprintf_r+0xf6>
 80079fe:	4654      	mov	r4, sl
 8007a00:	2000      	movs	r0, #0
 8007a02:	f04f 0c0a 	mov.w	ip, #10
 8007a06:	9a07      	ldr	r2, [sp, #28]
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a0e:	3b30      	subs	r3, #48	; 0x30
 8007a10:	2b09      	cmp	r3, #9
 8007a12:	d94e      	bls.n	8007ab2 <_svfiprintf_r+0x17e>
 8007a14:	b1b0      	cbz	r0, 8007a44 <_svfiprintf_r+0x110>
 8007a16:	9207      	str	r2, [sp, #28]
 8007a18:	e014      	b.n	8007a44 <_svfiprintf_r+0x110>
 8007a1a:	eba0 0308 	sub.w	r3, r0, r8
 8007a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a22:	4313      	orrs	r3, r2
 8007a24:	46a2      	mov	sl, r4
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	e7d2      	b.n	80079d0 <_svfiprintf_r+0x9c>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	1d19      	adds	r1, r3, #4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	9103      	str	r1, [sp, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bfbb      	ittet	lt
 8007a36:	425b      	neglt	r3, r3
 8007a38:	f042 0202 	orrlt.w	r2, r2, #2
 8007a3c:	9307      	strge	r3, [sp, #28]
 8007a3e:	9307      	strlt	r3, [sp, #28]
 8007a40:	bfb8      	it	lt
 8007a42:	9204      	strlt	r2, [sp, #16]
 8007a44:	7823      	ldrb	r3, [r4, #0]
 8007a46:	2b2e      	cmp	r3, #46	; 0x2e
 8007a48:	d10c      	bne.n	8007a64 <_svfiprintf_r+0x130>
 8007a4a:	7863      	ldrb	r3, [r4, #1]
 8007a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4e:	d135      	bne.n	8007abc <_svfiprintf_r+0x188>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	3402      	adds	r4, #2
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	9203      	str	r2, [sp, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bfb8      	it	lt
 8007a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007b24 <_svfiprintf_r+0x1f0>
 8007a68:	2203      	movs	r2, #3
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	7821      	ldrb	r1, [r4, #0]
 8007a6e:	f000 f9f7 	bl	8007e60 <memchr>
 8007a72:	b140      	cbz	r0, 8007a86 <_svfiprintf_r+0x152>
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	eba0 000a 	sub.w	r0, r0, sl
 8007a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	3401      	adds	r4, #1
 8007a82:	4303      	orrs	r3, r0
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8a:	2206      	movs	r2, #6
 8007a8c:	4826      	ldr	r0, [pc, #152]	; (8007b28 <_svfiprintf_r+0x1f4>)
 8007a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a92:	f000 f9e5 	bl	8007e60 <memchr>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d038      	beq.n	8007b0c <_svfiprintf_r+0x1d8>
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <_svfiprintf_r+0x1f8>)
 8007a9c:	bb1b      	cbnz	r3, 8007ae6 <_svfiprintf_r+0x1b2>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	4433      	add	r3, r6
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	e767      	b.n	8007982 <_svfiprintf_r+0x4e>
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aba:	e7a5      	b.n	8007a08 <_svfiprintf_r+0xd4>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	3401      	adds	r4, #1
 8007ac6:	9305      	str	r3, [sp, #20]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ace:	3a30      	subs	r2, #48	; 0x30
 8007ad0:	2a09      	cmp	r2, #9
 8007ad2:	d903      	bls.n	8007adc <_svfiprintf_r+0x1a8>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0c5      	beq.n	8007a64 <_svfiprintf_r+0x130>
 8007ad8:	9105      	str	r1, [sp, #20]
 8007ada:	e7c3      	b.n	8007a64 <_svfiprintf_r+0x130>
 8007adc:	4604      	mov	r4, r0
 8007ade:	2301      	movs	r3, #1
 8007ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ae4:	e7f0      	b.n	8007ac8 <_svfiprintf_r+0x194>
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	462a      	mov	r2, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <_svfiprintf_r+0x1fc>)
 8007af0:	a904      	add	r1, sp, #16
 8007af2:	f3af 8000 	nop.w
 8007af6:	1c42      	adds	r2, r0, #1
 8007af8:	4606      	mov	r6, r0
 8007afa:	d1d6      	bne.n	8007aaa <_svfiprintf_r+0x176>
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	065b      	lsls	r3, r3, #25
 8007b00:	f53f af2c 	bmi.w	800795c <_svfiprintf_r+0x28>
 8007b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b06:	b01d      	add	sp, #116	; 0x74
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4638      	mov	r0, r7
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <_svfiprintf_r+0x1fc>)
 8007b16:	a904      	add	r1, sp, #16
 8007b18:	f000 f87c 	bl	8007c14 <_printf_i>
 8007b1c:	e7eb      	b.n	8007af6 <_svfiprintf_r+0x1c2>
 8007b1e:	bf00      	nop
 8007b20:	080084f0 	.word	0x080084f0
 8007b24:	080084f6 	.word	0x080084f6
 8007b28:	080084fa 	.word	0x080084fa
 8007b2c:	00000000 	.word	0x00000000
 8007b30:	0800787d 	.word	0x0800787d

08007b34 <_printf_common>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	4616      	mov	r6, r2
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	688a      	ldr	r2, [r1, #8]
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	4607      	mov	r7, r0
 8007b42:	4293      	cmp	r3, r2
 8007b44:	bfb8      	it	lt
 8007b46:	4613      	movlt	r3, r2
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b4e:	460c      	mov	r4, r1
 8007b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b54:	b10a      	cbz	r2, 8007b5a <_printf_common+0x26>
 8007b56:	3301      	adds	r3, #1
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	0699      	lsls	r1, r3, #26
 8007b5e:	bf42      	ittt	mi
 8007b60:	6833      	ldrmi	r3, [r6, #0]
 8007b62:	3302      	addmi	r3, #2
 8007b64:	6033      	strmi	r3, [r6, #0]
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	f015 0506 	ands.w	r5, r5, #6
 8007b6c:	d106      	bne.n	8007b7c <_printf_common+0x48>
 8007b6e:	f104 0a19 	add.w	sl, r4, #25
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	6832      	ldr	r2, [r6, #0]
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dc28      	bgt.n	8007bce <_printf_common+0x9a>
 8007b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b80:	1e13      	subs	r3, r2, #0
 8007b82:	6822      	ldr	r2, [r4, #0]
 8007b84:	bf18      	it	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	0692      	lsls	r2, r2, #26
 8007b8a:	d42d      	bmi.n	8007be8 <_printf_common+0xb4>
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b94:	47c0      	blx	r8
 8007b96:	3001      	adds	r0, #1
 8007b98:	d020      	beq.n	8007bdc <_printf_common+0xa8>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	68e5      	ldr	r5, [r4, #12]
 8007b9e:	f003 0306 	and.w	r3, r3, #6
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	bf18      	it	ne
 8007ba6:	2500      	movne	r5, #0
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	f04f 0600 	mov.w	r6, #0
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	bf08      	it	eq
 8007bb2:	1aad      	subeq	r5, r5, r2
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	bf08      	it	eq
 8007bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	bfc4      	itt	gt
 8007bc0:	1a9b      	subgt	r3, r3, r2
 8007bc2:	18ed      	addgt	r5, r5, r3
 8007bc4:	341a      	adds	r4, #26
 8007bc6:	42b5      	cmp	r5, r6
 8007bc8:	d11a      	bne.n	8007c00 <_printf_common+0xcc>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e008      	b.n	8007be0 <_printf_common+0xac>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	47c0      	blx	r8
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d103      	bne.n	8007be4 <_printf_common+0xb0>
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be4:	3501      	adds	r5, #1
 8007be6:	e7c4      	b.n	8007b72 <_printf_common+0x3e>
 8007be8:	2030      	movs	r0, #48	; 0x30
 8007bea:	18e1      	adds	r1, r4, r3
 8007bec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bf6:	4422      	add	r2, r4
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bfe:	e7c5      	b.n	8007b8c <_printf_common+0x58>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4622      	mov	r2, r4
 8007c04:	4649      	mov	r1, r9
 8007c06:	4638      	mov	r0, r7
 8007c08:	47c0      	blx	r8
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d0e6      	beq.n	8007bdc <_printf_common+0xa8>
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7d9      	b.n	8007bc6 <_printf_common+0x92>
	...

08007c14 <_printf_i>:
 8007c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	7e0f      	ldrb	r7, [r1, #24]
 8007c1a:	4691      	mov	r9, r2
 8007c1c:	2f78      	cmp	r7, #120	; 0x78
 8007c1e:	4680      	mov	r8, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	469a      	mov	sl, r3
 8007c24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c2a:	d807      	bhi.n	8007c3c <_printf_i+0x28>
 8007c2c:	2f62      	cmp	r7, #98	; 0x62
 8007c2e:	d80a      	bhi.n	8007c46 <_printf_i+0x32>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	f000 80d9 	beq.w	8007de8 <_printf_i+0x1d4>
 8007c36:	2f58      	cmp	r7, #88	; 0x58
 8007c38:	f000 80a4 	beq.w	8007d84 <_printf_i+0x170>
 8007c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c44:	e03a      	b.n	8007cbc <_printf_i+0xa8>
 8007c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c4a:	2b15      	cmp	r3, #21
 8007c4c:	d8f6      	bhi.n	8007c3c <_printf_i+0x28>
 8007c4e:	a101      	add	r1, pc, #4	; (adr r1, 8007c54 <_printf_i+0x40>)
 8007c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cc1 	.word	0x08007cc1
 8007c5c:	08007c3d 	.word	0x08007c3d
 8007c60:	08007c3d 	.word	0x08007c3d
 8007c64:	08007c3d 	.word	0x08007c3d
 8007c68:	08007c3d 	.word	0x08007c3d
 8007c6c:	08007cc1 	.word	0x08007cc1
 8007c70:	08007c3d 	.word	0x08007c3d
 8007c74:	08007c3d 	.word	0x08007c3d
 8007c78:	08007c3d 	.word	0x08007c3d
 8007c7c:	08007c3d 	.word	0x08007c3d
 8007c80:	08007dcf 	.word	0x08007dcf
 8007c84:	08007cf1 	.word	0x08007cf1
 8007c88:	08007db1 	.word	0x08007db1
 8007c8c:	08007c3d 	.word	0x08007c3d
 8007c90:	08007c3d 	.word	0x08007c3d
 8007c94:	08007df1 	.word	0x08007df1
 8007c98:	08007c3d 	.word	0x08007c3d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c3d 	.word	0x08007c3d
 8007ca4:	08007c3d 	.word	0x08007c3d
 8007ca8:	08007db9 	.word	0x08007db9
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	1d1a      	adds	r2, r3, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	602a      	str	r2, [r5, #0]
 8007cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0a4      	b.n	8007e0a <_printf_i+0x1f6>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	6829      	ldr	r1, [r5, #0]
 8007cc4:	0606      	lsls	r6, r0, #24
 8007cc6:	f101 0304 	add.w	r3, r1, #4
 8007cca:	d50a      	bpl.n	8007ce2 <_printf_i+0xce>
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	da03      	bge.n	8007cdc <_printf_i+0xc8>
 8007cd4:	232d      	movs	r3, #45	; 0x2d
 8007cd6:	4276      	negs	r6, r6
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cdc:	230a      	movs	r3, #10
 8007cde:	485e      	ldr	r0, [pc, #376]	; (8007e58 <_printf_i+0x244>)
 8007ce0:	e019      	b.n	8007d16 <_printf_i+0x102>
 8007ce2:	680e      	ldr	r6, [r1, #0]
 8007ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	bf18      	it	ne
 8007cec:	b236      	sxthne	r6, r6
 8007cee:	e7ef      	b.n	8007cd0 <_printf_i+0xbc>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	1d19      	adds	r1, r3, #4
 8007cf6:	6029      	str	r1, [r5, #0]
 8007cf8:	0601      	lsls	r1, r0, #24
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0xec>
 8007cfc:	681e      	ldr	r6, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0xf2>
 8007d00:	0646      	lsls	r6, r0, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0xe8>
 8007d04:	881e      	ldrh	r6, [r3, #0]
 8007d06:	2f6f      	cmp	r7, #111	; 0x6f
 8007d08:	bf0c      	ite	eq
 8007d0a:	2308      	moveq	r3, #8
 8007d0c:	230a      	movne	r3, #10
 8007d0e:	4852      	ldr	r0, [pc, #328]	; (8007e58 <_printf_i+0x244>)
 8007d10:	2100      	movs	r1, #0
 8007d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d16:	6865      	ldr	r5, [r4, #4]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	bfa8      	it	ge
 8007d1c:	6821      	ldrge	r1, [r4, #0]
 8007d1e:	60a5      	str	r5, [r4, #8]
 8007d20:	bfa4      	itt	ge
 8007d22:	f021 0104 	bicge.w	r1, r1, #4
 8007d26:	6021      	strge	r1, [r4, #0]
 8007d28:	b90e      	cbnz	r6, 8007d2e <_printf_i+0x11a>
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	d04d      	beq.n	8007dca <_printf_i+0x1b6>
 8007d2e:	4615      	mov	r5, r2
 8007d30:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d34:	fb03 6711 	mls	r7, r3, r1, r6
 8007d38:	5dc7      	ldrb	r7, [r0, r7]
 8007d3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d3e:	4637      	mov	r7, r6
 8007d40:	42bb      	cmp	r3, r7
 8007d42:	460e      	mov	r6, r1
 8007d44:	d9f4      	bls.n	8007d30 <_printf_i+0x11c>
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d10b      	bne.n	8007d62 <_printf_i+0x14e>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	07de      	lsls	r6, r3, #31
 8007d4e:	d508      	bpl.n	8007d62 <_printf_i+0x14e>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	6861      	ldr	r1, [r4, #4]
 8007d54:	4299      	cmp	r1, r3
 8007d56:	bfde      	ittt	le
 8007d58:	2330      	movle	r3, #48	; 0x30
 8007d5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d62:	1b52      	subs	r2, r2, r5
 8007d64:	6122      	str	r2, [r4, #16]
 8007d66:	464b      	mov	r3, r9
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f8cd a000 	str.w	sl, [sp]
 8007d70:	aa03      	add	r2, sp, #12
 8007d72:	f7ff fedf 	bl	8007b34 <_printf_common>
 8007d76:	3001      	adds	r0, #1
 8007d78:	d14c      	bne.n	8007e14 <_printf_i+0x200>
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7e:	b004      	add	sp, #16
 8007d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d84:	4834      	ldr	r0, [pc, #208]	; (8007e58 <_printf_i+0x244>)
 8007d86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d8a:	6829      	ldr	r1, [r5, #0]
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d92:	6029      	str	r1, [r5, #0]
 8007d94:	061d      	lsls	r5, r3, #24
 8007d96:	d514      	bpl.n	8007dc2 <_printf_i+0x1ae>
 8007d98:	07df      	lsls	r7, r3, #31
 8007d9a:	bf44      	itt	mi
 8007d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007da0:	6023      	strmi	r3, [r4, #0]
 8007da2:	b91e      	cbnz	r6, 8007dac <_printf_i+0x198>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	f023 0320 	bic.w	r3, r3, #32
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2310      	movs	r3, #16
 8007dae:	e7af      	b.n	8007d10 <_printf_i+0xfc>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	f043 0320 	orr.w	r3, r3, #32
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	2378      	movs	r3, #120	; 0x78
 8007dba:	4828      	ldr	r0, [pc, #160]	; (8007e5c <_printf_i+0x248>)
 8007dbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dc0:	e7e3      	b.n	8007d8a <_printf_i+0x176>
 8007dc2:	0659      	lsls	r1, r3, #25
 8007dc4:	bf48      	it	mi
 8007dc6:	b2b6      	uxthmi	r6, r6
 8007dc8:	e7e6      	b.n	8007d98 <_printf_i+0x184>
 8007dca:	4615      	mov	r5, r2
 8007dcc:	e7bb      	b.n	8007d46 <_printf_i+0x132>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	6826      	ldr	r6, [r4, #0]
 8007dd2:	1d18      	adds	r0, r3, #4
 8007dd4:	6961      	ldr	r1, [r4, #20]
 8007dd6:	6028      	str	r0, [r5, #0]
 8007dd8:	0635      	lsls	r5, r6, #24
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	d501      	bpl.n	8007de2 <_printf_i+0x1ce>
 8007dde:	6019      	str	r1, [r3, #0]
 8007de0:	e002      	b.n	8007de8 <_printf_i+0x1d4>
 8007de2:	0670      	lsls	r0, r6, #25
 8007de4:	d5fb      	bpl.n	8007dde <_printf_i+0x1ca>
 8007de6:	8019      	strh	r1, [r3, #0]
 8007de8:	2300      	movs	r3, #0
 8007dea:	4615      	mov	r5, r2
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	e7ba      	b.n	8007d66 <_printf_i+0x152>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	2100      	movs	r1, #0
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	681d      	ldr	r5, [r3, #0]
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 f82f 	bl	8007e60 <memchr>
 8007e02:	b108      	cbz	r0, 8007e08 <_printf_i+0x1f4>
 8007e04:	1b40      	subs	r0, r0, r5
 8007e06:	6060      	str	r0, [r4, #4]
 8007e08:	6863      	ldr	r3, [r4, #4]
 8007e0a:	6123      	str	r3, [r4, #16]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e12:	e7a8      	b.n	8007d66 <_printf_i+0x152>
 8007e14:	462a      	mov	r2, r5
 8007e16:	4649      	mov	r1, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	47d0      	blx	sl
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d0ab      	beq.n	8007d7a <_printf_i+0x166>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	079b      	lsls	r3, r3, #30
 8007e26:	d413      	bmi.n	8007e50 <_printf_i+0x23c>
 8007e28:	68e0      	ldr	r0, [r4, #12]
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	4298      	cmp	r0, r3
 8007e2e:	bfb8      	it	lt
 8007e30:	4618      	movlt	r0, r3
 8007e32:	e7a4      	b.n	8007d7e <_printf_i+0x16a>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4632      	mov	r2, r6
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	47d0      	blx	sl
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d09b      	beq.n	8007d7a <_printf_i+0x166>
 8007e42:	3501      	adds	r5, #1
 8007e44:	68e3      	ldr	r3, [r4, #12]
 8007e46:	9903      	ldr	r1, [sp, #12]
 8007e48:	1a5b      	subs	r3, r3, r1
 8007e4a:	42ab      	cmp	r3, r5
 8007e4c:	dcf2      	bgt.n	8007e34 <_printf_i+0x220>
 8007e4e:	e7eb      	b.n	8007e28 <_printf_i+0x214>
 8007e50:	2500      	movs	r5, #0
 8007e52:	f104 0619 	add.w	r6, r4, #25
 8007e56:	e7f5      	b.n	8007e44 <_printf_i+0x230>
 8007e58:	08008501 	.word	0x08008501
 8007e5c:	08008512 	.word	0x08008512

08007e60 <memchr>:
 8007e60:	4603      	mov	r3, r0
 8007e62:	b510      	push	{r4, lr}
 8007e64:	b2c9      	uxtb	r1, r1
 8007e66:	4402      	add	r2, r0
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	d101      	bne.n	8007e72 <memchr+0x12>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e003      	b.n	8007e7a <memchr+0x1a>
 8007e72:	7804      	ldrb	r4, [r0, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	428c      	cmp	r4, r1
 8007e78:	d1f6      	bne.n	8007e68 <memchr+0x8>
 8007e7a:	bd10      	pop	{r4, pc}

08007e7c <memmove>:
 8007e7c:	4288      	cmp	r0, r1
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	eb01 0402 	add.w	r4, r1, r2
 8007e84:	d902      	bls.n	8007e8c <memmove+0x10>
 8007e86:	4284      	cmp	r4, r0
 8007e88:	4623      	mov	r3, r4
 8007e8a:	d807      	bhi.n	8007e9c <memmove+0x20>
 8007e8c:	1e43      	subs	r3, r0, #1
 8007e8e:	42a1      	cmp	r1, r4
 8007e90:	d008      	beq.n	8007ea4 <memmove+0x28>
 8007e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e9a:	e7f8      	b.n	8007e8e <memmove+0x12>
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4402      	add	r2, r0
 8007ea0:	428a      	cmp	r2, r1
 8007ea2:	d100      	bne.n	8007ea6 <memmove+0x2a>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eae:	e7f7      	b.n	8007ea0 <memmove+0x24>

08007eb0 <_free_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d040      	beq.n	8007f3a <_free_r+0x8a>
 8007eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfb8      	it	lt
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	f000 f910 	bl	80080e8 <__malloc_lock>
 8007ec8:	4a1c      	ldr	r2, [pc, #112]	; (8007f3c <_free_r+0x8c>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x2c>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed8:	f000 b90c 	b.w	80080f4 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x42>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x1e>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x4c>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x42>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1850      	adds	r0, r2, r1
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x6c>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	4401      	add	r1, r0
 8007f08:	1850      	adds	r0, r2, r1
 8007f0a:	4283      	cmp	r3, r0
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x22>
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4401      	add	r1, r0
 8007f16:	6011      	str	r1, [r2, #0]
 8007f18:	6053      	str	r3, [r2, #4]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x22>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x74>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x22>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	1821      	adds	r1, r4, r0
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf01      	itttt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	1809      	addeq	r1, r1, r0
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6054      	str	r4, [r2, #4]
 8007f38:	e7cb      	b.n	8007ed2 <_free_r+0x22>
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200011e4 	.word	0x200011e4

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 f8bc 	bl	80080c8 <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f8b7 	bl	80080c8 <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f8ac 	bl	80080c8 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	200011e8 	.word	0x200011e8

08007f80 <_malloc_r>:
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	4e2e      	ldr	r6, [pc, #184]	; (8008064 <_malloc_r+0xe4>)
 8007faa:	f000 f89d 	bl	80080e8 <__malloc_lock>
 8007fae:	6833      	ldr	r3, [r6, #0]
 8007fb0:	461c      	mov	r4, r3
 8007fb2:	bb34      	cbnz	r4, 8008002 <_malloc_r+0x82>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ffc2 	bl	8007f40 <sbrk_aligned>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	d14d      	bne.n	800805e <_malloc_r+0xde>
 8007fc2:	6834      	ldr	r4, [r6, #0]
 8007fc4:	4626      	mov	r6, r4
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d140      	bne.n	800804c <_malloc_r+0xcc>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4638      	mov	r0, r7
 8007fd0:	eb04 0803 	add.w	r8, r4, r3
 8007fd4:	f000 f878 	bl	80080c8 <_sbrk_r>
 8007fd8:	4580      	cmp	r8, r0
 8007fda:	d13a      	bne.n	8008052 <_malloc_r+0xd2>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	3503      	adds	r5, #3
 8007fe0:	1a6d      	subs	r5, r5, r1
 8007fe2:	f025 0503 	bic.w	r5, r5, #3
 8007fe6:	3508      	adds	r5, #8
 8007fe8:	2d0c      	cmp	r5, #12
 8007fea:	bf38      	it	cc
 8007fec:	250c      	movcc	r5, #12
 8007fee:	4638      	mov	r0, r7
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7ff ffa5 	bl	8007f40 <sbrk_aligned>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d02b      	beq.n	8008052 <_malloc_r+0xd2>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	442b      	add	r3, r5
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	e00e      	b.n	8008020 <_malloc_r+0xa0>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	1b52      	subs	r2, r2, r5
 8008006:	d41e      	bmi.n	8008046 <_malloc_r+0xc6>
 8008008:	2a0b      	cmp	r2, #11
 800800a:	d916      	bls.n	800803a <_malloc_r+0xba>
 800800c:	1961      	adds	r1, r4, r5
 800800e:	42a3      	cmp	r3, r4
 8008010:	6025      	str	r5, [r4, #0]
 8008012:	bf18      	it	ne
 8008014:	6059      	strne	r1, [r3, #4]
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	bf08      	it	eq
 800801a:	6031      	streq	r1, [r6, #0]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4638      	mov	r0, r7
 8008022:	f104 060b 	add.w	r6, r4, #11
 8008026:	f000 f865 	bl	80080f4 <__malloc_unlock>
 800802a:	f026 0607 	bic.w	r6, r6, #7
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	1af2      	subs	r2, r6, r3
 8008032:	d0b6      	beq.n	8007fa2 <_malloc_r+0x22>
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	50a3      	str	r3, [r4, r2]
 8008038:	e7b3      	b.n	8007fa2 <_malloc_r+0x22>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	bf0c      	ite	eq
 8008040:	6032      	streq	r2, [r6, #0]
 8008042:	605a      	strne	r2, [r3, #4]
 8008044:	e7ec      	b.n	8008020 <_malloc_r+0xa0>
 8008046:	4623      	mov	r3, r4
 8008048:	6864      	ldr	r4, [r4, #4]
 800804a:	e7b2      	b.n	8007fb2 <_malloc_r+0x32>
 800804c:	4634      	mov	r4, r6
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	e7b9      	b.n	8007fc6 <_malloc_r+0x46>
 8008052:	230c      	movs	r3, #12
 8008054:	4638      	mov	r0, r7
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	f000 f84c 	bl	80080f4 <__malloc_unlock>
 800805c:	e7a1      	b.n	8007fa2 <_malloc_r+0x22>
 800805e:	6025      	str	r5, [r4, #0]
 8008060:	e7de      	b.n	8008020 <_malloc_r+0xa0>
 8008062:	bf00      	nop
 8008064:	200011e4 	.word	0x200011e4

08008068 <_realloc_r>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4680      	mov	r8, r0
 800806e:	4614      	mov	r4, r2
 8008070:	460e      	mov	r6, r1
 8008072:	b921      	cbnz	r1, 800807e <_realloc_r+0x16>
 8008074:	4611      	mov	r1, r2
 8008076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	f7ff bf81 	b.w	8007f80 <_malloc_r>
 800807e:	b92a      	cbnz	r2, 800808c <_realloc_r+0x24>
 8008080:	f7ff ff16 	bl	8007eb0 <_free_r>
 8008084:	4625      	mov	r5, r4
 8008086:	4628      	mov	r0, r5
 8008088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808c:	f000 f838 	bl	8008100 <_malloc_usable_size_r>
 8008090:	4284      	cmp	r4, r0
 8008092:	4607      	mov	r7, r0
 8008094:	d802      	bhi.n	800809c <_realloc_r+0x34>
 8008096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800809a:	d812      	bhi.n	80080c2 <_realloc_r+0x5a>
 800809c:	4621      	mov	r1, r4
 800809e:	4640      	mov	r0, r8
 80080a0:	f7ff ff6e 	bl	8007f80 <_malloc_r>
 80080a4:	4605      	mov	r5, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0ed      	beq.n	8008086 <_realloc_r+0x1e>
 80080aa:	42bc      	cmp	r4, r7
 80080ac:	4622      	mov	r2, r4
 80080ae:	4631      	mov	r1, r6
 80080b0:	bf28      	it	cs
 80080b2:	463a      	movcs	r2, r7
 80080b4:	f7ff fbac 	bl	8007810 <memcpy>
 80080b8:	4631      	mov	r1, r6
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7ff fef8 	bl	8007eb0 <_free_r>
 80080c0:	e7e1      	b.n	8008086 <_realloc_r+0x1e>
 80080c2:	4635      	mov	r5, r6
 80080c4:	e7df      	b.n	8008086 <_realloc_r+0x1e>
	...

080080c8 <_sbrk_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	2300      	movs	r3, #0
 80080cc:	4d05      	ldr	r5, [pc, #20]	; (80080e4 <_sbrk_r+0x1c>)
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7fb ff12 	bl	8003efc <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_sbrk_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_sbrk_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200011ec 	.word	0x200011ec

080080e8 <__malloc_lock>:
 80080e8:	4801      	ldr	r0, [pc, #4]	; (80080f0 <__malloc_lock+0x8>)
 80080ea:	f000 b811 	b.w	8008110 <__retarget_lock_acquire_recursive>
 80080ee:	bf00      	nop
 80080f0:	200011f0 	.word	0x200011f0

080080f4 <__malloc_unlock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	; (80080fc <__malloc_unlock+0x8>)
 80080f6:	f000 b80c 	b.w	8008112 <__retarget_lock_release_recursive>
 80080fa:	bf00      	nop
 80080fc:	200011f0 	.word	0x200011f0

08008100 <_malloc_usable_size_r>:
 8008100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008104:	1f18      	subs	r0, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfbc      	itt	lt
 800810a:	580b      	ldrlt	r3, [r1, r0]
 800810c:	18c0      	addlt	r0, r0, r3
 800810e:	4770      	bx	lr

08008110 <__retarget_lock_acquire_recursive>:
 8008110:	4770      	bx	lr

08008112 <__retarget_lock_release_recursive>:
 8008112:	4770      	bx	lr

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
